"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var generateContractsRequests_1 = require("../util/generateContractsRequests");
var http_1 = require("../http");
var ClientService_1 = require("./ClientService");
var errorHandler_1 = require("../util/errorHandler");
var getHeaders_1 = require("../util/getHeaders");
var validateToken_1 = require("../util/validateToken");
var AnalysesService = /** @class */ (function () {
    function AnalysesService(jwtTokens, toolName) {
        if (toolName === void 0) { toolName = 'MythXJS'; }
        this.API_URL = ClientService_1.ClientService.MYTHX_API_ENVIRONMENT;
        if (validateToken_1.isTokenValid(jwtTokens.access)) {
            ClientService_1.ClientService.jwtTokens = jwtTokens;
        }
        else {
            throw new Error('Access token has expired or is invalid! Please login again.');
        }
        this.toolName = toolName;
    }
    AnalysesService.prototype.getAnalysesList = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, headers, tokens, result, analysisList, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, getHeaders_1.getHeaders(ClientService_1.ClientService.jwtTokens)];
                    case 1:
                        _a = _b.sent(), headers = _a.headers, tokens = _a.tokens;
                        this.setCredentials(tokens);
                        return [4 /*yield*/, http_1.getRequest(this.API_URL + "/analyses", headers)];
                    case 2:
                        result = _b.sent();
                        analysisList = result.data;
                        return [2 /*return*/, analysisList];
                    case 3:
                        err_1 = _b.sent();
                        errorHandler_1.errorHandler(err_1);
                        throw err_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AnalysesService.prototype.getAnalysisStatus = function (uuid) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, headers, tokens, result, analysisRes, err_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, getHeaders_1.getHeaders(ClientService_1.ClientService.jwtTokens)];
                    case 1:
                        _a = _b.sent(), headers = _a.headers, tokens = _a.tokens;
                        this.setCredentials(tokens);
                        return [4 /*yield*/, http_1.getRequest(this.API_URL + "/analyses/" + uuid, headers)];
                    case 2:
                        result = _b.sent();
                        analysisRes = result.data;
                        return [2 /*return*/, analysisRes];
                    case 3:
                        err_2 = _b.sent();
                        errorHandler_1.errorHandler(err_2);
                        throw err_2;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AnalysesService.prototype.getDetectedIssues = function (uuid) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, headers, tokens, getStatus, result, detectedIssues, err_3;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 6, , 7]);
                        return [4 /*yield*/, getHeaders_1.getHeaders(ClientService_1.ClientService.jwtTokens)];
                    case 1:
                        _a = _b.sent(), headers = _a.headers, tokens = _a.tokens;
                        this.setCredentials(tokens);
                        return [4 /*yield*/, this.getAnalysisStatus(uuid)];
                    case 2:
                        getStatus = _b.sent();
                        if (!(getStatus.status === 'Queued' || getStatus.status === 'In progress')) return [3 /*break*/, 4];
                        return [4 /*yield*/, new Promise(function (resolve) {
                                var timer = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
                                    var analysisReq;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, this.getAnalysisStatus(uuid)];
                                            case 1:
                                                analysisReq = _a.sent();
                                                if (analysisReq.status === 'Finished' || analysisReq.status === 'Error') {
                                                    clearInterval(timer);
                                                    resolve('done');
                                                }
                                                return [2 /*return*/];
                                        }
                                    });
                                }); }, 5000);
                            })];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4: return [4 /*yield*/, http_1.getRequest(this.API_URL + "/analyses/" + uuid + "/issues", headers)];
                    case 5:
                        result = _b.sent();
                        detectedIssues = result.data;
                        return [2 /*return*/, detectedIssues];
                    case 6:
                        err_3 = _b.sent();
                        errorHandler_1.errorHandler(err_3);
                        throw err_3;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    AnalysesService.prototype.submitBytecode = function (bytecode) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, headers, tokens, request, result, analysisRes, err_4;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, getHeaders_1.getHeaders(ClientService_1.ClientService.jwtTokens)];
                    case 1:
                        _a = _b.sent(), headers = _a.headers, tokens = _a.tokens;
                        this.setCredentials(tokens);
                        request = generateContractsRequests_1.generateBytecodeRequest(bytecode, this.toolName);
                        return [4 /*yield*/, http_1.postRequest(this.API_URL + "/analyses", request, headers)];
                    case 2:
                        result = _b.sent();
                        analysisRes = result.data;
                        return [2 /*return*/, analysisRes];
                    case 3:
                        err_4 = _b.sent();
                        errorHandler_1.errorHandler(err_4);
                        throw err_4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AnalysesService.prototype.submitSourceCode = function (sourceCode, contractName, propertyChecking) {
        if (propertyChecking === void 0) { propertyChecking = false; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, headers, tokens, request, result, analysisRes, err_5;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, getHeaders_1.getHeaders(ClientService_1.ClientService.jwtTokens)];
                    case 1:
                        _a = _b.sent(), headers = _a.headers, tokens = _a.tokens;
                        this.setCredentials(tokens);
                        request = generateContractsRequests_1.generateSourceCodeRequest(sourceCode, contractName, this.toolName, propertyChecking);
                        return [4 /*yield*/, http_1.postRequest(this.API_URL + "/analyses", request, headers)];
                    case 2:
                        result = _b.sent();
                        analysisRes = result.data;
                        return [2 /*return*/, analysisRes];
                    case 3:
                        err_5 = _b.sent();
                        errorHandler_1.errorHandler(err_5);
                        throw err_5;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AnalysesService.prototype.analyze = function (options, propertyChecking) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, headers, tokens, request, result, analysisRes, err_6;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, getHeaders_1.getHeaders(ClientService_1.ClientService.jwtTokens)];
                    case 1:
                        _a = _b.sent(), headers = _a.headers, tokens = _a.tokens;
                        this.setCredentials(tokens);
                        request = generateContractsRequests_1.generateAnalysisRequest(options, this.toolName, propertyChecking);
                        return [4 /*yield*/, http_1.postRequest(this.API_URL + "/analyses", request, headers)];
                    case 2:
                        result = _b.sent();
                        analysisRes = result.data;
                        return [2 /*return*/, analysisRes];
                    case 3:
                        err_6 = _b.sent();
                        errorHandler_1.errorHandler(err_6);
                        throw err_6;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AnalysesService.prototype.getPdf = function (uuid) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, headers, tokens, result, pdfRes, err_7;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, getHeaders_1.getHeaders(ClientService_1.ClientService.jwtTokens)];
                    case 1:
                        _a = _b.sent(), headers = _a.headers, tokens = _a.tokens;
                        this.setCredentials(tokens);
                        return [4 /*yield*/, http_1.getRequest(this.API_URL + "/analyses/" + uuid + "/pdf-report", headers)];
                    case 2:
                        result = _b.sent();
                        pdfRes = result.data;
                        return [2 /*return*/, pdfRes];
                    case 3:
                        err_7 = _b.sent();
                        errorHandler_1.errorHandler(err_7);
                        throw err_7;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AnalysesService.prototype.listGroups = function (queryString) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, headers, tokens, result, groupsRes, err_8;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, getHeaders_1.getHeaders(ClientService_1.ClientService.jwtTokens)];
                    case 1:
                        _a = _b.sent(), headers = _a.headers, tokens = _a.tokens;
                        this.setCredentials(tokens);
                        return [4 /*yield*/, http_1.getRequest(this.API_URL + "/analysis-groups?" + queryString, headers)];
                    case 2:
                        result = _b.sent();
                        groupsRes = result.data;
                        return [2 /*return*/, groupsRes];
                    case 3:
                        err_8 = _b.sent();
                        errorHandler_1.errorHandler(err_8);
                        throw err_8;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AnalysesService.prototype.getGroupById = function (groupId) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, headers, tokens, result, groupRes, err_9;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        if (!groupId) {
                            throw new Error('MythXJS: Group ID is required to perform this operation');
                        }
                        return [4 /*yield*/, getHeaders_1.getHeaders(ClientService_1.ClientService.jwtTokens)];
                    case 1:
                        _a = _b.sent(), headers = _a.headers, tokens = _a.tokens;
                        this.setCredentials(tokens);
                        return [4 /*yield*/, http_1.getRequest(this.API_URL + "/analysis-groups/" + groupId, headers)];
                    case 2:
                        result = _b.sent();
                        groupRes = result.data;
                        return [2 /*return*/, groupRes];
                    case 3:
                        err_9 = _b.sent();
                        errorHandler_1.errorHandler(err_9);
                        throw err_9;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AnalysesService.prototype.createGroup = function (groupName) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, headers, tokens, body, result, groupRes, err_10;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, getHeaders_1.getHeaders(ClientService_1.ClientService.jwtTokens)];
                    case 1:
                        _a = _b.sent(), headers = _a.headers, tokens = _a.tokens;
                        this.setCredentials(tokens);
                        body = groupName ? { groupName: groupName } : null;
                        return [4 /*yield*/, http_1.postRequest(this.API_URL + "/analysis-groups", body, headers)];
                    case 2:
                        result = _b.sent();
                        groupRes = result.data;
                        return [2 /*return*/, groupRes];
                    case 3:
                        err_10 = _b.sent();
                        errorHandler_1.errorHandler(err_10);
                        throw err_10;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AnalysesService.prototype.groupOperation = function (groupId, operationType) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, headers, tokens, body, result, groupRes, err_11;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 3, , 4]);
                        if (!groupId) {
                            throw new Error('MythXJS: Group ID is required to perform this operation');
                        }
                        return [4 /*yield*/, getHeaders_1.getHeaders(ClientService_1.ClientService.jwtTokens)];
                    case 1:
                        _a = _b.sent(), headers = _a.headers, tokens = _a.tokens;
                        this.setCredentials(tokens);
                        body = operationType ? { type: operationType } : 'seal_group';
                        return [4 /*yield*/, http_1.postRequest(this.API_URL + "/analysis-groups/" + groupId, body, headers)];
                    case 2:
                        result = _b.sent();
                        groupRes = result.data;
                        return [2 /*return*/, groupRes];
                    case 3:
                        err_11 = _b.sent();
                        errorHandler_1.errorHandler(err_11);
                        throw err_11;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    AnalysesService.prototype.setCredentials = function (tokens) {
        ClientService_1.ClientService.jwtTokens.access = tokens.access;
        ClientService_1.ClientService.jwtTokens.refresh = tokens.refresh;
    };
    return AnalysesService;
}());
exports.AnalysesService = AnalysesService;
