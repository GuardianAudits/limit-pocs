"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ClientService_1 = require("./ClientService");
var http_1 = require("../http");
var loginUser_1 = require("../auth/loginUser");
var getHeaders_1 = require("../util/getHeaders");
var errorHandler_1 = require("../util/errorHandler");
var AuthService = /** @class */ (function () {
    function AuthService(ethAddress, password) {
        this.API_URL = ClientService_1.ClientService.MYTHX_API_ENVIRONMENT;
        this.ethAddress = ethAddress;
        this.password = password;
    }
    AuthService.prototype.login = function (ethAddress, password) {
        return __awaiter(this, void 0, void 0, function () {
            var result, tokens, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        if (ethAddress && password) {
                            this.ethAddress = ethAddress;
                            this.password = password;
                        }
                        return [4 /*yield*/, loginUser_1.loginUser(this.ethAddress, this.password, this.API_URL + "/auth/login")];
                    case 1:
                        result = _a.sent();
                        tokens = result.data.jwtTokens;
                        this.setCredentials(tokens);
                        return [2 /*return*/, tokens];
                    case 2:
                        err_1 = _a.sent();
                        errorHandler_1.errorHandler(err_1);
                        throw err_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     *  Login to the API using metamask challenge result message.
     *  In order to get the object containing the message, use `getChallenge` and handle Metamask login in the frontend.
     * @param signature message.value property contained in object returned from `getChallenge`.
     * @param provider pass a provider value for the HTTP headers. If nothing is passed defaults to MetaMask
     * @return {Promise<JwtTokensInterface>}  Returns an object containing two tokens (access+refresh) that can be saved in storage.
     */
    AuthService.prototype.loginWithSignature = function (signature, provider) {
        if (provider === void 0) { provider = 'MetaMask'; }
        return __awaiter(this, void 0, void 0, function () {
            var headers, result, tokens, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        headers = {
                            Authorization: provider + " " + signature,
                        };
                        return [4 /*yield*/, http_1.postRequest(this.API_URL + "/auth/login", null, headers)];
                    case 1:
                        result = _a.sent();
                        tokens = result.data.jwtTokens;
                        this.setCredentials(tokens);
                        return [2 /*return*/, tokens];
                    case 2:
                        err_2 = _a.sent();
                        errorHandler_1.errorHandler(err_2);
                        throw err_2;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AuthService.prototype.logout = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, headers, tokens, result, err_3;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.isUserLoggedIn()) return [3 /*break*/, 6];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, getHeaders_1.getHeaders(ClientService_1.ClientService.jwtTokens)];
                    case 2:
                        _a = _b.sent(), headers = _a.headers, tokens = _a.tokens;
                        this.setCredentials(tokens);
                        return [4 /*yield*/, http_1.postRequest(this.API_URL + "/auth/logout", {}, headers)];
                    case 3:
                        result = _b.sent();
                        ClientService_1.ClientService.jwtTokens.access = ClientService_1.ClientService.jwtTokens.refresh = '';
                        return [2 /*return*/, result.data];
                    case 4:
                        err_3 = _b.sent();
                        errorHandler_1.errorHandler(err_3);
                        throw err_3;
                    case 5: return [3 /*break*/, 7];
                    case 6: throw new Error('MythxJS no valid token found. Please login');
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    AuthService.prototype.getVersion = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result, version, err_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, http_1.getRequest(this.API_URL + "/version", null)];
                    case 1:
                        result = _a.sent();
                        version = result.data;
                        return [2 /*return*/, version];
                    case 2:
                        err_4 = _a.sent();
                        errorHandler_1.errorHandler(err_4);
                        throw err_4;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AuthService.prototype.getOpenApiHTML = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result, openApi, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, http_1.getRequest(this.API_URL + "/openapi", null)];
                    case 1:
                        result = _a.sent();
                        openApi = result.data;
                        return [2 /*return*/, openApi];
                    case 2:
                        err_5 = _a.sent();
                        errorHandler_1.errorHandler(err_5);
                        throw err_5;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AuthService.prototype.getOpenApiYAML = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result, err_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, http_1.getRequest(this.API_URL + "/openapi.yaml", null)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data];
                    case 2:
                        err_6 = _a.sent();
                        errorHandler_1.errorHandler(err_6);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    AuthService.prototype.getStats = function (queryString) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, headers, tokens, result, stats, err_7;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.isUserLoggedIn()) return [3 /*break*/, 6];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, getHeaders_1.getHeaders(ClientService_1.ClientService.jwtTokens)];
                    case 2:
                        _a = _b.sent(), headers = _a.headers, tokens = _a.tokens;
                        this.setCredentials(tokens);
                        return [4 /*yield*/, http_1.getRequest(this.API_URL + "/stats/users-analyses?" + queryString, headers)];
                    case 3:
                        result = _b.sent();
                        stats = result.data;
                        return [2 /*return*/, stats];
                    case 4:
                        err_7 = _b.sent();
                        errorHandler_1.errorHandler(err_7);
                        return [3 /*break*/, 5];
                    case 5: return [3 /*break*/, 7];
                    case 6: throw new Error('MythxJS no valid token found. Please login.');
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     *  Generates authentication challenge (Metamask only for now).
     *  The Metamask flow needs to be handled on the front end since MythXJS does not have Web3 dependencies.
     * @param ethAddress Ethereum address for Mythx account
     * @returns Resolves with API response or throw error
     */
    AuthService.prototype.getChallenge = function (ethAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var address, result, err_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        address = ethAddress ? ethAddress : this.ethAddress;
                        return [4 /*yield*/, http_1.getRequest(this.API_URL + "/auth/challenge?ethAddress=" + address, {})];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data];
                    case 2:
                        err_8 = _a.sent();
                        errorHandler_1.errorHandler(err_8);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Retrieve list of registred API users or just caller user object if no required permission.
     * @param queryString Query string for detailed list (query parameters: offset, orderBy, email, ethAddress)
     * @returns Resolves with API response or throw error
     */
    AuthService.prototype.getUsers = function (queryString) {
        if (queryString === void 0) { queryString = ''; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, headers, tokens, result, users, err_9;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.isUserLoggedIn()) return [3 /*break*/, 6];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, getHeaders_1.getHeaders(ClientService_1.ClientService.jwtTokens)];
                    case 2:
                        _a = _b.sent(), headers = _a.headers, tokens = _a.tokens;
                        this.setCredentials(tokens);
                        return [4 /*yield*/, http_1.getRequest(this.API_URL + "/users?" + queryString, headers)];
                    case 3:
                        result = _b.sent();
                        users = result.data;
                        return [2 /*return*/, users];
                    case 4:
                        err_9 = _b.sent();
                        errorHandler_1.errorHandler(err_9);
                        throw err_9;
                    case 5: return [3 /*break*/, 7];
                    case 6: throw new Error('MythxJS no valid token found. Please login.');
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    AuthService.prototype.isUserLoggedIn = function () {
        return !!ClientService_1.ClientService.jwtTokens.access;
    };
    AuthService.prototype.setCredentials = function (tokens) {
        ClientService_1.ClientService.jwtTokens.access = tokens.access;
        ClientService_1.ClientService.jwtTokens.refresh = tokens.refresh;
    };
    return AuthService;
}());
exports.AuthService = AuthService;
