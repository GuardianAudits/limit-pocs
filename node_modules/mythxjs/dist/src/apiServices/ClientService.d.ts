import { AnalysisGroups, AnalyzeOptions, ClientConfig, Group, JwtTokensInterface, StatsResponse, UsersResponse } from '..';
import { AnalysisList, AnalysisSubmission, DetectedIssues, Version } from '../types';
/**
 * Main service exposed to outside.
 * Needs to be instantiated with username, password, toolName (optional) and environment (optional) fields. If no environment specified it will default to prod.
 * Please note that this is exported as `Client`.
 * @example
 * `import { Client } from 'mythxjs'`.
 *
 * `const mythx = new Client('0x0000000000000000000000000000000000000000', 'trial', 'testTool', 'https://staging.api.mythx.io/v1/');`
 */
export declare class ClientService {
    /**
     * @ignore
     */
    private ethAddress;
    /**
     * @ignore
     */
    private password;
    /**
     * @ignore
     */
    private authService;
    /**
     * @ignore
     */
    private analysesService;
    /**
     * @ignore
     */
    /**
     * @ignore
     */
    private toolName;
    static MYTHX_API_ENVIRONMENT: any;
    static jwtTokens: JwtTokensInterface;
    constructor(clientConfig: ClientConfig);
    /**
     *  Login to the API using ethAddress and password specified in the library constructor.
     * @param ethAddress Ethereum address for Mythx account
     * @param password  Password for Ethereum address
     * @return {Promise<JwtTokensInterface>}  Returns an object containing two tokens (access+refresh) that can be saved in storage.
     */
    login(ethAddress?: string, password?: string): Promise<JwtTokensInterface>;
    /**
     *  Login to the API using metamask challenge result message.
     *  In order to get the object containing the message use `getChallenge` and handle Metamask login in the frontend.
     * @param signature Signature passed by provider. In case of metamask this will be returned after signing challenge.
     * @param provider pass a provider value for the HTTP headers. If nothing is passed defaults to MetaMask
     * @return {Promise<JwtTokensInterface>}  Returns an object containing two tokens (access+refresh) that can be saved in storage.
     */
    loginWithSignature(signature: string, provider: string): Promise<JwtTokensInterface>;
    /**
     *  Generates authentication challenge (Metamask only for now).
     *  The Metamask flow needs to be handled on the front end since MythXJS does not have Web3 dependencies.
     * @param ethAddress Ethereum address for Mythx account
     * @returns Resolves with API response or throw error
     */
    getChallenge(ethAddress?: string): Promise<any>;
    /**
     *  Logout from the API.
     * @returns Resolves with API response or throw error
     */
    logout(): Promise<{}>;
    /**
     *   Returns API current version.
     *   Does not require login.
     *   @returns Resolves with API response or throw error
     */
    getVersion(): Promise<Version>;
    /**
     *   Returns API stats.
     *   Internal only, needs admin credentials to be accessed.
     *   @returns {Promise<StatsResponse>} Resolves with API response or throw error
     */
    getStats(queryString?: string): Promise<Array<StatsResponse>>;
    /**
     * Retrieve list of registred API users or just caller user object if no required permission.
     * @param queryString Query string for detailed list (query parameters: offset, orderBy, email, ethAddress)
     * @returns {Promise<UsersResponse>} Resolves with API response or throw error
     */
    getUsers(queryString: string): Promise<UsersResponse>;
    getAnalysesList(): Promise<AnalysisList>;
    /**
     * Get status for analysis on given UUID.
     * @param uuid - unique identifier of analysis job
     * @return {Promise<AnalysisStatusResponse>} Resolves with API response, or throws error
     */
    getAnalysisStatus(uuid: string): Promise<AnalysisSubmission>;
    /**
     * Gets the array of issues from the API.
     *
     * @param {String} uuid - unique identifier of analysis job
     * @returns {Promise} Resolves with API response, or throws error
     */
    getDetectedIssues(uuid: string): Promise<DetectedIssues>;
    /**
     * Submit a smart contract using bytecode only.
     * This will likely be deprecated in future.
     *
     * @param {String} bytecode - Compiled bytecode of a smart contract for example "0xfe".
     * @return {Promise} Resolves with API response, or throws error
     */
    submitBytecode(bytecode: string): Promise<AnalysisSubmission>;
    /**
     * Submit a smart contract using sourcecode only.
     * This will likely be deprecated in future.
     *
     * @param {String} sourceCode - String containing smart contract sourcecode.
     * @param {String} contractName - Name of the contract to submit for analysis.
     * @param {Boolean} propertyChecking - Only Assertion Violations Check enabling flag
     * @return {Promise} Resolves with API response, or throws errors
     */
    submitSourceCode(sourceCode: string, contractName: string, propertyChecking?: boolean): Promise<AnalysisSubmission>;
    /**
     * Submit a smart contract using custom parameters.
     *
     * @param {Object} options - Object containing options to submit to API
     * @param {Boolean} propertyChecking - Only Assertion Violations Check enabling flag
     * @return {Promise} Resolves with API response, or throws error
     */
    analyze(options: AnalyzeOptions, propertyChecking?: boolean): Promise<AnalysisSubmission>;
    /**
     * Get API generated PDF.
     *
     * @param {String} uuid - Unique identifier of analysis job
     * @return {Promise} Resolves with API response, or throws error
     */
    getPdf(uuid: string): Promise<any>;
    /**
     * Get list of analyses groups.
     *
     * @param {String} queryString - Query string for detailed list of groups (query parameters: offset, createdBy, groupName, dateFrom, dateTo)
     * @return {Promise} Resolves with API response, or throws error
     */
    listGroups(queryString?: string): Promise<AnalysisGroups>;
    /**
     * Create an analysis submission group.
     *
     * @param {String} groupName (optional) - String that defines a group name
     * @return {Promise} Resolves with API response, or throws error
     */
    createGroup(groupName?: string): Promise<Group>;
    /**
     * Perform operations on specific group.
     *
     * @param {String} groupId - String that defines a unique group ID
     * @param {String} operationType (optional) - Type of operation to be performed in the group (e.g. "seal_group")
     * @return {Promise} Resolves with API response, or throws error
     */
    groupOperation(groupId: any, operationType?: any): Promise<Group>;
    /**
     * Get a single analyses group by ID.
     *
     * @param {String} groupId (required) - String that defines a unique group ID
     * @return {Promise} Resolves with API response, or throws error
     */
    getGroupById(groupId: string): Promise<Group>;
}
