"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function generateBytecodeRequest(bytecode, toolName) {
    if (toolName === void 0) { toolName = 'MythxJS'; }
    return {
        clientToolName: toolName,
        data: {
            bytecode: "" + bytecode,
        },
    };
}
exports.generateBytecodeRequest = generateBytecodeRequest;
function generateSourceCodeRequest(sourceCode, contractName, toolName, propertyChecking) {
    var _a;
    if (toolName === void 0) { toolName = 'MythxJS'; }
    if (propertyChecking === void 0) { propertyChecking = false; }
    return {
        clientToolName: toolName,
        propertyChecking: propertyChecking,
        data: {
            contractName: contractName,
            sources: (_a = {},
                _a[contractName + ".sol"] = {
                    source: sourceCode,
                },
                _a),
            mainSource: contractName + ".sol",
        },
    };
}
exports.generateSourceCodeRequest = generateSourceCodeRequest;
function generateAnalysisRequest(options, toolName, propertyChecking) {
    if (toolName === void 0) { toolName = 'MythXJS'; }
    if (propertyChecking === void 0) { propertyChecking = false; }
    if (options.toolName) {
        toolName = options.toolName;
    }
    var result = {
        clientToolName: toolName,
        noCacheLookup: options.noCacheLookup === undefined ? false : options.noCacheLookup,
        propertyChecking: propertyChecking,
        data: {},
    };
    if (typeof options.contractName !== 'undefined')
        result.data['contractName'] = options.contractName;
    if (typeof options.bytecode !== 'undefined')
        result.data['bytecode'] = options.bytecode;
    if (typeof options.sourceMap !== 'undefined')
        result.data['sourceMap'] = options.sourceMap;
    if (typeof options.deployedBytecode !== 'undefined')
        result.data['deployedBytecode'] = options.deployedBytecode;
    if (typeof options.deployedSourceMap !== 'undefined')
        result.data['deployedSourceMap'] = options.deployedSourceMap;
    if (typeof options.mainSource !== 'undefined')
        result.data['mainSource'] = options.mainSource;
    if (typeof options.sources !== 'undefined')
        result.data['sources'] = options.sources;
    if (typeof options.sourceList !== 'undefined')
        result.data['sourceList'] = options.sourceList;
    if (typeof options.solcVersion !== 'undefined')
        result.data['version'] = options.solcVersion;
    if (typeof options.analysisMode !== 'undefined')
        result.data['analysisMode'] = options.analysisMode;
    if (typeof options.groupId !== 'undefined')
        result['groupId'] = options.groupId;
    return result;
}
exports.generateAnalysisRequest = generateAnalysisRequest;
