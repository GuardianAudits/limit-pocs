/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ITwapSourceInterface extends ethers.utils.Interface {
  functions: {
    "calculateAverageTick(((uint160,uint160),address,address,int16))": FunctionFragment;
    "factory()": FunctionFragment;
    "feeTierTickSpacing(uint16)": FunctionFragment;
    "getPool(address,address,uint16)": FunctionFragment;
    "initialize(((uint160,uint160),address,address,int16))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateAverageTick",
    values: [
      {
        bounds: { min: BigNumberish; max: BigNumberish };
        token0: string;
        token1: string;
        tickSpacing: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeTierTickSpacing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      {
        bounds: { min: BigNumberish; max: BigNumberish };
        token0: string;
        token1: string;
        tickSpacing: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateAverageTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeTierTickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;

  events: {};
}

export class ITwapSource extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITwapSourceInterface;

  functions: {
    calculateAverageTick(
      constants: {
        bounds: { min: BigNumberish; max: BigNumberish };
        token0: string;
        token1: string;
        tickSpacing: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[number] & { averageTick: number }>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    feeTierTickSpacing(
      feeTier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { tickSpacing: number }>;

    getPool(
      tokenA: string,
      tokenB: string,
      feeTier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { pool: string }>;

    initialize(
      constants: {
        bounds: { min: BigNumberish; max: BigNumberish };
        token0: string;
        token1: string;
        tickSpacing: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateAverageTick(
    constants: {
      bounds: { min: BigNumberish; max: BigNumberish };
      token0: string;
      token1: string;
      tickSpacing: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<number>;

  factory(overrides?: CallOverrides): Promise<string>;

  feeTierTickSpacing(
    feeTier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  getPool(
    tokenA: string,
    tokenB: string,
    feeTier: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    constants: {
      bounds: { min: BigNumberish; max: BigNumberish };
      token0: string;
      token1: string;
      tickSpacing: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateAverageTick(
      constants: {
        bounds: { min: BigNumberish; max: BigNumberish };
        token0: string;
        token1: string;
        tickSpacing: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<number>;

    factory(overrides?: CallOverrides): Promise<string>;

    feeTierTickSpacing(
      feeTier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    getPool(
      tokenA: string,
      tokenB: string,
      feeTier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      constants: {
        bounds: { min: BigNumberish; max: BigNumberish };
        token0: string;
        token1: string;
        tickSpacing: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { initializable: number; startingTick: number }
    >;
  };

  filters: {};

  estimateGas: {
    calculateAverageTick(
      constants: {
        bounds: { min: BigNumberish; max: BigNumberish };
        token0: string;
        token1: string;
        tickSpacing: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    feeTierTickSpacing(
      feeTier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPool(
      tokenA: string,
      tokenB: string,
      feeTier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      constants: {
        bounds: { min: BigNumberish; max: BigNumberish };
        token0: string;
        token1: string;
        tickSpacing: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateAverageTick(
      constants: {
        bounds: { min: BigNumberish; max: BigNumberish };
        token0: string;
        token1: string;
        tickSpacing: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTierTickSpacing(
      feeTier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPool(
      tokenA: string,
      tokenB: string,
      feeTier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      constants: {
        bounds: { min: BigNumberish; max: BigNumberish };
        token0: string;
        token1: string;
        tickSpacing: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
