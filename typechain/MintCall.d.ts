/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MintCallInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "MintLimit(address,int24,int24,bool,uint32,uint128,uint128,uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MintLimit"): EventFragment;
}

export type MintLimitEvent = TypedEvent<
  [string, number, number, boolean, number, BigNumber, BigNumber, BigNumber] & {
    to: string;
    lower: number;
    upper: number;
    zeroForOne: boolean;
    epochLast: number;
    amountIn: BigNumber;
    amountFilled: BigNumber;
    liquidityMinted: BigNumber;
  }
>;

export class MintCall extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MintCallInterface;

  functions: {};

  callStatic: {};

  filters: {
    "MintLimit(address,int24,int24,bool,uint32,uint128,uint128,uint128)"(
      to?: string | null,
      lower?: null,
      upper?: null,
      zeroForOne?: null,
      epochLast?: null,
      amountIn?: null,
      amountFilled?: null,
      liquidityMinted?: null
    ): TypedEventFilter<
      [
        string,
        number,
        number,
        boolean,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        to: string;
        lower: number;
        upper: number;
        zeroForOne: boolean;
        epochLast: number;
        amountIn: BigNumber;
        amountFilled: BigNumber;
        liquidityMinted: BigNumber;
      }
    >;

    MintLimit(
      to?: string | null,
      lower?: null,
      upper?: null,
      zeroForOne?: null,
      epochLast?: null,
      amountIn?: null,
      amountFilled?: null,
      liquidityMinted?: null
    ): TypedEventFilter<
      [
        string,
        number,
        number,
        boolean,
        number,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        to: string;
        lower: number;
        upper: number;
        zeroForOne: boolean;
        epochLast: number;
        amountIn: BigNumber;
        amountFilled: BigNumber;
        liquidityMinted: BigNumber;
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
