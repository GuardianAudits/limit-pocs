/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "LimitPoolEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitPoolEvents__factory>;
    getContractFactory(
      name: "LimitPoolFactoryEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitPoolFactoryEvents__factory>;
    getContractFactory(
      name: "LimitPoolManagerEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitPoolManagerEvents__factory>;
    getContractFactory(
      name: "LimitPoolModifiers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitPoolModifiers__factory>;
    getContractFactory(
      name: "LimitPoolFactoryStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitPoolFactoryStorage__factory>;
    getContractFactory(
      name: "LimitPoolStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitPoolStorage__factory>;
    getContractFactory(
      name: "IPoolsharkSwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolsharkSwapCallback__factory>;
    getContractFactory(
      name: "IERC20Minimal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Minimal__factory>;
    getContractFactory(
      name: "ILimitPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILimitPool__factory>;
    getContractFactory(
      name: "ILimitPoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILimitPoolFactory__factory>;
    getContractFactory(
      name: "ILimitPoolManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILimitPoolManager__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "ICurveMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurveMath__factory>;
    getContractFactory(
      name: "IDyDxMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDyDxMath__factory>;
    getContractFactory(
      name: "ITickMath",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITickMath__factory>;
    getContractFactory(
      name: "ITwapSource",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITwapSource__factory>;
    getContractFactory(
      name: "BurnCall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BurnCall__factory>;
    getContractFactory(
      name: "MintCall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintCall__factory>;
    getContractFactory(
      name: "QuoteCall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.QuoteCall__factory>;
    getContractFactory(
      name: "SwapCall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwapCall__factory>;
    getContractFactory(
      name: "Positions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Positions__factory>;
    getContractFactory(
      name: "TickMap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TickMap__factory>;
    getContractFactory(
      name: "Ticks",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ticks__factory>;
    getContractFactory(
      name: "LimitPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitPool__factory>;
    getContractFactory(
      name: "LimitPoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitPoolFactory__factory>;
    getContractFactory(
      name: "Token20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token20__factory>;
    getContractFactory(
      name: "CoverMiscErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoverMiscErrors__factory>;
    getContractFactory(
      name: "CoverPositionErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoverPositionErrors__factory>;
    getContractFactory(
      name: "CoverTicksErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoverTicksErrors__factory>;
    getContractFactory(
      name: "CoverTransferErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoverTransferErrors__factory>;
    getContractFactory(
      name: "LimitPoolErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitPoolErrors__factory>;
    getContractFactory(
      name: "LimitPoolFactoryErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitPoolFactoryErrors__factory>;
    getContractFactory(
      name: "LimitPoolManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitPoolManager__factory>;
    getContractFactory(
      name: "PoolRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolRouter__factory>;

    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "LimitPoolEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitPoolEvents>;
    getContractAt(
      name: "LimitPoolFactoryEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitPoolFactoryEvents>;
    getContractAt(
      name: "LimitPoolManagerEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitPoolManagerEvents>;
    getContractAt(
      name: "LimitPoolModifiers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitPoolModifiers>;
    getContractAt(
      name: "LimitPoolFactoryStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitPoolFactoryStorage>;
    getContractAt(
      name: "LimitPoolStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitPoolStorage>;
    getContractAt(
      name: "IPoolsharkSwapCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolsharkSwapCallback>;
    getContractAt(
      name: "IERC20Minimal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Minimal>;
    getContractAt(
      name: "ILimitPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILimitPool>;
    getContractAt(
      name: "ILimitPoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILimitPoolFactory>;
    getContractAt(
      name: "ILimitPoolManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILimitPoolManager>;
    getContractAt(
      name: "IPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "ICurveMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICurveMath>;
    getContractAt(
      name: "IDyDxMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDyDxMath>;
    getContractAt(
      name: "ITickMath",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITickMath>;
    getContractAt(
      name: "ITwapSource",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITwapSource>;
    getContractAt(
      name: "BurnCall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BurnCall>;
    getContractAt(
      name: "MintCall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintCall>;
    getContractAt(
      name: "QuoteCall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.QuoteCall>;
    getContractAt(
      name: "SwapCall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwapCall>;
    getContractAt(
      name: "Positions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Positions>;
    getContractAt(
      name: "TickMap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TickMap>;
    getContractAt(
      name: "Ticks",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ticks>;
    getContractAt(
      name: "LimitPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitPool>;
    getContractAt(
      name: "LimitPoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitPoolFactory>;
    getContractAt(
      name: "Token20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token20>;
    getContractAt(
      name: "CoverMiscErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CoverMiscErrors>;
    getContractAt(
      name: "CoverPositionErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CoverPositionErrors>;
    getContractAt(
      name: "CoverTicksErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CoverTicksErrors>;
    getContractAt(
      name: "CoverTransferErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CoverTransferErrors>;
    getContractAt(
      name: "LimitPoolErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitPoolErrors>;
    getContractAt(
      name: "LimitPoolFactoryErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitPoolFactoryErrors>;
    getContractAt(
      name: "LimitPoolManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitPoolManager>;
    getContractAt(
      name: "PoolRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolRouter>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
