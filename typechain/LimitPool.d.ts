/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LimitPoolInterface extends ethers.utils.Interface {
  functions: {
    "burn((address,uint128,int24,int24,int24,bool))": FunctionFragment;
    "feeTo()": FunctionFragment;
    "fees(uint16,uint16,bool)": FunctionFragment;
    "globalState()": FunctionFragment;
    "maxPrice()": FunctionFragment;
    "minPrice()": FunctionFragment;
    "mint((address,address,uint128,uint96,int24,int24,bool))": FunctionFragment;
    "owner()": FunctionFragment;
    "pool0()": FunctionFragment;
    "pool1()": FunctionFragment;
    "positions0(address,int24,int24)": FunctionFragment;
    "positions1(address,int24,int24)": FunctionFragment;
    "quote((uint160,uint128,bool,bool))": FunctionFragment;
    "snapshot((address,uint128,int24,int24,int24,bool))": FunctionFragment;
    "swap((address,uint160,uint128,bool,bool,bytes))": FunctionFragment;
    "tickMap()": FunctionFragment;
    "tickSpacing()": FunctionFragment;
    "ticks0(int24)": FunctionFragment;
    "ticks1(int24)": FunctionFragment;
    "token0()": FunctionFragment;
    "token1()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burn",
    values: [
      {
        to: string;
        burnPercent: BigNumberish;
        lower: BigNumberish;
        claim: BigNumberish;
        upper: BigNumberish;
        zeroForOne: boolean;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fees",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "globalState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "minPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      {
        to: string;
        refundTo: string;
        amount: BigNumberish;
        mintPercent: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        zeroForOne: boolean;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool0", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positions0",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "positions1",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [
      {
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "snapshot",
    values: [
      {
        owner: string;
        burnPercent: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      {
        to: string;
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
        callbackData: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "tickMap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tickSpacing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ticks0",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ticks1",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "globalState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "snapshot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tickMap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ticks0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ticks1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;

  events: {};
}

export class LimitPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LimitPoolInterface;

  functions: {
    burn(
      params: {
        to: string;
        burnPercent: BigNumberish;
        lower: BigNumberish;
        claim: BigNumberish;
        upper: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    fees(
      protocolFee0: BigNumberish,
      protocolFee1: BigNumberish,
      setFees: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    globalState(
      overrides?: CallOverrides
    ): Promise<[number] & { unlocked: number }>;

    maxPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    minPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      params: {
        to: string;
        refundTo: string;
        amount: BigNumberish;
        mintPercent: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pool0(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, number, number, number] & {
        price: BigNumber;
        liquidity: BigNumber;
        liquidityGlobal: BigNumber;
        protocolFees: BigNumber;
        swapEpoch: number;
        protocolFee: number;
        tickAtPrice: number;
      }
    >;

    pool1(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, number, number, number] & {
        price: BigNumber;
        liquidity: BigNumber;
        liquidityGlobal: BigNumber;
        protocolFees: BigNumber;
        swapEpoch: number;
        protocolFee: number;
        tickAtPrice: number;
      }
    >;

    positions0(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        epochLast: number;
      }
    >;

    positions1(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        epochLast: number;
      }
    >;

    quote(
      params: {
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        inAmount: BigNumber;
        outAmount: BigNumber;
        priceAfter: BigNumber;
      }
    >;

    snapshot(
      params: {
        owner: string;
        burnPercent: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          claimPriceLast: BigNumber;
          liquidity: BigNumber;
          amountIn: BigNumber;
          amountOut: BigNumber;
          epochLast: number;
        }
      ]
    >;

    swap(
      params: {
        to: string;
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
        callbackData: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tickMap(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { blocks: BigNumber }>;

    tickSpacing(overrides?: CallOverrides): Promise<[number]>;

    ticks0(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { priceAt: BigNumber; liquidityDelta: BigNumber }
    >;

    ticks1(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { priceAt: BigNumber; liquidityDelta: BigNumber }
    >;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;
  };

  burn(
    params: {
      to: string;
      burnPercent: BigNumberish;
      lower: BigNumberish;
      claim: BigNumberish;
      upper: BigNumberish;
      zeroForOne: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  fees(
    protocolFee0: BigNumberish,
    protocolFee1: BigNumberish,
    setFees: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  globalState(overrides?: CallOverrides): Promise<number>;

  maxPrice(overrides?: CallOverrides): Promise<BigNumber>;

  minPrice(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    params: {
      to: string;
      refundTo: string;
      amount: BigNumberish;
      mintPercent: BigNumberish;
      lower: BigNumberish;
      upper: BigNumberish;
      zeroForOne: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pool0(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, number, number, number] & {
      price: BigNumber;
      liquidity: BigNumber;
      liquidityGlobal: BigNumber;
      protocolFees: BigNumber;
      swapEpoch: number;
      protocolFee: number;
      tickAtPrice: number;
    }
  >;

  pool1(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, number, number, number] & {
      price: BigNumber;
      liquidity: BigNumber;
      liquidityGlobal: BigNumber;
      protocolFees: BigNumber;
      swapEpoch: number;
      protocolFee: number;
      tickAtPrice: number;
    }
  >;

  positions0(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
      claimPriceLast: BigNumber;
      liquidity: BigNumber;
      amountIn: BigNumber;
      amountOut: BigNumber;
      epochLast: number;
    }
  >;

  positions1(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
      claimPriceLast: BigNumber;
      liquidity: BigNumber;
      amountIn: BigNumber;
      amountOut: BigNumber;
      epochLast: number;
    }
  >;

  quote(
    params: {
      priceLimit: BigNumberish;
      amount: BigNumberish;
      exactIn: boolean;
      zeroForOne: boolean;
    },
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      inAmount: BigNumber;
      outAmount: BigNumber;
      priceAfter: BigNumber;
    }
  >;

  snapshot(
    params: {
      owner: string;
      burnPercent: BigNumberish;
      lower: BigNumberish;
      upper: BigNumberish;
      claim: BigNumberish;
      zeroForOne: boolean;
    },
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
      claimPriceLast: BigNumber;
      liquidity: BigNumber;
      amountIn: BigNumber;
      amountOut: BigNumber;
      epochLast: number;
    }
  >;

  swap(
    params: {
      to: string;
      priceLimit: BigNumberish;
      amount: BigNumberish;
      exactIn: boolean;
      zeroForOne: boolean;
      callbackData: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tickMap(overrides?: CallOverrides): Promise<BigNumber>;

  tickSpacing(overrides?: CallOverrides): Promise<number>;

  ticks0(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { priceAt: BigNumber; liquidityDelta: BigNumber }
  >;

  ticks1(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { priceAt: BigNumber; liquidityDelta: BigNumber }
  >;

  token0(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    burn(
      params: {
        to: string;
        burnPercent: BigNumberish;
        lower: BigNumberish;
        claim: BigNumberish;
        upper: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    fees(
      protocolFee0: BigNumberish,
      protocolFee1: BigNumberish,
      setFees: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { token0Fees: BigNumber; token1Fees: BigNumber }
    >;

    globalState(overrides?: CallOverrides): Promise<number>;

    maxPrice(overrides?: CallOverrides): Promise<BigNumber>;

    minPrice(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      params: {
        to: string;
        refundTo: string;
        amount: BigNumberish;
        mintPercent: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pool0(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, number, number, number] & {
        price: BigNumber;
        liquidity: BigNumber;
        liquidityGlobal: BigNumber;
        protocolFees: BigNumber;
        swapEpoch: number;
        protocolFee: number;
        tickAtPrice: number;
      }
    >;

    pool1(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, number, number, number] & {
        price: BigNumber;
        liquidity: BigNumber;
        liquidityGlobal: BigNumber;
        protocolFees: BigNumber;
        swapEpoch: number;
        protocolFee: number;
        tickAtPrice: number;
      }
    >;

    positions0(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        epochLast: number;
      }
    >;

    positions1(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        epochLast: number;
      }
    >;

    quote(
      params: {
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        inAmount: BigNumber;
        outAmount: BigNumber;
        priceAfter: BigNumber;
      }
    >;

    snapshot(
      params: {
        owner: string;
        burnPercent: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        epochLast: number;
      }
    >;

    swap(
      params: {
        to: string;
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
        callbackData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    tickMap(overrides?: CallOverrides): Promise<BigNumber>;

    tickSpacing(overrides?: CallOverrides): Promise<number>;

    ticks0(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { priceAt: BigNumber; liquidityDelta: BigNumber }
    >;

    ticks1(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { priceAt: BigNumber; liquidityDelta: BigNumber }
    >;

    token0(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    burn(
      params: {
        to: string;
        burnPercent: BigNumberish;
        lower: BigNumberish;
        claim: BigNumberish;
        upper: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    fees(
      protocolFee0: BigNumberish,
      protocolFee1: BigNumberish,
      setFees: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    globalState(overrides?: CallOverrides): Promise<BigNumber>;

    maxPrice(overrides?: CallOverrides): Promise<BigNumber>;

    minPrice(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      params: {
        to: string;
        refundTo: string;
        amount: BigNumberish;
        mintPercent: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pool0(overrides?: CallOverrides): Promise<BigNumber>;

    pool1(overrides?: CallOverrides): Promise<BigNumber>;

    positions0(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    positions1(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quote(
      params: {
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    snapshot(
      params: {
        owner: string;
        burnPercent: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      params: {
        to: string;
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
        callbackData: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tickMap(overrides?: CallOverrides): Promise<BigNumber>;

    tickSpacing(overrides?: CallOverrides): Promise<BigNumber>;

    ticks0(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ticks1(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    burn(
      params: {
        to: string;
        burnPercent: BigNumberish;
        lower: BigNumberish;
        claim: BigNumberish;
        upper: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fees(
      protocolFee0: BigNumberish,
      protocolFee1: BigNumberish,
      setFees: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    globalState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      params: {
        to: string;
        refundTo: string;
        amount: BigNumberish;
        mintPercent: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions0(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positions1(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quote(
      params: {
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    snapshot(
      params: {
        owner: string;
        burnPercent: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      params: {
        to: string;
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
        callbackData: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tickMap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tickSpacing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticks0(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticks1(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
