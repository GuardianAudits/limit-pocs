/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LimitPoolManagerInterface extends ethers.utils.Interface {
  functions: {
    "MAX_PROTOCOL_FEE()": FunctionFragment;
    "collectProtocolFees(address[])": FunctionFragment;
    "enableTickSpacing(int16)": FunctionFragment;
    "factory()": FunctionFragment;
    "feeTo()": FunctionFragment;
    "modifyProtocolFees(address[],uint16[],uint16[],bool[])": FunctionFragment;
    "owner()": FunctionFragment;
    "setFactory(address)": FunctionFragment;
    "tickSpacings(int16)": FunctionFragment;
    "transferFeeTo(address)": FunctionFragment;
    "transferOwner(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_PROTOCOL_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectProtocolFees",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "enableTickSpacing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "modifyProtocolFees",
    values: [string[], BigNumberish[], BigNumberish[], boolean[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setFactory", values: [string]): string;
  encodeFunctionData(
    functionFragment: "tickSpacings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFeeTo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwner",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_PROTOCOL_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFeeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwner",
    data: BytesLike
  ): Result;

  events: {
    "FactoryChanged(address,address)": EventFragment;
    "FeeToTransfer(address,address)": EventFragment;
    "OwnerTransfer(address,address)": EventFragment;
    "ProtocolFeesCollected(address[],uint128[],uint128[])": EventFragment;
    "ProtocolFeesModified(address[],uint16[],uint16[],bool[],uint128[],uint128[])": EventFragment;
    "TickSpacingEnabled(int16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FactoryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeToTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeesCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeesModified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TickSpacingEnabled"): EventFragment;
}

export type FactoryChangedEvent = TypedEvent<
  [string, string] & { previousFactory: string; newFactory: string }
>;

export type FeeToTransferEvent = TypedEvent<
  [string, string] & { previousFeeTo: string; newFeeTo: string }
>;

export type OwnerTransferEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ProtocolFeesCollectedEvent = TypedEvent<
  [string[], BigNumber[], BigNumber[]] & {
    collectPools: string[];
    token0Fees: BigNumber[];
    token1Fees: BigNumber[];
  }
>;

export type ProtocolFeesModifiedEvent = TypedEvent<
  [string[], number[], number[], boolean[], BigNumber[], BigNumber[]] & {
    modifyPools: string[];
    syncFees: number[];
    fillFees: number[];
    setFees: boolean[];
    token0Fees: BigNumber[];
    token1Fees: BigNumber[];
  }
>;

export type TickSpacingEnabledEvent = TypedEvent<
  [number] & { tickSpacing: number }
>;

export class LimitPoolManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LimitPoolManagerInterface;

  functions: {
    MAX_PROTOCOL_FEE(overrides?: CallOverrides): Promise<[number]>;

    collectProtocolFees(
      collectPools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableTickSpacing(
      tickSpacing: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    modifyProtocolFees(
      modifyPools: string[],
      syncFees: BigNumberish[],
      fillFees: BigNumberish[],
      setFees: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setFactory(
      factory_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tickSpacings(
      tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferFeeTo(
      newFeeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_PROTOCOL_FEE(overrides?: CallOverrides): Promise<number>;

  collectProtocolFees(
    collectPools: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableTickSpacing(
    tickSpacing: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  modifyProtocolFees(
    modifyPools: string[],
    syncFees: BigNumberish[],
    fillFees: BigNumberish[],
    setFees: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  setFactory(
    factory_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tickSpacings(
    tickSpacing: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferFeeTo(
    newFeeTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_PROTOCOL_FEE(overrides?: CallOverrides): Promise<number>;

    collectProtocolFees(
      collectPools: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    enableTickSpacing(
      tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    modifyProtocolFees(
      modifyPools: string[],
      syncFees: BigNumberish[],
      fillFees: BigNumberish[],
      setFees: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    setFactory(factory_: string, overrides?: CallOverrides): Promise<void>;

    tickSpacings(
      tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFeeTo(newFeeTo: string, overrides?: CallOverrides): Promise<void>;

    transferOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "FactoryChanged(address,address)"(
      previousFactory?: string | null,
      newFactory?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousFactory: string; newFactory: string }
    >;

    FactoryChanged(
      previousFactory?: string | null,
      newFactory?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousFactory: string; newFactory: string }
    >;

    "FeeToTransfer(address,address)"(
      previousFeeTo?: string | null,
      newFeeTo?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousFeeTo: string; newFeeTo: string }
    >;

    FeeToTransfer(
      previousFeeTo?: string | null,
      newFeeTo?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousFeeTo: string; newFeeTo: string }
    >;

    "OwnerTransfer(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnerTransfer(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "ProtocolFeesCollected(address[],uint128[],uint128[])"(
      collectPools?: null,
      token0Fees?: null,
      token1Fees?: null
    ): TypedEventFilter<
      [string[], BigNumber[], BigNumber[]],
      {
        collectPools: string[];
        token0Fees: BigNumber[];
        token1Fees: BigNumber[];
      }
    >;

    ProtocolFeesCollected(
      collectPools?: null,
      token0Fees?: null,
      token1Fees?: null
    ): TypedEventFilter<
      [string[], BigNumber[], BigNumber[]],
      {
        collectPools: string[];
        token0Fees: BigNumber[];
        token1Fees: BigNumber[];
      }
    >;

    "ProtocolFeesModified(address[],uint16[],uint16[],bool[],uint128[],uint128[])"(
      modifyPools?: null,
      syncFees?: null,
      fillFees?: null,
      setFees?: null,
      token0Fees?: null,
      token1Fees?: null
    ): TypedEventFilter<
      [string[], number[], number[], boolean[], BigNumber[], BigNumber[]],
      {
        modifyPools: string[];
        syncFees: number[];
        fillFees: number[];
        setFees: boolean[];
        token0Fees: BigNumber[];
        token1Fees: BigNumber[];
      }
    >;

    ProtocolFeesModified(
      modifyPools?: null,
      syncFees?: null,
      fillFees?: null,
      setFees?: null,
      token0Fees?: null,
      token1Fees?: null
    ): TypedEventFilter<
      [string[], number[], number[], boolean[], BigNumber[], BigNumber[]],
      {
        modifyPools: string[];
        syncFees: number[];
        fillFees: number[];
        setFees: boolean[];
        token0Fees: BigNumber[];
        token1Fees: BigNumber[];
      }
    >;

    "TickSpacingEnabled(int16)"(
      tickSpacing?: null
    ): TypedEventFilter<[number], { tickSpacing: number }>;

    TickSpacingEnabled(
      tickSpacing?: null
    ): TypedEventFilter<[number], { tickSpacing: number }>;
  };

  estimateGas: {
    MAX_PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    collectProtocolFees(
      collectPools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableTickSpacing(
      tickSpacing: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    modifyProtocolFees(
      modifyPools: string[],
      syncFees: BigNumberish[],
      fillFees: BigNumberish[],
      setFees: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setFactory(
      factory_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tickSpacings(
      tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFeeTo(
      newFeeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_PROTOCOL_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectProtocolFees(
      collectPools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableTickSpacing(
      tickSpacing: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    modifyProtocolFees(
      modifyPools: string[],
      syncFees: BigNumberish[],
      fillFees: BigNumberish[],
      setFees: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFactory(
      factory_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tickSpacings(
      tickSpacing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFeeTo(
      newFeeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
