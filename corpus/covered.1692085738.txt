/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | // OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)
   3 |     | 
   4 |     | pragma solidity ^0.8.0;
   5 |     | 
   6 |     | import "./IERC20.sol";
   7 |     | import "./extensions/IERC20Metadata.sol";
   8 |     | import "../../utils/Context.sol";
   9 |     | 
  10 |     | /**
  11 |     |  * @dev Implementation of the {IERC20} interface.
  12 |     |  *
  13 |     |  * This implementation is agnostic to the way tokens are created. This means
  14 |     |  * that a supply mechanism has to be added in a derived contract using {_mint}.
  15 |     |  * For a generic mechanism see {ERC20PresetMinterPauser}.
  16 |     |  *
  17 |     |  * TIP: For a detailed writeup see our guide
  18 |     |  * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
  19 |     |  * to implement supply mechanisms].
  20 |     |  *
  21 |     |  * The default value of {decimals} is 18. To change this, you should override
  22 |     |  * this function so it returns a different value.
  23 |     |  *
  24 |     |  * We have followed general OpenZeppelin Contracts guidelines: functions revert
  25 |     |  * instead returning `false` on failure. This behavior is nonetheless
  26 |     |  * conventional and does not conflict with the expectations of ERC20
  27 |     |  * applications.
  28 |     |  *
  29 |     |  * Additionally, an {Approval} event is emitted on calls to {transferFrom}.
  30 |     |  * This allows applications to reconstruct the allowance for all accounts just
  31 |     |  * by listening to said events. Other implementations of the EIP may not emit
  32 |     |  * these events, as it isn't required by the specification.
  33 |     |  *
  34 |     |  * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
  35 |     |  * functions have been added to mitigate the well-known issues around setting
  36 |     |  * allowances. See {IERC20-approve}.
  37 |     |  */
  38 |     | contract ERC20 is Context, IERC20, IERC20Metadata {
  39 |     |     mapping(address => uint256) private _balances;
  40 |     | 
  41 |     |     mapping(address => mapping(address => uint256)) private _allowances;
  42 |     | 
  43 |     |     uint256 private _totalSupply;
  44 |     | 
  45 |     |     string private _name;
  46 |     |     string private _symbol;
  47 |     | 
  48 |     |     /**
  49 |     |      * @dev Sets the values for {name} and {symbol}.
  50 |     |      *
  51 |     |      * All two of these values are immutable: they can only be set once during
  52 |     |      * construction.
  53 |     |      */
  54 |     |     constructor(string memory name_, string memory symbol_) {
  55 |     |         _name = name_;
  56 |     |         _symbol = symbol_;
  57 |     |     }
  58 |     | 
  59 |     |     /**
  60 |     |      * @dev Returns the name of the token.
  61 |     |      */
  62 | *   |     function name() public view virtual override returns (string memory) {
  63 |     |         return _name;
  64 |     |     }
  65 |     | 
  66 |     |     /**
  67 |     |      * @dev Returns the symbol of the token, usually a shorter version of the
  68 |     |      * name.
  69 |     |      */
  70 |     |     function symbol() public view virtual override returns (string memory) {
  71 |     |         return _symbol;
  72 |     |     }
  73 |     | 
  74 |     |     /**
  75 |     |      * @dev Returns the number of decimals used to get its user representation.
  76 |     |      * For example, if `decimals` equals `2`, a balance of `505` tokens should
  77 |     |      * be displayed to a user as `5.05` (`505 / 10 ** 2`).
  78 |     |      *
  79 |     |      * Tokens usually opt for a value of 18, imitating the relationship between
  80 |     |      * Ether and Wei. This is the default value returned by this function, unless
  81 |     |      * it's overridden.
  82 |     |      *
  83 |     |      * NOTE: This information is only used for _display_ purposes: it in
  84 |     |      * no way affects any of the arithmetic of the contract, including
  85 |     |      * {IERC20-balanceOf} and {IERC20-transfer}.
  86 |     |      */
  87 |     |     function decimals() public view virtual override returns (uint8) {
  88 |     |         return 18;
  89 |     |     }
  90 |     | 
  91 |     |     /**
  92 |     |      * @dev See {IERC20-totalSupply}.
  93 |     |      */
  94 | *   |     function totalSupply() public view virtual override returns (uint256) {
  95 |     |         return _totalSupply;
  96 |     |     }
  97 |     | 
  98 |     |     /**
  99 |     |      * @dev See {IERC20-balanceOf}.
 100 |     |      */
 101 | *   |     function balanceOf(address account) public view virtual override returns (uint256) {
 102 | *   |         return _balances[account];
 103 |     |     }
 104 |     | 
 105 |     |     /**
 106 |     |      * @dev See {IERC20-transfer}.
 107 |     |      *
 108 |     |      * Requirements:
 109 |     |      *
 110 |     |      * - `to` cannot be the zero address.
 111 |     |      * - the caller must have a balance of at least `amount`.
 112 |     |      */
 113 | *   |     function transfer(address to, uint256 amount) public virtual override returns (bool) {
 114 |     |         address owner = _msgSender();
 115 | *   |         _transfer(owner, to, amount);
 116 |     |         return true;
 117 |     |     }
 118 |     | 
 119 |     |     /**
 120 |     |      * @dev See {IERC20-allowance}.
 121 |     |      */
 122 | *   |     function allowance(address owner, address spender) public view virtual override returns (uint256) {
 123 | *   |         return _allowances[owner][spender];
 124 |     |     }
 125 |     | 
 126 |     |     /**
 127 |     |      * @dev See {IERC20-approve}.
 128 |     |      *
 129 |     |      * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
 130 |     |      * `transferFrom`. This is semantically equivalent to an infinite approval.
 131 |     |      *
 132 |     |      * Requirements:
 133 |     |      *
 134 |     |      * - `spender` cannot be the zero address.
 135 |     |      */
 136 | *   |     function approve(address spender, uint256 amount) public virtual override returns (bool) {
 137 |     |         address owner = _msgSender();
 138 | *   |         _approve(owner, spender, amount);
 139 | *   |         return true;
 140 |     |     }
 141 |     | 
 142 |     |     /**
 143 |     |      * @dev See {IERC20-transferFrom}.
 144 |     |      *
 145 |     |      * Emits an {Approval} event indicating the updated allowance. This is not
 146 |     |      * required by the EIP. See the note at the beginning of {ERC20}.
 147 |     |      *
 148 |     |      * NOTE: Does not update the allowance if the current allowance
 149 |     |      * is the maximum `uint256`.
 150 |     |      *
 151 |     |      * Requirements:
 152 |     |      *
 153 |     |      * - `from` and `to` cannot be the zero address.
 154 |     |      * - `from` must have a balance of at least `amount`.
 155 |     |      * - the caller must have allowance for ``from``'s tokens of at least
 156 |     |      * `amount`.
 157 |     |      */
 158 | *   |     function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {
 159 |     |         address spender = _msgSender();
 160 | *   |         _spendAllowance(from, spender, amount);
 161 | *   |         _transfer(from, to, amount);
 162 | *   |         return true;
 163 |     |     }
 164 |     | 
 165 |     |     /**
 166 |     |      * @dev Atomically increases the allowance granted to `spender` by the caller.
 167 |     |      *
 168 |     |      * This is an alternative to {approve} that can be used as a mitigation for
 169 |     |      * problems described in {IERC20-approve}.
 170 |     |      *
 171 |     |      * Emits an {Approval} event indicating the updated allowance.
 172 |     |      *
 173 |     |      * Requirements:
 174 |     |      *
 175 |     |      * - `spender` cannot be the zero address.
 176 |     |      */
 177 |     |     function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
 178 |     |         address owner = _msgSender();
 179 |     |         _approve(owner, spender, allowance(owner, spender) + addedValue);
 180 |     |         return true;
 181 |     |     }
 182 |     | 
 183 |     |     /**
 184 |     |      * @dev Atomically decreases the allowance granted to `spender` by the caller.
 185 |     |      *
 186 |     |      * This is an alternative to {approve} that can be used as a mitigation for
 187 |     |      * problems described in {IERC20-approve}.
 188 |     |      *
 189 |     |      * Emits an {Approval} event indicating the updated allowance.
 190 |     |      *
 191 |     |      * Requirements:
 192 |     |      *
 193 |     |      * - `spender` cannot be the zero address.
 194 |     |      * - `spender` must have allowance for the caller of at least
 195 |     |      * `subtractedValue`.
 196 |     |      */
 197 |     |     function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
 198 |     |         address owner = _msgSender();
 199 |     |         uint256 currentAllowance = allowance(owner, spender);
 200 | *   |         require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
 201 |     |         unchecked {
 202 |     |             _approve(owner, spender, currentAllowance - subtractedValue);
 203 |     |         }
 204 |     | 
 205 |     |         return true;
 206 |     |     }
 207 |     | 
 208 |     |     /**
 209 |     |      * @dev Moves `amount` of tokens from `from` to `to`.
 210 |     |      *
 211 |     |      * This internal function is equivalent to {transfer}, and can be used to
 212 |     |      * e.g. implement automatic token fees, slashing mechanisms, etc.
 213 |     |      *
 214 |     |      * Emits a {Transfer} event.
 215 |     |      *
 216 |     |      * Requirements:
 217 |     |      *
 218 |     |      * - `from` cannot be the zero address.
 219 |     |      * - `to` cannot be the zero address.
 220 |     |      * - `from` must have a balance of at least `amount`.
 221 |     |      */
 222 | *   |     function _transfer(address from, address to, uint256 amount) internal virtual {
 223 | *   |         require(from != address(0), "ERC20: transfer from the zero address");
 224 | *   |         require(to != address(0), "ERC20: transfer to the zero address");
 225 |     | 
 226 |     |         _beforeTokenTransfer(from, to, amount);
 227 |     | 
 228 | *   |         uint256 fromBalance = _balances[from];
 229 | *   |         require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
 230 |     |         unchecked {
 231 | *   |             _balances[from] = fromBalance - amount;
 232 |     |             // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by
 233 |     |             // decrementing then incrementing.
 234 | *   |             _balances[to] += amount;
 235 |     |         }
 236 |     | 
 237 | *   |         emit Transfer(from, to, amount);
 238 |     | 
 239 | *   |         _afterTokenTransfer(from, to, amount);
 240 |     |     }
 241 |     | 
 242 |     |     /** @dev Creates `amount` tokens and assigns them to `account`, increasing
 243 |     |      * the total supply.
 244 |     |      *
 245 |     |      * Emits a {Transfer} event with `from` set to the zero address.
 246 |     |      *
 247 |     |      * Requirements:
 248 |     |      *
 249 |     |      * - `account` cannot be the zero address.
 250 |     |      */
 251 | *   |     function _mint(address account, uint256 amount) internal virtual {
 252 | *   |         require(account != address(0), "ERC20: mint to the zero address");
 253 |     | 
 254 |     |         _beforeTokenTransfer(address(0), account, amount);
 255 |     | 
 256 | *   |         _totalSupply += amount;
 257 |     |         unchecked {
 258 |     |             // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.
 259 | *   |             _balances[account] += amount;
 260 |     |         }
 261 | *   |         emit Transfer(address(0), account, amount);
 262 |     | 
 263 |     |         _afterTokenTransfer(address(0), account, amount);
 264 |     |     }
 265 |     | 
 266 |     |     /**
 267 |     |      * @dev Destroys `amount` tokens from `account`, reducing the
 268 |     |      * total supply.
 269 |     |      *
 270 |     |      * Emits a {Transfer} event with `to` set to the zero address.
 271 |     |      *
 272 |     |      * Requirements:
 273 |     |      *
 274 |     |      * - `account` cannot be the zero address.
 275 |     |      * - `account` must have at least `amount` tokens.
 276 |     |      */
 277 | *   |     function _burn(address account, uint256 amount) internal virtual {
 278 |     |         require(account != address(0), "ERC20: burn from the zero address");
 279 |     | 
 280 |     |         _beforeTokenTransfer(account, address(0), amount);
 281 |     | 
 282 |     |         uint256 accountBalance = _balances[account];
 283 |     |         require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
 284 |     |         unchecked {
 285 |     |             _balances[account] = accountBalance - amount;
 286 |     |             // Overflow not possible: amount <= accountBalance <= totalSupply.
 287 |     |             _totalSupply -= amount;
 288 |     |         }
 289 |     | 
 290 |     |         emit Transfer(account, address(0), amount);
 291 |     | 
 292 |     |         _afterTokenTransfer(account, address(0), amount);
 293 |     |     }
 294 |     | 
 295 |     |     /**
 296 |     |      * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
 297 |     |      *
 298 |     |      * This internal function is equivalent to `approve`, and can be used to
 299 |     |      * e.g. set automatic allowances for certain subsystems, etc.
 300 |     |      *
 301 |     |      * Emits an {Approval} event.
 302 |     |      *
 303 |     |      * Requirements:
 304 |     |      *
 305 |     |      * - `owner` cannot be the zero address.
 306 |     |      * - `spender` cannot be the zero address.
 307 |     |      */
 308 | *   |     function _approve(address owner, address spender, uint256 amount) internal virtual {
 309 | *   |         require(owner != address(0), "ERC20: approve from the zero address");
 310 | *   |         require(spender != address(0), "ERC20: approve to the zero address");
 311 |     | 
 312 | *   |         _allowances[owner][spender] = amount;
 313 | *   |         emit Approval(owner, spender, amount);
 314 |     |     }
 315 |     | 
 316 |     |     /**
 317 |     |      * @dev Updates `owner` s allowance for `spender` based on spent `amount`.
 318 |     |      *
 319 |     |      * Does not update the allowance amount in case of infinite allowance.
 320 |     |      * Revert if not enough allowance is available.
 321 |     |      *
 322 |     |      * Might emit an {Approval} event.
 323 |     |      */
 324 | *   |     function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {
 325 | *   |         uint256 currentAllowance = allowance(owner, spender);
 326 | *   |         if (currentAllowance != type(uint256).max) {
 327 | *   |             require(currentAllowance >= amount, "ERC20: insufficient allowance");
 328 |     |             unchecked {
 329 | *   |                 _approve(owner, spender, currentAllowance - amount);
 330 |     |             }
 331 |     |         }
 332 |     |     }
 333 |     | 
 334 |     |     /**
 335 |     |      * @dev Hook that is called before any transfer of tokens. This includes
 336 |     |      * minting and burning.
 337 |     |      *
 338 |     |      * Calling conditions:
 339 |     |      *
 340 |     |      * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
 341 |     |      * will be transferred to `to`.
 342 |     |      * - when `from` is zero, `amount` tokens will be minted for `to`.
 343 |     |      * - when `to` is zero, `amount` of ``from``'s tokens will be burned.
 344 |     |      * - `from` and `to` are never both zero.
 345 |     |      *
 346 |     |      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
 347 |     |      */
 348 |     |     function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}
 349 |     | 
 350 |     |     /**
 351 |     |      * @dev Hook that is called after any transfer of tokens. This includes
 352 |     |      * minting and burning.
 353 |     |      *
 354 |     |      * Calling conditions:
 355 |     |      *
 356 |     |      * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
 357 |     |      * has been transferred to `to`.
 358 |     |      * - when `from` is zero, `amount` tokens have been minted for `to`.
 359 |     |      * - when `to` is zero, `amount` of ``from``'s tokens have been burned.
 360 |     |      * - `from` and `to` are never both zero.
 361 |     |      *
 362 |     |      * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
 363 |     |      */
 364 |     |     function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}
 365 |     | }
 366 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Interface of the ERC20 standard as defined in the EIP.
  8 |     |  */
  9 |     | interface IERC20 {
 10 |     |     /**
 11 |     |      * @dev Emitted when `value` tokens are moved from one account (`from`) to
 12 |     |      * another (`to`).
 13 |     |      *
 14 |     |      * Note that `value` may be zero.
 15 |     |      */
 16 |     |     event Transfer(address indexed from, address indexed to, uint256 value);
 17 |     | 
 18 |     |     /**
 19 |     |      * @dev Emitted when the allowance of a `spender` for an `owner` is set by
 20 |     |      * a call to {approve}. `value` is the new allowance.
 21 |     |      */
 22 |     |     event Approval(address indexed owner, address indexed spender, uint256 value);
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Returns the amount of tokens in existence.
 26 |     |      */
 27 |     |     function totalSupply() external view returns (uint256);
 28 |     | 
 29 |     |     /**
 30 |     |      * @dev Returns the amount of tokens owned by `account`.
 31 |     |      */
 32 |     |     function balanceOf(address account) external view returns (uint256);
 33 |     | 
 34 |     |     /**
 35 |     |      * @dev Moves `amount` tokens from the caller's account to `to`.
 36 |     |      *
 37 |     |      * Returns a boolean value indicating whether the operation succeeded.
 38 |     |      *
 39 |     |      * Emits a {Transfer} event.
 40 |     |      */
 41 |     |     function transfer(address to, uint256 amount) external returns (bool);
 42 |     | 
 43 |     |     /**
 44 |     |      * @dev Returns the remaining number of tokens that `spender` will be
 45 |     |      * allowed to spend on behalf of `owner` through {transferFrom}. This is
 46 |     |      * zero by default.
 47 |     |      *
 48 |     |      * This value changes when {approve} or {transferFrom} are called.
 49 |     |      */
 50 |     |     function allowance(address owner, address spender) external view returns (uint256);
 51 |     | 
 52 |     |     /**
 53 |     |      * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
 54 |     |      *
 55 |     |      * Returns a boolean value indicating whether the operation succeeded.
 56 |     |      *
 57 |     |      * IMPORTANT: Beware that changing an allowance with this method brings the risk
 58 |     |      * that someone may use both the old and the new allowance by unfortunate
 59 |     |      * transaction ordering. One possible solution to mitigate this race
 60 |     |      * condition is to first reduce the spender's allowance to 0 and set the
 61 |     |      * desired value afterwards:
 62 |     |      * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
 63 |     |      *
 64 |     |      * Emits an {Approval} event.
 65 |     |      */
 66 |     |     function approve(address spender, uint256 amount) external returns (bool);
 67 |     | 
 68 |     |     /**
 69 |     |      * @dev Moves `amount` tokens from `from` to `to` using the
 70 |     |      * allowance mechanism. `amount` is then deducted from the caller's
 71 |     |      * allowance.
 72 |     |      *
 73 |     |      * Returns a boolean value indicating whether the operation succeeded.
 74 |     |      *
 75 |     |      * Emits a {Transfer} event.
 76 |     |      */
 77 |     |     function transferFrom(address from, address to, uint256 amount) external returns (bool);
 78 |     | }
 79 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | import "../ERC20.sol";
  7 |     | import "../../../utils/Context.sol";
  8 |     | 
  9 |     | /**
 10 |     |  * @dev Extension of {ERC20} that allows token holders to destroy both their own
 11 |     |  * tokens and those that they have an allowance for, in a way that can be
 12 |     |  * recognized off-chain (via event analysis).
 13 |     |  */
 14 |     | abstract contract ERC20Burnable is Context, ERC20 {
 15 |     |     /**
 16 |     |      * @dev Destroys `amount` tokens from the caller.
 17 |     |      *
 18 |     |      * See {ERC20-_burn}.
 19 |     |      */
 20 |     |     function burn(uint256 amount) public virtual {
 21 |     |         _burn(_msgSender(), amount);
 22 |     |     }
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Destroys `amount` tokens from `account`, deducting from the caller's
 26 |     |      * allowance.
 27 |     |      *
 28 |     |      * See {ERC20-_burn} and {ERC20-allowance}.
 29 |     |      *
 30 |     |      * Requirements:
 31 |     |      *
 32 |     |      * - the caller must have allowance for ``accounts``'s tokens of at least
 33 |     |      * `amount`.
 34 |     |      */
 35 |     |     function burnFrom(address account, uint256 amount) public virtual {
 36 |     |         _spendAllowance(account, _msgSender(), amount);
 37 |     |         _burn(account, amount);
 38 |     |     }
 39 |     | }
 40 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | import "../IERC20.sol";
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Interface for the optional metadata functions from the ERC20 standard.
 10 |     |  *
 11 |     |  * _Available since v4.1._
 12 |     |  */
 13 |     | interface IERC20Metadata is IERC20 {
 14 |     |     /**
 15 |     |      * @dev Returns the name of the token.
 16 |     |      */
 17 |     |     function name() external view returns (string memory);
 18 |     | 
 19 |     |     /**
 20 |     |      * @dev Returns the symbol of the token.
 21 |     |      */
 22 |     |     function symbol() external view returns (string memory);
 23 |     | 
 24 |     |     /**
 25 |     |      * @dev Returns the decimals places of the token.
 26 |     |      */
 27 |     |     function decimals() external view returns (uint8);
 28 |     | }
 29 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/node_modules/@openzeppelin/contracts/utils/Context.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts v4.4.1 (utils/Context.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Provides information about the current execution context, including the
  8 |     |  * sender of the transaction and its data. While these are generally available
  9 |     |  * via msg.sender and msg.data, they should not be accessed in such a direct
 10 |     |  * manner, since when dealing with meta-transactions the account sending and
 11 |     |  * paying for execution may not be the actual sender (as far as an application
 12 |     |  * is concerned).
 13 |     |  *
 14 |     |  * This contract is only required for intermediate, library-like contracts.
 15 |     |  */
 16 |     | abstract contract Context {
 17 |     |     function _msgSender() internal view virtual returns (address) {
 18 | *   |         return msg.sender;
 19 |     |     }
 20 |     | 
 21 |     |     function _msgData() internal view virtual returns (bytes calldata) {
 22 |     |         return msg.data;
 23 |     |     }
 24 |     | }
 25 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)
  3 |     | 
  4 |     | pragma solidity ^0.8.0;
  5 |     | 
  6 |     | /**
  7 |     |  * @dev Interface of the ERC165 standard, as defined in the
  8 |     |  * https://eips.ethereum.org/EIPS/eip-165[EIP].
  9 |     |  *
 10 |     |  * Implementers can declare support of contract interfaces, which can then be
 11 |     |  * queried by others ({ERC165Checker}).
 12 |     |  *
 13 |     |  * For an implementation, see {ERC165}.
 14 |     |  */
 15 |     | interface IERC165 {
 16 |     |     /**
 17 |     |      * @dev Returns true if this contract implements the interface defined by
 18 |     |      * `interfaceId`. See the corresponding
 19 |     |      * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
 20 |     |      * to learn more about how these ids are created.
 21 |     |      *
 22 |     |      * This function call must use less than 30 000 gas.
 23 |     |      */
 24 |     |     function supportsInterface(bytes4 interfaceId) external view returns (bool);
 25 |     | }
 26 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/EchidnaPool.sol
   1 |     | // SPDX-License-Identifier: BUSL-1.1
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | // import './interfaces/ILimitPool.sol';
   5 |     | // import './interfaces/ILimitPoolManager.sol';
   6 |     | // import './interfaces/limit/ILimitPoolStructs.sol';
   7 |     | // import './base/storage/LimitPoolStorage.sol';
   8 |     | import './LimitPool.sol';
   9 |     | import './LimitPoolFactory.sol';
  10 |     | import './utils/LimitPoolManager.sol';
  11 |     | import './test/Token20.sol';
  12 |     | import '@openzeppelin/contracts/token/ERC20/ERC20.sol';
  13 |     | import './libraries/utils/SafeTransfers.sol';
  14 |     | import './utils/RangePoolERC1155.sol';
  15 |     | import './base/structs/PoolsharkStructs.sol';
  16 |     | 
  17 |     | 
  18 |     | // Fuzz LimitPool functionality
  19 | *r  | contract EchidnaPool {
  20 |     | 
  21 |     |     event Address(address a);
  22 |     |     event Price(uint160 price);
  23 |     |     event Prices(uint160 price0, uint160 price1);
  24 |     |     event LiquidityGlobal(uint128 liqBefore, uint128 liqAfter);
  25 |     |     event Liquidity(uint128 liq0Before, uint128 liq1Before, uint128 liq0After, uint128 liq1After);
  26 |     |     event LiquidityDelta(int128 liqLowerBefore, int128 liqUpperBefore, int128 liqLowerAfter, int128 liqUperAfter);
  27 |     |     event Amount(uint256 amt);
  28 |     |     event PassedMint();
  29 |     |     event PassedBurn();
  30 |     |     event PositionTicks(int24 lower, int24 upper);
  31 |     |     event BurnTicks(int24 lower, int24 upper, bool positionExists);
  32 |     |     event LiquidityMinted(uint256 amount, uint256 tokenAmount, bool zeroForOne);
  33 |     |     event PositionCreated(bool isCreated);
  34 |     |     event liquidityDeltaAfterUndercut(bool zeroForOne, int128 liquidityDeltaBefore, int128 liquidityDeltaAfter);
  35 |     |     event AssertFailTest(string message, uint160 priceAfter, uint160 priceBefore);
  36 |     |     event LiquidityAbsolute(uint128 beforeAbs, uint128 afterAbs);
  37 |     | 
  38 |     |     event DebugTest(uint a);
  39 |     |     event DebugEvent(int24 lower, int24 upper, bool zeroForOne);
  40 |     | 
  41 |     |     LimitPoolFactory private factory;
  42 |     |     address private implementation;
  43 |     |     LimitPoolManager private manager;
  44 |     |     RangePoolERC1155 private rangePool;
  45 |     |     LimitPool private pool;
  46 |     |     Token20 private tokenIn;
  47 |     |     Token20 private tokenOut;
  48 |     |     Position[] private positions;
  49 |     |     int16 tickSpacing;
  50 |     |     uint16 swapFee;
  51 |     | 
  52 |     |     struct LiquidityDeltaValues {
  53 |     |         int128 liquidityDeltaLowerBefore;
  54 |     |         int128 liquidityDeltaUpperBefore;
  55 |     |         int128 liquidityDeltaLowerAfter;
  56 |     |         int128 liquidityDeltaUpperAfter;
  57 |     |     }
  58 |     | 
  59 |     |     struct PoolValues {
  60 |     |         uint160 price0Before;
  61 |     |         uint128 liquidity0Before;
  62 |     |         uint160 price1Before;
  63 |     |         // uint128 liquidityGlobal1Before;
  64 |     |         uint128 liquidity1Before;
  65 |     |         uint160 price0After;
  66 |     |         uint128 liquidity0After;
  67 |     |         uint160 price1After;
  68 |     |         uint128 liquidity1After;
  69 |     |         // uint128 liquidityGlobal1After;
  70 |     | 
  71 |     |         uint128 liquidityGlobalBefore;
  72 |     |         uint128 liquidityGlobalAfter;
  73 |     | 
  74 |     |         uint128 liquidityAbsoluteUpperBefore;
  75 |     |         uint128 liquidityAbsoluteLowerBefore;
  76 |     |         uint128 liquidityAbsoluteUpperAfter;
  77 |     |         uint128 liquidityAbsoluteLowerAfter;
  78 |     | 
  79 |     |         // int128 liquidityDeltaAtPrice0Before;
  80 |     |         // int128 liquidityDeltaAtPrice1Before;
  81 |     | 
  82 |     |         // int128 liquidityDeltaAtPrice0After;
  83 |     |         // int128 liquidityDeltaAtPrice1After;
  84 |     | 
  85 |     |         uint160 price0;
  86 |     |         uint160 price1;
  87 |     |     }
  88 |     | 
  89 |     |     struct SwapCallbackData {
  90 |     |         address sender;
  91 |     |     }
  92 |     | 
  93 |     |     struct Position {
  94 |     |         address owner;
  95 |     |         int24 lower;
  96 |     |         int24 upper;
  97 |     |         bool zeroForOne;
  98 |     |     }
  99 |     | 
 100 |     |     struct PoolStructs {
 101 |     |         PoolsharkStructs.LimitTick lower;
 102 |     |         PoolsharkStructs.LimitTick upper;
 103 |     |         PoolsharkStructs.LimitPoolState pool0;
 104 |     |         PoolsharkStructs.LimitPoolState pool1;
 105 |     |     }
 106 |     | 
 107 |     |     modifier tickPreconditions(int24 lower, int24 upper) {
 108 | *r  |         require(lower < upper);
 109 | *r  |         require(upper < 887272);
 110 | *r  |         require(lower > -887272);
 111 | *r  |         require(lower % tickSpacing == 0);
 112 | *   |         require(upper % tickSpacing == 0);
 113 |     |         _;
 114 |     |     }
 115 |     |     constructor() {
 116 |     |         manager = new LimitPoolManager();
 117 |     |         factory = new LimitPoolFactory(address(manager));
 118 |     |         implementation = address(new LimitPool(address(factory)));
 119 |     |         rangePool = new RangePoolERC1155(address(factory));
 120 |     |         
 121 |     |         manager.enableImplementation(bytes32(0x0), address(implementation), address(rangePool));
 122 |     |         tickSpacing = 10;
 123 |     |         // manager.enableTickSpacing(tickSpacing,500);
 124 |     |         tokenIn = new Token20("IN", "IN", 18);
 125 |     |         tokenOut = new Token20("OUT", "OUT", 18);
 126 |     |         (address poolAddr,) = factory.createLimitPool(bytes32(0x0), address(tokenIn), address(tokenOut), 500, 79228162514264337593543950336);
 127 |     |         pool = LimitPool(poolAddr);
 128 |     |     }
 129 |     | 
 130 |     | 
 131 | *   |     function mint(uint128 amount, bool zeroForOne, int24 lower, int24 upper) public tickPreconditions(lower, upper) {
 132 |     |         // PRE CONDITIONS
 133 |     |         // NOTE: Do not use the exact inputs of this function for POCs, use the inputs after the input validation
 134 | *   |         mintAndApprove();
 135 | *   |         amount = amount + 1;
 136 | *   |         PoolValues memory poolValues;
 137 | *   |         PoolStructs memory poolStructs;
 138 |     | 
 139 | *   |         (,poolStructs.pool0, poolStructs.pool1, poolValues.liquidityGlobalBefore,,) = pool.globalState();
 140 | *   |         poolValues.price0Before = poolStructs.pool0.price;
 141 | *   |         poolValues.liquidity0Before = poolStructs.pool0.liquidity;
 142 | *   |         poolValues.price1Before = poolStructs.pool1.price;
 143 | *   |         poolValues.liquidity1Before = poolStructs.pool1.liquidity;
 144 |     | 
 145 |     |         // LiquidityDeltaValues memory values;
 146 | *   |         (, poolStructs.lower) = pool.ticks(lower);
 147 | *   |         (, poolStructs.upper) = pool.ticks(upper);
 148 |     | 
 149 |     |         // values.liquidityDeltaLowerBefore = lowerTick.liquidityDelta;
 150 |     |         // values.liquidityDeltaUpperBefore = upperTick.liquidityDelta;
 151 | *   |         poolValues.liquidityAbsoluteLowerBefore = poolStructs.lower.liquidityAbsolute;
 152 | *   |         poolValues.liquidityAbsoluteUpperBefore = poolStructs.upper.liquidityAbsolute;
 153 |     | 
 154 |     | 
 155 | *   |         ILimitPoolStructs.MintLimitParams memory params;
 156 | *   |         params.to = msg.sender;
 157 | *   |         params.amount = amount;
 158 | *   |         params.mintPercent = 0;
 159 | *   |         params.lower = lower;
 160 | *   |         params.upper = upper;
 161 | *   |         params.zeroForOne = zeroForOne;
 162 |     | 
 163 |     |         // Get the ticks the position will be minted with rather than what was passed directly by fuzzer
 164 |     |         // This is so the we can properly compare before and after mint states of particular ticks.
 165 |     |         bool posCreated;
 166 | *   |         (lower, upper, posCreated) = pool.getResizedTicksForMint(params);
 167 | *   |         emit PositionTicks(lower, upper);
 168 | *   |         emit PositionCreated(posCreated);
 169 |     | 
 170 |     |         // ACTION 
 171 | *   |         pool.mintLimit(params);
 172 | *   |         if (posCreated) {
 173 | *   |             positions.push(Position(msg.sender, lower, upper, zeroForOne));
 174 |     |             // emit DebugTest(positions.length);
 175 |     |             // emit DebugEvent(positions[0].lower, positions[0].upper, positions[0].zeroForOne);
 176 |     |         }
 177 | *   |         (, poolStructs.lower) = pool.ticks(lower);
 178 | *   |         (, poolStructs.upper) = pool.ticks(upper);
 179 |     | 
 180 |     |         // values.liquidityDeltaLowerAfter = lowerTick.liquidityDelta;
 181 |     |         // values.liquidityDeltaUpperAfter = upperTick.liquidityDelta;
 182 | *   |         poolValues.liquidityAbsoluteLowerAfter = poolStructs.lower.liquidityAbsolute;
 183 | *   |         poolValues.liquidityAbsoluteUpperAfter = poolStructs.upper.liquidityAbsolute;
 184 |     | 
 185 | *   |         (, poolStructs.pool0, poolStructs.pool1, poolValues.liquidityGlobalAfter,,) = pool.globalState();
 186 | *   |         poolValues.price0After = poolStructs.pool0.price;
 187 | *   |         poolValues.liquidity0After = poolStructs.pool0.liquidity;
 188 | *   |         poolValues.price1After = poolStructs.pool1.price;
 189 | *   |         poolValues.liquidity1After = poolStructs.pool1.liquidity;
 190 | *   |         poolValues.price0 = poolStructs.pool0.price;
 191 | *   |         poolValues.price1 = poolStructs.pool1.price;
 192 | *   |         emit Prices(poolValues.price0, poolValues.price1);
 193 | *   |         assert(poolValues.price0 >= poolValues.price1);
 194 | *   |         emit Prices(poolValues.price0After, poolValues.price1After);
 195 |     | 
 196 |     |         // POST CONDITIONS
 197 |     | 
 198 |     |         // TODO: Create an invariant that combines liquidity delta and liquidity absolute
 199 |     |         
 200 |     |         // Ensure that liquidityAbsolute is incremented when not undercutting
 201 | *   |         if(zeroForOne){
 202 | *   |             if(poolValues.price0After >= poolValues.price0Before){
 203 | *   |                 emit LiquidityAbsolute(poolValues.liquidityAbsoluteUpperBefore, poolValues.liquidityAbsoluteUpperAfter);
 204 | *   |                 assert(poolValues.liquidityAbsoluteUpperAfter >= poolValues.liquidityAbsoluteUpperBefore);
 205 |     |             }
 206 |     |         } else {
 207 | *   |             if(poolValues.price1Before >= poolValues.price1After){
 208 |     |                 emit LiquidityAbsolute(poolValues.liquidityAbsoluteLowerBefore, poolValues.liquidityAbsoluteLowerAfter);
 209 | *   |                 assert(poolValues.liquidityAbsoluteLowerAfter >= poolValues.liquidityAbsoluteLowerBefore);
 210 |     |             }
 211 |     |         }
 212 |     | 
 213 |     |         // Ensure prices have not crossed
 214 | *   |         assert(poolValues.price0After >= poolValues.price1After);
 215 | *   |         if (posCreated) {
 216 |     |             // Ensure positions ticks arent crossed
 217 | *   |             assert(lower < upper);
 218 |     |             // Ensure minted ticks on proper tick spacing
 219 | *   |             assert((lower % tickSpacing == 0) && (upper % tickSpacing == 0));
 220 |     |         } else {
 221 |     |             
 222 |     |             // assert(poolValues.liquidityAbsoluteLowerAfter <= poolValues.liquidityAbsoluteLowerBefore);
 223 |     |             // assert(poolValues.liquidityAbsoluteUpperAfter <= poolValues.liquidityAbsoluteUpperBefore);
 224 |     |         }
 225 |     |         
 226 | *   |         emit LiquidityGlobal(poolValues.liquidityGlobalBefore, poolValues.liquidityGlobalAfter);
 227 | *   |         emit Liquidity(poolValues.liquidity0Before, poolValues.liquidity1Before, poolValues.liquidity0After, poolValues.liquidity1After);
 228 |     |         // emit LiquidityDelta(values.liquidityDeltaLowerBefore, values.liquidityDeltaUpperBefore, values.liquidityDeltaLowerAfter, values.liquidityDeltaUpperAfter);
 229 |     |         
 230 |     |         // Ensure pool.liquity is incremented when undercutting
 231 | *   |         assert(poolValues.liquidityGlobalAfter >= poolValues.liquidityGlobalBefore);
 232 | *   |         if (zeroForOne) {
 233 |     |             // Ensure liquidity does not decrease on mint
 234 | *   |             if (poolValues.price0After < poolValues.price0Before) {
 235 | *   |                 emit AssertFailTest("poolValues.price0After < poolValues.price0Before", poolValues.price0After, poolValues.price0Before);
 236 | *   |                 assert(poolValues.liquidity0After > 0);
 237 |     |             }
 238 |     | 
 239 |     |             // Doesn't hold due to insertSingle stashing pool liquidity on tick to save
 240 |     |             // if (posCreated) {
 241 |     |             //     assert(values.liquidityDeltaLowerAfter >= values.liquidityDeltaLowerBefore);
 242 |     |             //     assert(values.liquidityDeltaUpperAfter <= values.liquidityDeltaUpperBefore);
 243 |     |             // }
 244 |     |         }
 245 |     |         else {
 246 |     |             // Ensure pool.liquity is incremented when undercutting
 247 | *   |             if (poolValues.price1After > poolValues.price1Before) {
 248 | *   |                 emit AssertFailTest("poolValues.price1After > poolValues.price1Before", poolValues.price1After, poolValues.price1Before);
 249 | *   |                 assert(poolValues.liquidity1After > 0);
 250 |     |             }
 251 |     | 
 252 |     |             // if (posCreated) {
 253 |     |             //     assert(values.liquidityDeltaUpperAfter >= values.liquidityDeltaUpperBefore);
 254 |     |             //     assert(values.liquidityDeltaLowerAfter <= values.liquidityDeltaLowerBefore);
 255 |     |             // }
 256 |     |             
 257 |     |         }
 258 |     |     }
 259 |     | 
 260 | *   |     function mintVariable(uint128 amount, bool zeroForOne, int24 lower, int24 upper, uint96 mintPercent) public tickPreconditions(lower, upper) {
 261 |     |         // PRE CONDITIONS
 262 |     |         // NOTE: Do not use the exact inputs of this function for POCs, use the inputs after the input validation
 263 | *   |         mintAndApprove();
 264 | *   |         amount = amount + 1;
 265 | *   |         PoolValues memory poolValues;
 266 | *   |         PoolStructs memory poolStructs;
 267 |     | 
 268 | *   |         (,poolStructs.pool0, poolStructs.pool1, poolValues.liquidityGlobalBefore,,) = pool.globalState();
 269 | *   |         poolValues.price0Before = poolStructs.pool0.price;
 270 | *   |         poolValues.liquidity0Before = poolStructs.pool0.liquidity;
 271 | *   |         poolValues.price1Before = poolStructs.pool1.price;
 272 | *   |         poolValues.liquidity1Before = poolStructs.pool1.liquidity;
 273 |     | 
 274 |     |         // LiquidityDeltaValues memory values;
 275 | *   |         (, poolStructs.lower) = pool.ticks(lower);
 276 | *   |         (, poolStructs.upper) = pool.ticks(upper);
 277 |     | 
 278 |     |         // values.liquidityDeltaLowerBefore = lowerTick.liquidityDelta;
 279 |     |         // values.liquidityDeltaUpperBefore = upperTick.liquidityDelta;
 280 | *   |         poolValues.liquidityAbsoluteLowerBefore = poolStructs.lower.liquidityAbsolute;
 281 | *   |         poolValues.liquidityAbsoluteUpperBefore = poolStructs.upper.liquidityAbsolute;
 282 |     | 
 283 | *   |         ILimitPoolStructs.MintLimitParams memory params;
 284 | *   |         params.to = msg.sender;
 285 | *   |         params.amount = amount;
 286 | *   |         params.mintPercent = mintPercent;
 287 | *   |         params.lower = lower;
 288 | *   |         params.upper = upper;
 289 | *   |         params.zeroForOne = zeroForOne;
 290 |     | 
 291 |     |         // Get the ticks the position will be minted with rather than what was passed directly by fuzzer
 292 |     |         // This is so the we can properly compare before and after mint states of particular ticks.
 293 |     |         bool posCreated;
 294 | *   |         (lower, upper, posCreated) = pool.getResizedTicksForMint(params);
 295 | *   |         emit PositionTicks(lower, upper);
 296 | *   |         emit PositionCreated(posCreated);
 297 |     | 
 298 |     |         // ACTION 
 299 | *   |         pool.mintLimit(params);
 300 | *   |         if (posCreated) positions.push(Position(msg.sender, lower, upper, zeroForOne));
 301 |     | 
 302 | *   |         (, poolStructs.lower) = pool.ticks(lower);
 303 | *   |         (, poolStructs.upper) = pool.ticks(upper);
 304 |     | 
 305 |     |         // values.liquidityDeltaLowerAfter = poolStructs.lower.liquidityDelta;
 306 |     |         // values.liquidityDeltaUpperAfter = poolStructs.upper.liquidityDelta;
 307 | *   |         poolValues.liquidityAbsoluteLowerAfter = poolStructs.lower.liquidityAbsolute;
 308 | *   |         poolValues.liquidityAbsoluteUpperAfter = poolStructs.upper.liquidityAbsolute;
 309 |     | 
 310 | *   |         (, poolStructs.pool0, poolStructs.pool1, poolValues.liquidityGlobalAfter,,) = pool.globalState();
 311 | *   |         poolValues.price0After = poolStructs.pool0.price;
 312 | *   |         poolValues.liquidity0After = poolStructs.pool0.liquidity;
 313 | *   |         poolValues.price1After = poolStructs.pool1.price;
 314 | *   |         poolValues.liquidity1After = poolStructs.pool1.liquidity;
 315 |     | 
 316 |     |         
 317 | *   |         poolValues.price0 = poolStructs.pool0.price;
 318 | *   |         poolValues.price1 = poolStructs.pool1.price;
 319 | *   |         emit Prices(poolValues.price0, poolValues.price1);
 320 | *   |         assert(poolValues.price0 >= poolValues.price1);
 321 | *   |         emit Prices(poolValues.price0After, poolValues.price1After);
 322 |     | 
 323 |     |         // POST CONDITIONS
 324 |     | 
 325 | *   |         if(zeroForOne){
 326 |     |             if(poolValues.price0After >= poolValues.price0Before){
 327 |     |                 emit LiquidityAbsolute(poolValues.liquidityAbsoluteUpperBefore, poolValues.liquidityAbsoluteUpperAfter);
 328 |     |                 assert(poolValues.liquidityAbsoluteUpperAfter > poolValues.liquidityAbsoluteUpperBefore);
 329 |     |             }
 330 |     |         } else {
 331 | *   |             if(poolValues.price1Before >= poolValues.price1After){
 332 | *   |                 emit LiquidityAbsolute(poolValues.liquidityAbsoluteLowerBefore, poolValues.liquidityAbsoluteLowerAfter);
 333 | *   |                 assert(poolValues.liquidityAbsoluteLowerAfter > poolValues.liquidityAbsoluteLowerBefore);
 334 |     |             }
 335 |     |         }
 336 |     | 
 337 |     |         // Ensure prices have not crossed
 338 | *   |         assert(poolValues.price0After >= poolValues.price1After);
 339 | *   |         if (posCreated) {
 340 |     |             // Ensure positions ticks arent crossed
 341 | *   |             assert(lower < upper);
 342 |     |             // Ensure minted ticks on proper tick spacing
 343 | *   |             assert((lower % tickSpacing == 0) && (upper % tickSpacing == 0));
 344 |     |         }
 345 |     |         
 346 | *   |         emit LiquidityGlobal(poolValues.liquidityGlobalBefore, poolValues.liquidityGlobalAfter);
 347 | *   |         emit Liquidity(poolValues.liquidity0Before, poolValues.liquidity1Before, poolValues.liquidity0After, poolValues.liquidity1After);
 348 |     |         // emit LiquidityDelta(values.liquidityDeltaLowerBefore, values.liquidityDeltaUpperBefore, values.liquidityDeltaLowerAfter, values.liquidityDeltaUpperAfter);
 349 |     |         
 350 |     |         // Ensure pool.liquity is incremented when undercutting
 351 | *   |         assert(poolValues.liquidityGlobalAfter >= poolValues.liquidityGlobalBefore);
 352 | *   |         if (zeroForOne) {
 353 |     |             // Ensure liquidity does not decrease on mint
 354 |     |             if (poolValues.price0After < poolValues.price0Before) {
 355 |     |                 emit AssertFailTest("poolValues.price0After < poolValues.price0Before", poolValues.price0After, poolValues.price0Before);
 356 |     |                 assert(poolValues.liquidity0After > 0);
 357 |     |             }
 358 |     | 
 359 |     |             // Doesn't hold due to insertSingle stashing pool liquidity on tick to save
 360 |     |             // if (posCreated) {
 361 |     |             //     assert(values.liquidityDeltaLowerAfter >= values.liquidityDeltaLowerBefore);
 362 |     |             //     assert(values.liquidityDeltaUpperAfter <= values.liquidityDeltaUpperBefore);
 363 |     |             // }
 364 |     |         }
 365 |     |         else {
 366 |     |             // Ensure pool.liquity is incremented when undercutting
 367 | *   |             if (poolValues.price1After > poolValues.price1Before) {
 368 | *   |                 emit AssertFailTest("poolValues.price1After > poolValues.price1Before", poolValues.price1After, poolValues.price1Before);
 369 | *   |                 assert(poolValues.liquidity1After > 0);
 370 |     |             }
 371 |     | 
 372 |     |             // if (posCreated) {
 373 |     |             //     assert(values.liquidityDeltaUpperAfter >= values.liquidityDeltaUpperBefore);
 374 |     |             //     assert(values.liquidityDeltaLowerAfter <= values.liquidityDeltaLowerBefore);
 375 |     |             // }
 376 |     |             
 377 |     |         }
 378 |     |     }
 379 |     | 
 380 | *   |     function swap(uint160 priceLimit, uint128 amount, bool exactIn, bool zeroForOne) public {
 381 |     |         // PRE CONDITIONS
 382 |     |         // NOTE: Do not use the exact inputs of this function for POCs, use the inputs after the input validation
 383 | *   |         mintAndApprove();
 384 |     | 
 385 |     |         // TODO: Can do a check for liquidity absolute here probably
 386 |     | 
 387 |     |         // ACTION
 388 |     |         ILimitPoolStructs.SwapParams memory params;
 389 | *   |         params.to = msg.sender;
 390 | *   |         params.priceLimit = priceLimit;
 391 | *   |         params.amount = amount;
 392 | *   |         params.exactIn = exactIn;
 393 | *   |         params.zeroForOne = zeroForOne;
 394 | *   |         params.callbackData = abi.encodePacked(address(this));
 395 |     | 
 396 | *r  |         pool.swap(params);
 397 |     | 
 398 |     |         // POST CONDITIONS
 399 | *   |         (,PoolsharkStructs.LimitPoolState memory pool0, PoolsharkStructs.LimitPoolState memory pool1,,,) = pool.globalState();
 400 | *   |         uint160 price0 = pool0.price;
 401 | *   |         uint160 price1 = pool1.price;
 402 | *   |         emit Prices(price0, price1);
 403 | *   |         assert(price0 >= price1);
 404 |     |     }
 405 |     | 
 406 | *   |     function burn(int24 claimAt, uint256 positionIndex, uint128 burnPercent) public {
 407 |     |         // PRE CONDITIONS 
 408 |     |         // NOTE: Do not use the exact inputs of this function for POCs, use the inputs after the input validation
 409 | *   |         positionIndex = positionIndex % positions.length;
 410 | *   |         Position memory pos = positions[positionIndex];
 411 |     |         // emit DebugTest(positionIndex);
 412 |     |         // emit DebugEvent(positions[positionIndex].lower, positions[positionIndex].upper, positions[positionIndex].zeroForOne);
 413 | *r  |         require(claimAt >= pos.lower && claimAt <= pos.upper);
 414 | *   |         require(claimAt % tickSpacing == 0);
 415 | *   |         PoolValues memory poolValues;
 416 |     | 
 417 | *   |         (,PoolsharkStructs.LimitPoolState memory pool0, PoolsharkStructs.LimitPoolState memory pool1, uint128 liquidityGlobalBefore,,) = pool.globalState();
 418 |     | 
 419 | *   |         ILimitPoolStructs.BurnLimitParams memory params;
 420 | *   |         params.to = pos.owner;
 421 |     |         // TODO: allow for variable burn percentages
 422 | *   |         params.burnPercent = burnPercent == 1e38 ? burnPercent : _between(burnPercent, 1e36, 1e38); //1e38;
 423 | *   |         params.lower = pos.lower;
 424 | *   |         params.claim = claimAt;
 425 | *   |         params.upper = pos.upper;
 426 | *   |         params.zeroForOne = pos.zeroForOne;
 427 |     | 
 428 |     |         // LiquidityDeltaValues memory values;
 429 | *   |         (, PoolsharkStructs.LimitTick memory lowerTick) = pool.ticks(pos.lower);
 430 | *   |         (, PoolsharkStructs.LimitTick memory upperTick) = pool.ticks(pos.upper);
 431 |     | 
 432 |     |         // values.liquidityDeltaLowerBefore = lowerTick.liquidityDelta;
 433 |     |         // values.liquidityDeltaUpperBefore = upperTick.liquidityDelta;
 434 | *   |         poolValues.liquidityAbsoluteLowerBefore = lowerTick.liquidityAbsolute;
 435 | *   |         poolValues.liquidityAbsoluteUpperBefore = upperTick.liquidityAbsolute;
 436 |     |         
 437 | *   |         emit PositionTicks(pos.lower, pos.upper);
 438 | *   |         (int24 lower, int24 upper, bool positionExists) = pool.getResizedTicksForBurn(params);
 439 | *   |         emit BurnTicks(lower, upper, positionExists);
 440 | *   |         assert(false);
 441 |     |         // ACTION
 442 |     |         pool.burnLimit(params);
 443 |     |         if (!positionExists) {
 444 |     |             positions[positionIndex] = positions[positions.length - 1];
 445 |     |             delete positions[positions.length - 1];
 446 |     |         }
 447 |     |         else {
 448 |     |             // Update position data in array if not fully burned
 449 |     |             positions[positionIndex] = Position(pos.owner, lower, upper, pos.zeroForOne);
 450 |     |             // Ensure positions ticks arent crossed
 451 |     |             assert(lower < upper);
 452 |     |             // Ensure minted ticks on proper tick spacing
 453 |     |             assert((lower % tickSpacing == 0) && (upper % tickSpacing == 0));
 454 |     |         }
 455 |     | 
 456 |     |         // POST CONDITIONS
 457 |     | 
 458 |     |         (, lowerTick) = pool.ticks(lower);
 459 |     |         (, upperTick) = pool.ticks(upper);
 460 |     | 
 461 |     |         // values.liquidityDeltaLowerAfter = lowerTick.liquidityDelta;
 462 |     |         // values.liquidityDeltaUpperAfter = upperTick.liquidityDelta;
 463 |     |         poolValues.liquidityAbsoluteLowerAfter = lowerTick.liquidityAbsolute;
 464 |     |         poolValues.liquidityAbsoluteUpperAfter = upperTick.liquidityAbsolute;
 465 |     | 
 466 |     |         (,pool0, pool1, poolValues.liquidityGlobalAfter,,) = pool.globalState();
 467 |     |         uint160 price0 = pool0.price;
 468 |     |         uint160 price1 = pool1.price;
 469 |     |         emit Prices(price0, price1);
 470 |     |         assert(price0 >= price1);
 471 |     |         emit LiquidityGlobal(liquidityGlobalBefore, poolValues.liquidityGlobalAfter);
 472 |     |         assert((poolValues.liquidityGlobalAfter < liquidityGlobalBefore));
 473 |     | 
 474 |     |         // TODO: Look into this more
 475 |     |         // emit LiquidityAbsolute(poolValues.liquidityAbsoluteLowerBefore, poolValues.liquidityAbsoluteLowerAfter);
 476 |     |         // assert(poolValues.liquidityAbsoluteLowerAfter < poolValues.liquidityAbsoluteLowerBefore);
 477 |     |     }
 478 |     | 
 479 | *   |     function claim(int24 claimAt, uint256 positionIndex) public {
 480 |     |         // PRE CONDITIONS
 481 |     |         // NOTE: Do not use the exact inputs of this function for POCs, use the inputs after the input validation
 482 | *   |         positionIndex = positionIndex % positions.length;
 483 | *   |         Position memory pos = positions[positionIndex];
 484 | *   |         claimAt = pos.lower + (claimAt % (pos.upper - pos.lower));
 485 | *r  |         require(claimAt % tickSpacing == 0);
 486 |     | 
 487 | *   |         PoolValues memory poolValues;
 488 | *   |         (,PoolsharkStructs.LimitPoolState memory pool0, PoolsharkStructs.LimitPoolState memory pool1, uint128 liquidityGlobalBefore,,) = pool.globalState();
 489 |     | 
 490 | *   |         ILimitPoolStructs.BurnLimitParams memory params;
 491 | *   |         params.to = pos.owner;
 492 |     |         // TODO: allow for variable burn percentages
 493 | *   |         params.burnPercent = 0;
 494 | *   |         params.lower = pos.lower;
 495 | *   |         params.claim = claimAt;
 496 | *   |         params.upper = pos.upper;
 497 | *   |         params.zeroForOne = pos.zeroForOne;
 498 |     |         
 499 | *   |         emit PositionTicks(pos.lower, pos.upper);
 500 | *   |         (int24 lower, int24 upper, bool positionExists) = pool.getResizedTicksForBurn(params);
 501 | *   |         emit BurnTicks(lower, upper, positionExists);
 502 |     | 
 503 |     |         // ACTION
 504 | *r  |         pool.burnLimit(params);
 505 |     |         if (!positionExists) {
 506 |     |             positions[positionIndex] = positions[positions.length - 1];
 507 |     |             delete positions[positions.length - 1];
 508 |     |         }
 509 |     |         else {
 510 |     |             // Update position data in array if not fully burned
 511 |     |             positions[positionIndex] = Position(pos.owner, lower, upper, pos.zeroForOne);
 512 |     |             // Ensure positions ticks arent crossed
 513 |     |             assert(lower < upper);
 514 |     |             // Ensure minted ticks on proper tick spacing
 515 |     |             assert((lower % tickSpacing == 0) && (upper % tickSpacing == 0));
 516 |     |         }
 517 |     | 
 518 |     |         // POST CONDITIONS
 519 |     |         (,pool0, pool1, poolValues.liquidityGlobalAfter,,) = pool.globalState();
 520 |     |         uint160 price0 = pool0.price;
 521 |     |         uint160 price1 = pool1.price;
 522 |     |         emit Prices(price0, price1);
 523 |     |         assert(price0 >= price1);
 524 |     | 
 525 |     |         // NOTE: INVALID INVARIANTS
 526 |     |         // if(pos.zeroForOne) {
 527 |     |         //     emit LiquidityGlobal(liquidityGlobal0Before, liquidityGlobal1Before, liquidityGlobal0After, liquidityGlobal1After);
 528 |     |         //     if (positionExists) {
 529 |     |         //         assert((liquidityGlobal0After == liquidityGlobal0Before));
 530 |     |         //     }
 531 |     |         // }
 532 |     |         // else {
 533 |     |         //     emit LiquidityGlobal(liquidityGlobal0Before, liquidityGlobal1Before, liquidityGlobal0After, liquidityGlobal1After);
 534 |     |         //     if (positionExists) {
 535 |     |         //         assert((liquidityGlobal1After == liquidityGlobal1Before));
 536 |     |         //     }
 537 |     |         // }
 538 |     |     }
 539 |     | 
 540 | *   |     function mintThenBurnZeroLiquidityChangeVariable(uint128 amount, bool zeroForOne, int24 lower, int24 upper, uint96 mintPercent) public tickPreconditions(lower, upper) {
 541 |     |         // PRE CONDITIONS
 542 |     |         // NOTE: Do not use the exact inputs of this function for POCs, use the inputs after the input validation
 543 | *   |         mintAndApprove();
 544 | *   |         PoolValues memory poolValues;
 545 | *   |         (,PoolsharkStructs.LimitPoolState memory pool0, PoolsharkStructs.LimitPoolState memory pool1, uint128 liquidityGlobalBefore,,) = pool.globalState();
 546 |     |         // uint160 price0Before = pool0.price;
 547 |     |         // uint160 price1Before = pool1.price;
 548 |     | 
 549 | *   |         LiquidityDeltaValues memory values;
 550 | *   |         (, PoolsharkStructs.LimitTick memory lowerTick) = pool.ticks(lower);
 551 | *   |         (, PoolsharkStructs.LimitTick memory upperTick) = pool.ticks(upper);
 552 |     | 
 553 | *   |         values.liquidityDeltaLowerBefore = lowerTick.liquidityDelta;
 554 | *   |         values.liquidityDeltaUpperBefore = upperTick.liquidityDelta;
 555 | *   |         poolValues.liquidityAbsoluteLowerBefore = lowerTick.liquidityAbsolute;
 556 | *   |         poolValues.liquidityAbsoluteUpperBefore = upperTick.liquidityAbsolute;
 557 |     | 
 558 |     |         // ACTION 
 559 | *   |         mintVariable(amount, zeroForOne, lower, upper, mintPercent);
 560 | *   |         emit PassedMint();
 561 | *   |         burn(zeroForOne ? lower : upper, positions.length - 1, 1e38);
 562 |     |         emit PassedBurn();
 563 |     | 
 564 |     |         // POST CONDITIONS
 565 |     |         (, lowerTick) = pool.ticks(lower);
 566 |     |         (, upperTick) = pool.ticks(upper);
 567 |     | 
 568 |     |         values.liquidityDeltaLowerAfter = lowerTick.liquidityDelta;
 569 |     |         values.liquidityDeltaUpperAfter = upperTick.liquidityDelta;
 570 |     |         poolValues.liquidityAbsoluteLowerAfter = lowerTick.liquidityAbsolute;
 571 |     |         poolValues.liquidityAbsoluteUpperAfter = upperTick.liquidityAbsolute;
 572 |     |         
 573 |     |         (,pool0, pool1, poolValues.liquidityGlobalAfter,,) = pool.globalState();
 574 |     |         uint160 price0After = pool0.price;
 575 |     |         uint160 price1After = pool1.price;
 576 |     |         emit Prices(price0After, price1After);
 577 |     |         assert(price0After >= price1After);
 578 |     |         emit LiquidityGlobal(liquidityGlobalBefore, poolValues.liquidityGlobalAfter);
 579 |     |         assert(poolValues.liquidityGlobalAfter == liquidityGlobalBefore);
 580 |     | 
 581 |     |         emit LiquidityAbsolute(poolValues.liquidityAbsoluteLowerBefore, poolValues.liquidityAbsoluteLowerAfter);
 582 |     |         assert(poolValues.liquidityAbsoluteLowerAfter == poolValues.liquidityAbsoluteLowerBefore);
 583 |     |         emit LiquidityAbsolute(poolValues.liquidityAbsoluteUpperBefore, poolValues.liquidityAbsoluteUpperAfter);
 584 |     |         assert(poolValues.liquidityAbsoluteUpperAfter == poolValues.liquidityAbsoluteUpperBefore);
 585 |     |     }
 586 |     | 
 587 | *   |     function mintThenBurnZeroLiquidityChange(uint128 amount, bool zeroForOne, int24 lower, int24 upper) public tickPreconditions(lower, upper) {
 588 |     |         // PRE CONDITIONS
 589 |     |         // NOTE: Do not use the exact inputs of this function for POCs, use the inputs after the input validation
 590 | *   |         mintAndApprove();
 591 | *   |         PoolValues memory poolValues;
 592 | *   |         (,PoolsharkStructs.LimitPoolState memory pool0, PoolsharkStructs.LimitPoolState memory pool1, uint128 liquidityGlobalBefore,,) = pool.globalState();
 593 |     |         // uint160 price0Before = pool0.price;
 594 |     |         // uint160 price1Before = pool1.price;
 595 |     | 
 596 | *   |         LiquidityDeltaValues memory values;
 597 | *   |         (, PoolsharkStructs.LimitTick memory lowerTick) = pool.ticks(lower);
 598 | *   |         (, PoolsharkStructs.LimitTick memory upperTick) = pool.ticks(upper);
 599 |     | 
 600 | *   |         values.liquidityDeltaLowerBefore = lowerTick.liquidityDelta;
 601 | *   |         values.liquidityDeltaUpperBefore = upperTick.liquidityDelta;
 602 | *   |         poolValues.liquidityAbsoluteLowerBefore = lowerTick.liquidityAbsolute;
 603 | *   |         poolValues.liquidityAbsoluteUpperBefore = upperTick.liquidityAbsolute;
 604 |     | 
 605 |     |         // ACTION 
 606 | *   |         mint(amount, zeroForOne, lower, upper);
 607 | *   |         emit PassedMint();
 608 | *   |         burn(zeroForOne ? lower : upper, positions.length - 1, 1e38);
 609 |     |         emit PassedBurn();
 610 |     | 
 611 |     |         // POST CONDITIONS
 612 |     |         (, lowerTick) = pool.ticks(lower);
 613 |     |         (, upperTick) = pool.ticks(upper);
 614 |     | 
 615 |     |         values.liquidityDeltaLowerAfter = lowerTick.liquidityDelta;
 616 |     |         values.liquidityDeltaUpperAfter = upperTick.liquidityDelta;
 617 |     |         poolValues.liquidityAbsoluteLowerAfter = lowerTick.liquidityAbsolute;
 618 |     |         poolValues.liquidityAbsoluteUpperAfter = upperTick.liquidityAbsolute;
 619 |     | 
 620 |     | 
 621 |     |         (,pool0, pool1, poolValues.liquidityGlobalAfter,,) = pool.globalState();
 622 |     |         uint160 price0After = pool0.price;
 623 |     |         uint160 price1After = pool1.price;
 624 |     |         emit Prices(price0After, price1After);
 625 |     |         assert(price0After >= price1After);
 626 |     |         emit LiquidityGlobal(liquidityGlobalBefore, poolValues.liquidityGlobalAfter);
 627 |     |         assert(poolValues.liquidityGlobalAfter == liquidityGlobalBefore);
 628 |     | 
 629 |     |         emit LiquidityAbsolute(poolValues.liquidityAbsoluteLowerBefore, poolValues.liquidityAbsoluteLowerAfter);
 630 |     |         assert(poolValues.liquidityAbsoluteLowerAfter == poolValues.liquidityAbsoluteLowerBefore);
 631 |     |         emit LiquidityAbsolute(poolValues.liquidityAbsoluteUpperBefore, poolValues.liquidityAbsoluteUpperAfter);
 632 |     |         assert(poolValues.liquidityAbsoluteUpperAfter == poolValues.liquidityAbsoluteUpperBefore);
 633 |     |     }
 634 |     | 
 635 | *   |     function mintThenPartialBurnTwiceLiquidityChange(uint128 amount, bool zeroForOne, int24 lower, int24 upper, uint128 percent) public tickPreconditions(lower, upper) {
 636 |     |         // PRE CONDITIONS
 637 |     |         // NOTE: Do not use the exact inputs of this function for POCs, use the inputs after the input validation
 638 | *   |         percent = 1 + (percent % (1e38 - 1));
 639 | *   |         mintAndApprove();
 640 | *   |         PoolValues memory poolValues;
 641 | *   |         (,PoolsharkStructs.LimitPoolState memory pool0, PoolsharkStructs.LimitPoolState memory pool1, uint128 liquidityGlobalBefore,,) = pool.globalState();
 642 |     | 
 643 | *   |         LiquidityDeltaValues memory values;
 644 | *   |         (, PoolsharkStructs.LimitTick memory lowerTick) = pool.ticks(lower);
 645 | *   |         (, PoolsharkStructs.LimitTick memory upperTick) = pool.ticks(upper);
 646 |     | 
 647 | *   |         values.liquidityDeltaLowerBefore = lowerTick.liquidityDelta;
 648 | *   |         values.liquidityDeltaUpperBefore = upperTick.liquidityDelta;
 649 | *   |         poolValues.liquidityAbsoluteLowerBefore = lowerTick.liquidityAbsolute;
 650 | *   |         poolValues.liquidityAbsoluteUpperBefore = upperTick.liquidityAbsolute;
 651 |     | 
 652 |     |         // ACTION 
 653 | *   |         mint(amount, zeroForOne, lower, upper);
 654 | *   |         emit PassedMint();
 655 | *   |         burn(zeroForOne ? lower : upper, positions.length - 1, percent);
 656 |     |         emit PassedBurn();
 657 |     |         burn(zeroForOne ? lower : upper, positions.length - 1, 1e38);
 658 |     |         emit PassedBurn();
 659 |     | 
 660 |     |         // POST CONDITIONS
 661 |     | 
 662 |     |         (, lowerTick) = pool.ticks(lower);
 663 |     |         (, upperTick) = pool.ticks(upper);
 664 |     | 
 665 |     |         values.liquidityDeltaLowerAfter = lowerTick.liquidityDelta;
 666 |     |         values.liquidityDeltaUpperAfter = upperTick.liquidityDelta;
 667 |     |         poolValues.liquidityAbsoluteLowerAfter = lowerTick.liquidityAbsolute;
 668 |     |         poolValues.liquidityAbsoluteUpperAfter = upperTick.liquidityAbsolute;
 669 |     | 
 670 |     |         (,pool0, pool1, poolValues.liquidityGlobalAfter,,) = pool.globalState();
 671 |     |         uint160 price0After = pool0.price;
 672 |     |         uint160 price1After = pool1.price;
 673 |     |         emit Prices(price0After, price1After);
 674 |     |         assert(price0After >= price1After);
 675 |     |         emit LiquidityGlobal(liquidityGlobalBefore, poolValues.liquidityGlobalAfter);
 676 |     |         assert(poolValues.liquidityGlobalAfter == liquidityGlobalBefore);
 677 |     | 
 678 |     |         emit LiquidityAbsolute(poolValues.liquidityAbsoluteLowerBefore, poolValues.liquidityAbsoluteLowerAfter);
 679 |     |         assert(poolValues.liquidityAbsoluteLowerAfter == poolValues.liquidityAbsoluteLowerBefore);
 680 |     |         emit LiquidityAbsolute(poolValues.liquidityAbsoluteUpperBefore, poolValues.liquidityAbsoluteUpperAfter);
 681 |     |         assert(poolValues.liquidityAbsoluteUpperAfter == poolValues.liquidityAbsoluteUpperBefore);
 682 |     |     }
 683 |     | 
 684 | *   |     function mintThenPartialBurnTwiceLiquidityChangeVariable(uint128 amount, bool zeroForOne, int24 lower, int24 upper, uint128 percent, uint96 mintPercent) public tickPreconditions(lower, upper) {
 685 |     |         // PRE CONDITIONS
 686 |     |         // NOTE: Do not use the exact inputs of this function for POCs, use the inputs after the input validation
 687 | *   |         percent = 1 + (percent % (1e38 - 1));
 688 | *   |         mintAndApprove();
 689 | *   |         PoolValues memory poolValues;
 690 | *   |         (,PoolsharkStructs.LimitPoolState memory pool0, PoolsharkStructs.LimitPoolState memory pool1, uint128 liquidityGlobalBefore,,) = pool.globalState();
 691 |     | 
 692 | *   |         LiquidityDeltaValues memory values;
 693 | *   |         (, PoolsharkStructs.LimitTick memory lowerTick) = pool.ticks(lower);
 694 | *   |         (, PoolsharkStructs.LimitTick memory upperTick) = pool.ticks(upper);
 695 |     | 
 696 | *   |         values.liquidityDeltaLowerBefore = lowerTick.liquidityDelta;
 697 | *   |         values.liquidityDeltaUpperBefore = upperTick.liquidityDelta;
 698 | *   |         poolValues.liquidityAbsoluteLowerBefore = lowerTick.liquidityAbsolute;
 699 | *   |         poolValues.liquidityAbsoluteUpperBefore = upperTick.liquidityAbsolute;
 700 |     | 
 701 |     | 
 702 |     |         // ACTION 
 703 | *   |         mintVariable(amount, zeroForOne, lower, upper, mintPercent);
 704 | *   |         emit PassedMint();
 705 | *   |         burn(zeroForOne ? lower : upper, positions.length - 1, percent);
 706 |     |         emit PassedBurn();
 707 |     |         burn(zeroForOne ? lower : upper, positions.length - 1, 1e38);
 708 |     |         emit PassedBurn();
 709 |     | 
 710 |     |         // POST CONDITIONS
 711 |     |         (, lowerTick) = pool.ticks(lower);
 712 |     |         (, upperTick) = pool.ticks(upper);
 713 |     | 
 714 |     |         values.liquidityDeltaLowerAfter = lowerTick.liquidityDelta;
 715 |     |         values.liquidityDeltaUpperAfter = upperTick.liquidityDelta;
 716 |     |         poolValues.liquidityAbsoluteLowerAfter = lowerTick.liquidityAbsolute;
 717 |     |         poolValues.liquidityAbsoluteUpperAfter = upperTick.liquidityAbsolute;
 718 |     | 
 719 |     |         (,pool0, pool1, poolValues.liquidityGlobalAfter,,) = pool.globalState();
 720 |     |         uint160 price0After = pool0.price;
 721 |     |         uint160 price1After = pool1.price;
 722 |     |         emit Prices(price0After, price1After);
 723 |     |         assert(price0After >= price1After);
 724 |     |         emit LiquidityGlobal(liquidityGlobalBefore, poolValues.liquidityGlobalAfter);
 725 |     |         assert(poolValues.liquidityGlobalAfter == liquidityGlobalBefore);
 726 |     | 
 727 |     |         emit LiquidityAbsolute(poolValues.liquidityAbsoluteLowerBefore, poolValues.liquidityAbsoluteLowerAfter);
 728 |     |         assert(poolValues.liquidityAbsoluteLowerAfter == poolValues.liquidityAbsoluteLowerBefore);
 729 |     |         emit LiquidityAbsolute(poolValues.liquidityAbsoluteUpperBefore, poolValues.liquidityAbsoluteUpperAfter);
 730 |     |         assert(poolValues.liquidityAbsoluteUpperAfter == poolValues.liquidityAbsoluteUpperBefore);
 731 |     |     }
 732 |     | 
 733 | *   |     function poolsharkSwapCallback(
 734 |     |         int256 amount0Delta,
 735 |     |     int256 amount1Delta,
 736 |     |         bytes calldata data
 737 | *   |     ) external {
 738 | *   |         address token0 = LimitPool(pool).token0();
 739 | *   |         address token1 = LimitPool(pool).token1();
 740 |     |         // SwapCallbackData memory _data = abi.decode(data, (SwapCallbackData));
 741 | *   |         if (amount0Delta < 0) {
 742 | *   |             SafeTransfers.transferInto(token0, address(pool), uint256(-amount0Delta));
 743 |     |         } else {
 744 | *   |             SafeTransfers.transferInto(token1, address(pool), uint256(-amount1Delta));
 745 |     |         }
 746 |     |     }
 747 |     | 
 748 | *   |     function mintAndApprove() internal {
 749 |     |         // TODO: can make token mints to be in between some range
 750 | *   |         tokenIn.mint(msg.sender, 100000000000 ether);
 751 | *   |         tokenOut.mint(msg.sender, 100000000000 ether);
 752 | *   |         tokenIn.mint(address(this), 100000000000 ether);
 753 | *   |         tokenOut.mint(address(this), 100000000000 ether);
 754 | *   |         tokenIn.approve(address(pool), type(uint256).max);
 755 | *   |         tokenOut.approve(address(pool), type(uint256).max);
 756 |     |     }
 757 |     | 
 758 | *   |     function _between(uint128 val, uint low, uint high) internal pure returns(uint128) {
 759 | *   |         return uint128(low + (val % (high-low +1))); 
 760 |     |     }
 761 |     | 
 762 |     |     function liquidityMintedBackcalculates(uint128 amount, bool zeroForOne, int24 lower, int24 upper) tickPreconditions(lower, upper) internal {
 763 |     |         // NOTE: Do not use the exact inputs of this function for POCs, use the inputs after the input validation
 764 |     |         amount = amount + 1e5 + 1;
 765 |     |         ILimitPoolStructs.Immutables memory immutables = pool.immutables();
 766 |     |         uint256 priceLower = ConstantProduct.getPriceAtTick(lower, immutables);
 767 |     |         uint256 priceUpper = ConstantProduct.getPriceAtTick(upper, immutables);
 768 |     | 
 769 |     |         uint256 liquidityMinted = ConstantProduct.getLiquidityForAmounts(
 770 |     |             priceLower,
 771 |     |             priceUpper,
 772 |     |             zeroForOne ? priceLower : priceUpper,
 773 |     |             zeroForOne ? 0 : uint256(amount),
 774 |     |             zeroForOne ? uint256(amount) : 0
 775 |     |         );
 776 |     | 
 777 |     |         (uint256 token0Amount, uint256 token1Amount) = ConstantProduct.getAmountsForLiquidity(
 778 |     |             priceLower,
 779 |     |             priceUpper,
 780 |     |             zeroForOne ? priceLower : priceUpper,
 781 |     |             liquidityMinted,
 782 |     |             true
 783 |     |         );
 784 |     | 
 785 |     |         if(zeroForOne) {
 786 |     |             emit LiquidityMinted(amount, token0Amount, zeroForOne);
 787 |     |             assert(isEqualWithinPercentage(amount, token0Amount, 100));
 788 |     |             
 789 |     |         }
 790 |     |         else {
 791 |     |             emit LiquidityMinted(amount, token1Amount, zeroForOne);
 792 |     |             assert(isEqualWithinPercentage(amount, token1Amount, 100));
 793 |     |         }
 794 |     | 
 795 |     |     }
 796 |     | 
 797 |     |     function isEqualWithinPercentage(uint256 a, uint256 b, uint256 percentage) internal pure returns (bool) {
 798 |     |         uint256 diff = a > b ? a - b : b - a;
 799 |     |         uint256 maxDiff = a * percentage / 10000; // basis points 
 800 |     | 
 801 |     |         return diff <= maxDiff;
 802 |     |     }
 803 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/EchidnaTickMap.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | 
  5 |     | import './LimitPool.sol';
  6 |     | import './LimitPoolFactory.sol';
  7 |     | import './utils/LimitPoolManager.sol';
  8 |     | import './test/Token20.sol';
  9 |     | import '@openzeppelin/contracts/token/ERC20/ERC20.sol';
 10 |     | import './libraries/utils/SafeTransfers.sol';
 11 |     | import './libraries/math/ConstantProduct.sol';
 12 |     | 
 13 |     | 
 14 |     | // Fuzz TickMap functionality
 15 |     | contract EchidnaTickMap {
 16 |     | 
 17 |     |     event TickResult(int24 inputTick, int24 outputTick);
 18 |     | 
 19 |     |     ILimitPoolStructs.TickMap public tickMap;
 20 |     |     int16 tickSpacing;
 21 |     | 
 22 |     |      constructor() {
 23 |     |         tickSpacing = 10;
 24 |     |         TickMap.set(tickMap, ConstantProduct.minTick(tickSpacing), tickSpacing);
 25 |     |         TickMap.set(tickMap, ConstantProduct.maxTick(tickSpacing), tickSpacing);
 26 |     | 
 27 |     |     }
 28 |     | 
 29 |     |     function setTickTwice(int24 tick) public {
 30 |     |         require(tick > ConstantProduct.minTick(tickSpacing));
 31 |     |         require(tick < ConstantProduct.maxTick(tickSpacing));
 32 |     |         TickMap.set(tickMap, tick, tickSpacing);
 33 |     |         TickMap.set(tickMap, tick, tickSpacing);
 34 |     |         bool exists = TickMap.get(tickMap, tick, tickSpacing);
 35 |     |         assert(exists);
 36 |     |     }
 37 |     | 
 38 |     |     function setThenUnsets(int24 tick) public {
 39 |     |         require(tick > ConstantProduct.minTick(tickSpacing));
 40 |     |         require(tick < ConstantProduct.maxTick(tickSpacing));
 41 |     |         TickMap.set(tickMap, tick, tickSpacing);
 42 |     |         TickMap.unset(tickMap, tick, tickSpacing);
 43 |     |         bool exists = TickMap.get(tickMap, tick, tickSpacing);
 44 |     |         assert(!exists);
 45 |     |     }
 46 |     | 
 47 |     |     function setTick(int24 tick) public {
 48 |     |         require(tick > ConstantProduct.minTick(tickSpacing));
 49 |     |         require(tick < ConstantProduct.maxTick(tickSpacing));
 50 |     |         TickMap.set(tickMap, tick, tickSpacing);
 51 |     |         bool exists = TickMap.get(tickMap, tick, tickSpacing);
 52 |     |         assert(exists);
 53 |     |     }
 54 |     | 
 55 |     |     function unsetTick(int24 tick) public {
 56 |     |         require(tick > ConstantProduct.minTick(tickSpacing));
 57 |     |         require(tick < ConstantProduct.maxTick(tickSpacing));
 58 |     |         TickMap.unset(tickMap, tick, tickSpacing);
 59 |     |         bool exists = TickMap.get(tickMap, tick, tickSpacing);
 60 |     |         assert(!exists);
 61 |     |     }
 62 |     | 
 63 |     |     function next(int24 tick, bool inclusive) public {
 64 |     |         require(tick % tickSpacing == 0);
 65 |     |         require(tick % (tickSpacing/2) == 0);
 66 |     |         int24 nextTick = TickMap.next(tickMap, tick, tickSpacing, inclusive);
 67 |     |         emit TickResult(tick, nextTick);
 68 |     |         // if (inclusive) {
 69 |     |         //     bool exists = TickMap.get(tickMap, tick, tickSpacing);
 70 |     |         //     if (exists) assert(tick == nextTick);
 71 |     |         // }
 72 |     |         assert(nextTick >= tick);
 73 |     |     
 74 |     |     }
 75 |     | 
 76 |     |     function previous(int24 tick, bool inclusive) public {
 77 |     |         require(tick % tickSpacing == 0);
 78 |     |         require(tick % (tickSpacing/2) == 0);
 79 |     |         int24 previousTick = TickMap.previous(tickMap, tick, tickSpacing, inclusive);
 80 |     |         emit TickResult(tick, previousTick);
 81 |     |         if (inclusive) {
 82 |     |             bool exists = TickMap.get(tickMap, tick, tickSpacing);
 83 |     |             if (exists) assert(tick == previousTick);
 84 |     |         }
 85 |     |         assert(previousTick <= tick);
 86 |     |     }
 87 |     | 
 88 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/LimitPool.sol
   1 |     | // SPDX-License-Identifier: BUSL-1.1
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | import './interfaces/range/IRangePool.sol';
   5 |     | import './interfaces/limit/ILimitPool.sol';
   6 |     | import './interfaces/IPool.sol';
   7 |     | import './interfaces/limit/ILimitPoolManager.sol';
   8 |     | import './base/storage/LimitPoolStorage.sol';
   9 |     | import './base/storage/LimitPoolImmutables.sol';
  10 |     | import './base/structs/LimitPoolFactoryStructs.sol';
  11 |     | import './utils/LimitPoolErrors.sol';
  12 |     | import './libraries/pool/SwapCall.sol';
  13 |     | import './libraries/pool/QuoteCall.sol';
  14 |     | import './libraries/range/pool/MintCall.sol';
  15 |     | import './libraries/range/pool/BurnCall.sol';
  16 |     | import './libraries/limit/pool/MintLimitCall.sol';
  17 |     | import './libraries/limit/pool/BurnLimitCall.sol';
  18 |     | import './libraries/math/ConstantProduct.sol';
  19 |     | import './libraries/solady/LibClone.sol';
  20 |     | import './external/openzeppelin/security/ReentrancyGuard.sol';
  21 |     | 
  22 |     | 
  23 |     | /// @notice Poolshark Limit Pool Implementation
  24 | *   | contract LimitPool is
  25 |     |     ILimitPool,
  26 |     |     IRangePool,
  27 |     |     LimitPoolStorage,
  28 |     |     LimitPoolImmutables,
  29 |     |     LimitPoolFactoryStructs,
  30 |     |     ReentrancyGuard
  31 |     | {
  32 |     | 
  33 |     |     event SimulateMint(bytes b);
  34 |     |     event SimulateMint(bytes4 b);
  35 |     |     event SimulateMint(bool b);
  36 |     |     event Debug(int24 lower, int24 upper, bool positionCreated);
  37 |     | 
  38 |     |     modifier ownerOnly() {
  39 |     |         _onlyOwner();
  40 |     |         _;
  41 |     |     }
  42 |     | 
  43 |     |     modifier factoryOnly() {
  44 |     |         _onlyFactory();
  45 |     |         _;
  46 |     |     }
  47 |     | 
  48 |     |     modifier canoncialOnly() {
  49 |     |         _onlyCanoncialClones();
  50 |     |         _;
  51 |     |     }
  52 |     | 
  53 |     |     address public immutable original;
  54 |     |     address public immutable factory;
  55 |     | 
  56 |     |     constructor(
  57 |     |         address factory_
  58 |     |     ) {
  59 |     |         original = address(this);
  60 |     |         factory = factory_;
  61 |     |     }
  62 |     | 
  63 |     |     function initialize(
  64 |     |         uint160 startPrice
  65 |     |     ) external override 
  66 |     |         nonReentrant(globalState)
  67 |     |         factoryOnly
  68 |     |         canoncialOnly
  69 |     |     {
  70 |     |         // initialize state
  71 |     |         globalState = Ticks.initialize(
  72 |     |             rangeTickMap,
  73 |     |             limitTickMap,
  74 |     |             samples,
  75 |     |             globalState,
  76 |     |             immutables(),
  77 |     |             startPrice
  78 |     |         );
  79 |     |     }
  80 |     | 
  81 |     |     function mint(
  82 |     |         MintParams memory params
  83 |     |     ) external override
  84 |     |         nonReentrant(globalState)
  85 |     |         canoncialOnly
  86 |     |     {
  87 |     |         MintCache memory cache = MintCache({
  88 |     |             state: globalState,
  89 |     |             position: positions[params.lower][params.upper],
  90 |     |             constants: immutables(),
  91 |     |             liquidityMinted: 0
  92 |     |         });
  93 |     |         cache = MintCall.perform(params, cache, rangeTickMap, ticks, samples);
  94 |     |         globalState = cache.state; 
  95 |     |         positions[params.lower][params.upper] = cache.position;
  96 |     |     }
  97 |     | 
  98 |     |     function burn(
  99 |     |         BurnParams memory params
 100 |     |     ) external override
 101 |     |         nonReentrant(globalState)
 102 |     |         canoncialOnly
 103 |     |     {
 104 |     |         BurnCache memory cache = BurnCache({
 105 |     |             state: globalState,
 106 |     |             position: positions[params.lower][params.upper],
 107 |     |             constants: immutables(),
 108 |     |             amount0: 0,
 109 |     |             amount1: 0,
 110 |     |             tokenBurned: 0
 111 |     |         });
 112 |     |         cache = BurnCall.perform(params, cache, rangeTickMap, ticks, samples);
 113 |     |         globalState = cache.state;
 114 |     |         positions[params.lower][params.upper] = cache.position;
 115 |     |     }
 116 |     | 
 117 |     |     //limitSwap
 118 |     |     function mintLimit(
 119 |     |         MintLimitParams memory params
 120 |     |     ) external override
 121 |     |         nonReentrant(globalState)
 122 |     |         canoncialOnly
 123 |     |     {
 124 |     |         MintLimitCache memory cache;
 125 |     |         {
 126 |     |             cache.state = globalState;
 127 |     |             cache.constants = immutables();
 128 |     |         }
 129 |     |         cache = MintLimitCall.perform(
 130 |     |             params.zeroForOne ? positions0 : positions1,
 131 |     |             ticks,
 132 |     |             samples,
 133 |     |             rangeTickMap,
 134 |     |             limitTickMap,
 135 |     |             globalState,
 136 |     |             params,
 137 |     |             cache
 138 |     |         );
 139 |     | 
 140 |     |         globalState = cache.state;
 141 |     |     }
 142 |     | 
 143 |     |     function getResizedTicksForMint(
 144 |     |         MintLimitParams memory params
 145 |     |     ) external returns (int24 lower, int24 upper, bool positionCreated){
 146 |     |         MintLimitCache memory cache;
 147 |     |         {
 148 |     |             cache.state = globalState;
 149 |     |             cache.constants = immutables();
 150 |     |         }
 151 |     | 
 152 |     |         try MintLimitCall.getResizedTicks(
 153 |     |             params.zeroForOne ? positions0 : positions1,
 154 |     |             ticks,
 155 |     |             samples,
 156 |     |             rangeTickMap,
 157 |     |             limitTickMap,
 158 |     |             globalState,
 159 |     |             params,
 160 |     |             cache
 161 |     |         ) {
 162 |     |         } catch (bytes memory data) {
 163 |     |             emit SimulateMint(data);
 164 |     |             bytes4 sig;
 165 |     |             assembly {
 166 |     |                 sig := mload(add(data, 0x20))
 167 |     |             }
 168 |     |             emit SimulateMint(sig);
 169 |     |             // SimulateMint error
 170 |     |             if (sig == hex"5cc1f67b") {
 171 |     |                 (, lower, upper, positionCreated) = abi.decode(abi.encodePacked(bytes28(0), data),(bytes32,int24,int24,bool));
 172 |     |                 emit Debug(params.lower, params.upper, positionCreated);
 173 |     |             }
 174 |     |             else {
 175 |     |                 lower = -8388608;
 176 |     |                 upper = -8388608;
 177 |     |                 positionCreated = false;
 178 |     |             }
 179 |     |         }
 180 |     |     }
 181 |     | 
 182 |     |     function burnLimit(
 183 |     |         BurnLimitParams memory params
 184 |     |     ) external override
 185 |     |         nonReentrant(globalState)
 186 |     |         canoncialOnly
 187 |     |     {
 188 |     |         if (params.to == address(0)) revert CollectToZeroAddress();
 189 |     |         BurnLimitCache memory cache = BurnLimitCache({
 190 |     |             state: globalState,
 191 |     |             position: params.zeroForOne ? positions0[msg.sender][params.lower][params.upper]
 192 |     |                                         : positions1[msg.sender][params.lower][params.upper],
 193 |     |             constants: immutables()
 194 |     |         });
 195 |     |         cache = BurnLimitCall.perform(
 196 |     |             params, 
 197 |     |             cache, 
 198 |     |             limitTickMap,
 199 |     |             ticks,
 200 |     |             params.zeroForOne ? positions0 : positions1
 201 |     |         );
 202 |     |         globalState = cache.state;
 203 |     |     }
 204 |     | 
 205 |     |     function getResizedTicksForBurn(
 206 |     |         BurnLimitParams memory params
 207 |     |     ) external returns (int24 lower, int24 upper, bool positionExists){
 208 |     |         if (params.to == address(0)) revert CollectToZeroAddress();
 209 |     |         BurnLimitCache memory cache = BurnLimitCache({
 210 |     |             state: globalState,
 211 |     |             position: params.zeroForOne ? positions0[params.to][params.lower][params.upper]
 212 |     |                                         : positions1[params.to][params.lower][params.upper],
 213 |     |             constants: immutables()
 214 |     |         });
 215 |     | 
 216 |     |         try BurnLimitCall.getResizedTicks(
 217 |     |             params, 
 218 |     |             cache, 
 219 |     |             limitTickMap,
 220 |     |             ticks,
 221 |     |             params.zeroForOne ? positions0 : positions1
 222 |     |         ) {
 223 |     |         } catch (bytes memory data) {
 224 |     |             bytes4 sig;
 225 |     |             assembly {
 226 |     |                 sig := mload(add(data, 0x20))
 227 |     |             }
 228 |     |             // SimulateBurn error
 229 |     |             if (sig == hex"97dd6e0a") {
 230 |     |                 (, lower, upper, positionExists) = abi.decode(abi.encodePacked(bytes28(0), data),(bytes32,int24,int24,bool));
 231 |     |             }
 232 |     |              else {
 233 |     |                 lower = -8388608;
 234 |     |                 upper = -8388608;
 235 |     |                 positionExists = false;
 236 |     |             }
 237 |     |         }
 238 |     |     }
 239 |     | 
 240 |     |     function swap(
 241 |     |         SwapParams memory params
 242 |     |     ) external override
 243 |     |         nonReentrant(globalState)
 244 |     |         canoncialOnly
 245 |     |     returns (
 246 |     |         int256,
 247 |     |         int256
 248 |     |     ) 
 249 |     |     {
 250 |     |         SwapCache memory cache;
 251 |     |         cache.state = globalState;
 252 |     |         cache.constants = immutables();
 253 |     | 
 254 |     |         return SwapCall.perform(
 255 |     |             ticks,
 256 |     |             globalState,
 257 |     |             samples,
 258 |     |             rangeTickMap,
 259 |     |             limitTickMap,
 260 |     |             params,
 261 |     |             cache
 262 |     |         );
 263 |     |     }
 264 |     | 
 265 |     |     function quote(
 266 |     |         QuoteParams memory params
 267 |     |     ) external view override canoncialOnly returns (
 268 |     |         uint256,
 269 |     |         uint256,
 270 |     |         uint160
 271 |     |     ) {
 272 |     |         SwapCache memory cache;
 273 |     |         cache.state = globalState;
 274 |     |         cache.constants = immutables();
 275 |     |         return QuoteCall.perform(
 276 |     |             ticks,
 277 |     |             rangeTickMap,
 278 |     |             limitTickMap,
 279 |     |             params,
 280 |     |             cache
 281 |     |         );
 282 |     |     }
 283 |     | 
 284 |     |     function increaseSampleLength(
 285 |     |         uint16 sampleLengthNext
 286 |     |     ) external override
 287 |     |         nonReentrant(globalState)
 288 |     |         canoncialOnly 
 289 |     |     {
 290 |     |         globalState.pool = Samples.expand(
 291 |     |             samples,
 292 |     |             globalState.pool,
 293 |     |             sampleLengthNext
 294 |     |         );
 295 |     |     }
 296 |     | 
 297 |     |     function fees(
 298 |     |         uint16 protocolFee0,
 299 |     |         uint16 protocolFee1,
 300 |     |         bool setFees
 301 |     |     ) external override
 302 |     |         ownerOnly
 303 |     |         nonReentrant(globalState)
 304 |     |         canoncialOnly 
 305 |     |     returns (
 306 |     |         uint128 token0Fees,
 307 |     |         uint128 token1Fees
 308 |     |     ) {
 309 |     | 
 310 |     |         if (setFees) {
 311 |     |             if (protocolFee0 > 10000 || protocolFee1 > 10000)
 312 |     |                 revert ProtocolFeeCeilingExceeded();
 313 |     |             globalState.pool1.protocolFee = protocolFee0;
 314 |     |             globalState.pool0.protocolFee = protocolFee1;
 315 |     |         }
 316 |     |         address feeTo = ILimitPoolManager(owner()).feeTo();
 317 |     |         token0Fees = globalState.pool1.protocolFees;
 318 |     |         token1Fees = globalState.pool0.protocolFees;
 319 |     |         globalState.pool0.protocolFees = 0;
 320 |     |         globalState.pool1.protocolFees = 0;
 321 |     |         if (token0Fees > 0)
 322 |     |             SafeTransfers.transferOut(feeTo, token0(), token0Fees);
 323 |     |         if (token1Fees > 0)
 324 |     |             SafeTransfers.transferOut(feeTo, token1(), token1Fees);
 325 |     |     }
 326 |     | 
 327 |     |     function immutables() public view returns (
 328 |     |         PoolsharkStructs.Immutables memory
 329 |     |     ) {
 330 |     |         return Immutables(
 331 |     |             owner(),
 332 |     |             factory,
 333 |     |             PriceBounds(minPrice(), maxPrice()),
 334 |     |             token0(),
 335 |     |             token1(),
 336 |     |             poolToken(),
 337 |     |             tickSpacing(),
 338 |     |             swapFee()
 339 |     |         );
 340 |     |     }
 341 |     | 
 342 |     |     function priceBounds(int16 tickSpacing) external pure returns (uint160, uint160) {
 343 |     |         return ConstantProduct.priceBounds(tickSpacing);
 344 |     |     }
 345 |     | 
 346 |     |     function _onlyOwner() private view {
 347 |     |         if (msg.sender != owner()) revert OwnerOnly();
 348 |     |     }
 349 |     | 
 350 |     |     function _onlyCanoncialClones() private view {
 351 |     |         // compute pool key
 352 |     |         bytes32 key = keccak256(abi.encode(original, token0(), token1(), swapFee()));
 353 |     |         
 354 |     |         // compute canonical pool address
 355 |     |         address predictedAddress = LibClone.predictDeterministicAddress(
 356 |     |             original,
 357 |     |             abi.encodePacked(
 358 |     |                 owner(),
 359 |     |                 token0(),
 360 |     |                 token1(),
 361 |     |                 poolToken(),
 362 |     |                 minPrice(),
 363 |     |                 maxPrice(),
 364 |     |                 tickSpacing(),
 365 |     |                 swapFee()
 366 |     |             ),
 367 |     |             key,
 368 |     |             factory
 369 |     |         );
 370 |     |         // only allow delegateCall from canonical clones
 371 |     |         // if (address(this) != predictedAddress) require(false, 'NoDelegateCall()');
 372 |     |     }
 373 |     | 
 374 |     |     function _onlyFactory() private view {
 375 |     |         if (msg.sender != factory) revert FactoryOnly();
 376 |     |     }
 377 |     | }
 378 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/LimitPoolFactory.sol
   1 |     | // SPDX-License-Identifier: BUSL-1.1
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | import './LimitPool.sol';
   5 |     | import './interfaces/limit/ILimitPoolFactory.sol';
   6 |     | import './base/events/LimitPoolFactoryEvents.sol';
   7 |     | import './base/structs/PoolsharkStructs.sol';
   8 |     | import './utils/LimitPoolErrors.sol';
   9 |     | import './libraries/solady/LibClone.sol';
  10 |     | import './libraries/math/ConstantProduct.sol';
  11 |     | 
  12 |     | contract LimitPoolFactory is 
  13 |     |     ILimitPoolFactory,
  14 |     |     PoolsharkStructs,
  15 |     |     LimitPoolFactoryEvents,
  16 |     |     LimitPoolFactoryErrors
  17 |     | {
  18 |     |     using LibClone for address;
  19 |     | 
  20 |     | event Debug(uint a);
  21 |     | event DebugTick(int24 a);
  22 |     |     address immutable public owner;
  23 |     |     address immutable public original;
  24 |     | 
  25 |     |     constructor(
  26 |     |         address owner_
  27 |     |     ) {
  28 |     |         owner = owner_;
  29 |     |         original = address(this);
  30 |     |     }
  31 |     | 
  32 |     |     function createLimitPool(
  33 |     |         bytes32 poolType,
  34 |     |         address tokenIn,
  35 |     |         address tokenOut,
  36 |     |         uint16  swapFee,
  37 |     |         uint160 startPrice
  38 |     |     ) external override returns (
  39 |     |         address pool,
  40 |     |         address poolToken
  41 |     |     ) {
  42 |     |         emit Debug(1);
  43 |     | 
  44 |     |         // validate token pair
  45 |     |         if (tokenIn == tokenOut || tokenIn == address(0) || tokenOut == address(0)) {
  46 |     |             revert InvalidTokenAddress();
  47 |     |         }
  48 |     | 
  49 |     |         // sort tokens by address
  50 |     |         Immutables memory constants;
  51 |     |         (constants.token0, constants.token1) = tokenIn < tokenOut ? (tokenIn,  tokenOut) 
  52 |     |                                                                   : (tokenOut, tokenIn);
  53 |     | 
  54 |     |         // check if tick spacing supported
  55 |     |         constants.swapFee = swapFee;
  56 |     |         constants.tickSpacing = ILimitPoolManager(owner).feeTiers(swapFee);
  57 |     |         emit Debug(21);
  58 |     | 
  59 |     |         if (constants.tickSpacing == 0) revert FeeTierNotSupported();
  60 |     |         emit Debug(11);
  61 |     | 
  62 |     |         // check if pool type supported
  63 |     |         (
  64 |     |             address poolImpl,
  65 |     |             address tokenImpl
  66 |     |          ) = ILimitPoolManager(owner).implementations(poolType);
  67 |     |         if (poolImpl == address(0) || tokenImpl == address(0)) revert PoolTypeNotSupported();
  68 |     | 
  69 |     |         // generate key for pool
  70 |     |         bytes32 key = keccak256(abi.encode(
  71 |     |             poolImpl,
  72 |     |             constants.token0,
  73 |     |             constants.token1,
  74 |     |             constants.swapFee
  75 |     |         ));
  76 |     | 
  77 |     |         // check if pool already exists
  78 |     |         if (limitPools[key] != address(0)) revert PoolAlreadyExists();
  79 |     | 
  80 |     |         // set immutables
  81 |     |         constants.owner = owner;
  82 |     |         constants.factory = original;
  83 |     |         (
  84 |     |             constants.bounds.min,
  85 |     |             constants.bounds.max
  86 |     |         ) = ILimitPool(poolImpl).priceBounds(constants.tickSpacing);
  87 |     |         emit Debug(2);
  88 |     |         // calculate token address
  89 |     | 
  90 |     |         // pass this address into a clone of RangePoolERC1155
  91 |     | 
  92 |     |         // take that ERC1155 contract address and pass that into pool
  93 |     |         // launch pool token
  94 |     |         constants.poolToken = tokenImpl.cloneDeterministic({
  95 |     |             salt: key,
  96 |     |             data: abi.encodePacked(
  97 |     |                 poolImpl
  98 |     |             )
  99 |     |         });
 100 |     | 
 101 |     |         // launch pool
 102 |     |         pool = poolImpl.cloneDeterministic({
 103 |     |             salt: key,
 104 |     |             data: abi.encodePacked(
 105 |     |                 constants.owner,
 106 |     |                 constants.token0,
 107 |     |                 constants.token1,
 108 |     |                 constants.poolToken,
 109 |     |                 constants.bounds.min,
 110 |     |                 constants.bounds.max,
 111 |     |                 constants.tickSpacing,
 112 |     |                 constants.swapFee
 113 |     |             )
 114 |     |         });
 115 |     | 
 116 |     |         // initialize pool storage
 117 |     |         ILimitPool(pool).initialize(startPrice);
 118 |     | 
 119 |     |         // save pool in mapping
 120 |     |         limitPools[key] = pool;
 121 |     | 
 122 |     |         emit PoolCreated(
 123 |     |             pool,
 124 |     |             poolToken,
 125 |     |             poolImpl,
 126 |     |             tokenImpl,
 127 |     |             constants.token0,
 128 |     |             constants.token1,
 129 |     |             constants.swapFee,
 130 |     |             constants.tickSpacing
 131 |     |         );
 132 |     | 
 133 |     |         return (pool, constants.poolToken);
 134 |     |     }
 135 |     | 
 136 |     |     function getLimitPool(
 137 |     |         bytes32 poolType,
 138 |     |         address tokenIn,
 139 |     |         address tokenOut,
 140 |     |         uint16 swapFee
 141 |     |     ) external view override returns (
 142 |     |         address pool,
 143 |     |         address poolToken
 144 |     |     ) {
 145 |     |         // set lexographical token address ordering
 146 |     |         address token0 = tokenIn < tokenOut ? tokenIn : tokenOut;
 147 |     |         address token1 = tokenIn < tokenOut ? tokenOut : tokenIn;
 148 |     | 
 149 |     |         // check if tick spacing supported
 150 |     |         int16 tickSpacing = ILimitPoolManager(owner).feeTiers(swapFee);
 151 |     |         if (tickSpacing == 0) revert FeeTierNotSupported();
 152 |     | 
 153 |     |         // check if pool type supported
 154 |     |         (
 155 |     |             address poolImpl,
 156 |     |             address tokenImpl
 157 |     |          ) = ILimitPoolManager(owner).implementations(poolType);
 158 |     |         if (poolImpl == address(0) || tokenImpl == address(0)) revert PoolTypeNotSupported();
 159 |     | 
 160 |     |         // generate key for pool
 161 |     |         bytes32 key = keccak256(abi.encode(
 162 |     |             poolImpl,
 163 |     |             token0,
 164 |     |             token1,
 165 |     |             swapFee
 166 |     |         ));
 167 |     | 
 168 |     |         pool = limitPools[key];
 169 |     | 
 170 |     |         poolToken = LibClone.predictDeterministicAddress(
 171 |     |             tokenImpl,
 172 |     |             abi.encodePacked(
 173 |     |                 poolImpl
 174 |     |             ),
 175 |     |             key,
 176 |     |             address(this)
 177 |     |         );
 178 |     | 
 179 |     |         return (pool, poolToken);
 180 |     |     }
 181 |     | }
 182 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/base/events/LimitPoolEvents.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0-or-later
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | abstract contract LimitPoolEvents {
  5 |     |     event Initialize(
  6 |     |         int24 minTick,
  7 |     |         int24 maxTick,
  8 |     |         uint160 startPrice,
  9 |     |         int24 startTick
 10 |     |     );
 11 |     | 
 12 |     |     event Sync(
 13 |     |         uint160 price,
 14 |     |         uint128 liquidity
 15 |     |     );
 16 |     | 
 17 |     |     event MintLimit(
 18 |     |         address indexed to,
 19 |     |         int24 lower,
 20 |     |         int24 upper,
 21 |     |         bool zeroForOne,
 22 |     |         uint32 epochLast,
 23 |     |         uint128 amountIn,
 24 |     |         uint128 amountFilled,
 25 |     |         uint128 liquidityMinted,
 26 |     |         uint128 poolLiquidity,
 27 |     |         uint160 poolPrice
 28 |     |     );
 29 |     | 
 30 |     |     event BurnLimit(
 31 |     |         address indexed to,
 32 |     |         int24 lower,
 33 |     |         int24 upper,
 34 |     |         int24 claim,
 35 |     |         bool zeroForOne,
 36 |     |         uint128 liquidityBurned,
 37 |     |         uint128 tokenInClaimed,
 38 |     |         uint128 tokenOutBurned
 39 |     |     );
 40 |     | 
 41 |     |     event Swap(
 42 |     |         address indexed recipient,
 43 |     |         bool zeroForOne,
 44 |     |         uint256 amountIn,
 45 |     |         uint256 amountOut,
 46 |     |         uint160 price,
 47 |     |         uint128 liquidity,
 48 |     |         int24 tickAtPrice
 49 |     |     );
 50 |     | }
 51 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/base/events/LimitPoolFactoryEvents.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0-or-later
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | abstract contract LimitPoolFactoryEvents {
  5 |     |     event PoolCreated(
  6 |     |         address pool,
  7 |     |         address token,
  8 |     |         address poolImpl,
  9 |     |         address tokenImpl,
 10 |     |         address indexed token0,
 11 |     |         address indexed token1,
 12 |     |         uint16 indexed swapFee,
 13 |     |         int16 tickSpacing
 14 |     |     );
 15 |     | }
 16 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/base/events/LimitPoolManagerEvents.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0-or-later
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | abstract contract LimitPoolManagerEvents {
  5 |     |     event FactoryChanged(address indexed previousFactory, address indexed newFactory);
  6 |     |     event ImplementationEnabled(
  7 |     |         bytes32 key,
  8 |     |         address poolImpl,
  9 |     |         address tokenImpl
 10 |     |     );
 11 |     |     event FeeTierEnabled(
 12 |     |         uint16 swapFee,
 13 |     |         int16 tickSpacing
 14 |     |     );
 15 |     |     event FeeToTransfer(address indexed previousFeeTo, address indexed newFeeTo);
 16 |     |     event OwnerTransfer(address indexed previousOwner, address indexed newOwner);
 17 |     |     event ProtocolFeesModified(
 18 |     |         address[] modifyPools,
 19 |     |         uint16[] syncFees,
 20 |     |         uint16[] fillFees,
 21 |     |         bool[] setFees,
 22 |     |         uint128[] token0Fees,
 23 |     |         uint128[] token1Fees
 24 |     |     );
 25 |     |     event ProtocolFeesCollected(
 26 |     |         address[] collectPools,
 27 |     |         uint128[] token0Fees,
 28 |     |         uint128[] token1Fees
 29 |     |     );
 30 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/base/storage/LimitPoolFactoryStorage.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | abstract contract LimitPoolFactoryStorage {
  5 |     |     mapping(bytes32 => address) public limitPools;
  6 |     | }
  7 |     | 
  8 |     | 
  9 |     | 
 10 |     | 
 11 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/base/storage/LimitPoolImmutables.sol
  1 |     | // SPDX-License-Identifier: BSD
  2 |     | pragma solidity ^0.8.4;
  3 |     | 
  4 |     | import { Clone } from "../../libraries/solady/Clone.sol";
  5 |     | 
  6 |     | contract LimitPoolImmutables is Clone {
  7 |     |     function owner() public pure returns (address) {
  8 |     |         return _getArgAddress(0);
  9 |     |     }
 10 |     | 
 11 |     |     function token0() public pure returns (address) {
 12 |     |         return _getArgAddress(20);
 13 |     |     }
 14 |     | 
 15 |     |     function token1() public pure returns (address) {
 16 |     |         return _getArgAddress(40);
 17 |     |     }
 18 |     | 
 19 |     |     function poolToken() public pure returns (address) {
 20 |     |         return _getArgAddress(60);
 21 |     |     }
 22 |     | 
 23 |     |     function minPrice() public pure returns (uint160) {
 24 |     |         return _getArgUint160(80);
 25 |     |     }
 26 |     | 
 27 |     |     function maxPrice() public pure returns (uint160) {
 28 |     |         return _getArgUint160(100);
 29 |     |     }
 30 |     | 
 31 |     |     function tickSpacing() public pure returns (int16) {
 32 |     |         return int16(_getArgUint16(120));
 33 |     |     }
 34 |     | 
 35 |     |     function swapFee() public pure returns (uint16) {
 36 |     |         return _getArgUint16(122);
 37 |     |     }
 38 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/base/storage/LimitPoolStorage.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | import '../../interfaces/range/IRangePoolStructs.sol';
  5 |     | import '../../interfaces/limit/ILimitPoolStructs.sol';
  6 |     | import '../../interfaces/limit/ILimitPoolFactory.sol';
  7 |     | import '../../utils/LimitPoolErrors.sol';
  8 |     | 
  9 |     | abstract contract LimitPoolStorage is ILimitPoolStructs, IRangePoolStructs, LimitPoolErrors {
 10 |     |     GlobalState public globalState;
 11 |     |     TickMap public rangeTickMap;
 12 |     |     TickMap public limitTickMap;
 13 |     |     address public feeTo;
 14 |     |     Sample[65535] public samples;
 15 |     |     mapping(int24 => Tick) public ticks;
 16 |     |     mapping(int24 => mapping(int24 => Position)) public positions; /// @dev - positions owned by the pool
 17 |     |     mapping(address => mapping(int24 => mapping(int24 => LimitPosition))) public positions0; //positions with token0 deposited
 18 |     |     mapping(address => mapping(int24 => mapping(int24 => LimitPosition))) public positions1; //positions with token1 deposited
 19 |     | }
 20 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/base/storage/RangePoolERC1155Immutables.sol
  1 |     | // SPDX-License-Identifier: BSD
  2 |     | pragma solidity ^0.8.4;
  3 |     | 
  4 |     | import { Clone } from "../../libraries/solady/Clone.sol";
  5 |     | 
  6 |     | contract RangePoolERC1155Immutables is Clone {
  7 |     |     function poolImpl() public pure returns (address) {
  8 |     |         return _getArgAddress(0);
  9 |     |     }
 10 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/base/structs/LimitPoolFactoryStructs.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | abstract contract LimitPoolFactoryStructs {
  5 |     |     struct LimitPoolParams {
  6 |     |         address owner;
  7 |     |         address token0;
  8 |     |         address token1;
  9 |     |         uint160 minPrice;
 10 |     |         uint160 maxPrice;
 11 |     |         uint160 startPrice;
 12 |     |         int16   tickSpacing;
 13 |     |     }
 14 |     | }
 15 |     | 
 16 |     | 
 17 |     | 
 18 |     | 
 19 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/base/structs/PoolsharkStructs.sol
   1 |     | // SPDX-License-Identifier: GPLv3
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | interface PoolsharkStructs {
   5 |     | 
   6 |     |     struct GlobalState {
   7 |     |         RangePoolState pool;
   8 |     |         LimitPoolState pool0;
   9 |     |         LimitPoolState pool1;
  10 |     |         uint128 liquidityGlobal;
  11 |     |         uint32 epoch;
  12 |     |         uint8 unlocked;
  13 |     |     }
  14 |     | 
  15 |     |     struct LimitPoolState {
  16 |     |         uint160 price; /// @dev Starting price current
  17 |     |         uint128 liquidity; /// @dev Liquidity currently active
  18 |     |         uint128 protocolFees;
  19 |     |         uint16 protocolFee;
  20 |     |         int24 tickAtPrice;
  21 |     |     }
  22 |     | 
  23 |     |     struct RangePoolState {
  24 |     |         SampleState  samples;
  25 |     |         uint200 feeGrowthGlobal0;
  26 |     |         uint200 feeGrowthGlobal1;
  27 |     |         uint160 secondsPerLiquidityAccum;
  28 |     |         uint160 price;               /// @dev Starting price current
  29 |     |         uint128 liquidity;           /// @dev Liquidity currently active
  30 |     |         int56   tickSecondsAccum;
  31 |     |         int24   tickAtPrice;
  32 |     |     }
  33 |     | 
  34 |     |     struct Tick {
  35 |     |         RangeTick range;
  36 |     |         LimitTick limit;
  37 |     |     }
  38 |     | 
  39 |     |     struct LimitTick {
  40 |     |         uint160 priceAt;
  41 |     |         int128 liquidityDelta;
  42 |     |         uint128 liquidityAbsolute;
  43 |     |     }
  44 |     | 
  45 |     |     struct RangeTick {
  46 |     |         uint200 feeGrowthOutside0;
  47 |     |         uint200 feeGrowthOutside1;
  48 |     |         uint160 secondsPerLiquidityAccumOutside;
  49 |     |         int56 tickSecondsAccumOutside;
  50 |     |         int128 liquidityDelta;
  51 |     |         uint128 liquidityAbsolute;
  52 |     |     }
  53 |     | 
  54 |     |     struct Sample {
  55 |     |         uint32  blockTimestamp;
  56 |     |         int56   tickSecondsAccum;
  57 |     |         uint160 secondsPerLiquidityAccum;
  58 |     |     }
  59 |     | 
  60 |     |     struct SampleState {
  61 |     |         uint16  index;
  62 |     |         uint16  length;
  63 |     |         uint16  lengthNext;
  64 |     |     }
  65 |     | 
  66 |     |     struct SwapParams {
  67 |     |         address to;
  68 |     |         uint160 priceLimit;
  69 |     |         uint128  amount;
  70 |     |         bool exactIn;
  71 |     |         bool zeroForOne;
  72 |     |         bytes callbackData;
  73 |     |     }
  74 |     | 
  75 |     |     struct QuoteParams {
  76 |     |         uint160 priceLimit;
  77 |     |         uint128 amount;
  78 |     |         bool exactIn;
  79 |     |         bool zeroForOne;
  80 |     |     }
  81 |     |     
  82 |     |     struct Immutables {
  83 |     |         address owner;
  84 |     |         address factory;
  85 |     |         PriceBounds bounds;
  86 |     |         address token0;
  87 |     |         address token1;
  88 |     |         address poolToken;
  89 |     |         int16 tickSpacing;
  90 |     |         uint16 swapFee;
  91 |     |     }
  92 |     | 
  93 |     |     struct PriceBounds {
  94 |     |         uint160 min;
  95 |     |         uint160 max;
  96 |     |     }
  97 |     | 
  98 |     |     struct TickMap {
  99 |     |         uint256 blocks;                     /// @dev - sets of words
 100 |     |         mapping(uint256 => uint256) words;  /// @dev - sets to words
 101 |     |         mapping(uint256 => uint256) ticks;  /// @dev - words to ticks
 102 |     |         mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))) epochs0; /// @dev - ticks to epochs
 103 |     |         mapping(uint256 => mapping(uint256 => mapping(uint256 => uint256))) epochs1; /// @dev - ticks to epochs
 104 |     |         //TODO: epochs0 and epochs1; zeroForOne param for EpochMap.get/set
 105 |     |     }
 106 |     | 
 107 |     |     struct SwapCache {
 108 |     |         GlobalState state;
 109 |     |         PoolsharkStructs.Immutables constants;
 110 |     |         uint256 price;
 111 |     |         uint256 liquidity;
 112 |     |         uint256 amountLeft;
 113 |     |         uint256 input;
 114 |     |         uint256 output;
 115 |     |         uint160 crossPrice;
 116 |     |         uint160 secondsPerLiquidityAccum;
 117 |     |         uint128 feeAmount;
 118 |     |         int56   tickSecondsAccum;
 119 |     |         int24   crossTick;
 120 |     |         uint8   crossStatus;
 121 |     |         bool    limitActive;
 122 |     |         bool    exactIn;
 123 |     |         bool    cross;
 124 |     |     }
 125 |     | 
 126 |     |     // struct CrossState {
 127 |     |     //     int24   tickAhead;
 128 |     |     //     bool    limitPoolAhead;
 129 |     |     //     bool    active;
 130 |     |     // }    
 131 |     | 
 132 |     |     enum CrossStatus {
 133 |     |         RANGE,
 134 |     |         LIMIT,
 135 |     |         BOTH
 136 |     |     }
 137 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/external/openzeppelin/security/ReentrancyGuard.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | // OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)
  3 |     | 
  4 |     | pragma solidity 0.8.13;
  5 |     | 
  6 |     | import '../../../base/structs/PoolsharkStructs.sol';
  7 |     | 
  8 |     | /**
  9 |     |  * @dev Contract module that helps prevent reentrant calls to a function.
 10 |     |  *
 11 |     |  * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 12 |     |  * available, which can be applied to functions to make sure there are no nested
 13 |     |  * (reentrant) calls to them.
 14 |     |  *
 15 |     |  * Note that because there is a single `nonReentrant` guard, functions marked as
 16 |     |  * `nonReentrant` may not call one another. This can be worked around by making
 17 |     |  * those functions `private`, and then adding `external` `nonReentrant` entry
 18 |     |  * points to them.
 19 |     |  *
 20 |     |  * TIP: If you would like to learn more about reentrancy and alternative ways
 21 |     |  * to protect against it, check out our blog post
 22 |     |  * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 23 |     |  */
 24 |     | abstract contract ReentrancyGuard is PoolsharkStructs {
 25 |     |     // Booleans are more expensive than uint256 or any type that takes up a full
 26 |     |     // word because each write operation emits an extra SLOAD to first read the
 27 |     |     // slot's contents, replace the bits taken up by the boolean, and then write
 28 |     |     // back. This is the compiler's defense against contract upgrades and
 29 |     |     // pointer aliasing, and it cannot be disabled.
 30 |     | 
 31 |     |     // The values being non-zero value makes deployment a bit more expensive,
 32 |     |     // but in exchange the refund on every call to nonReentrant will be lower in
 33 |     |     // amount. Since refunds are capped to a percentage of the total
 34 |     |     // transaction's gas, it is best to keep them low in cases like this one, to
 35 |     |     // increase the likelihood of the full refund coming into effect.
 36 |     |     uint8 private constant _NOT_ENTERED = 1;
 37 |     |     uint8 private constant _ENTERED = 2;
 38 |     | 
 39 |     |     /**
 40 |     |      * @dev Unauthorized reentrant call.
 41 |     |      */
 42 |     |     error ReentrancyGuardReentrantCall();
 43 |     | 
 44 |     |     /**
 45 |     |      * @dev Reentrant state invalid.
 46 |     |      */
 47 |     |     error ReentrancyGuardInvalidState();
 48 |     | 
 49 |     |     /**
 50 |     |      * @dev Prevents a contract from calling itself, directly or indirectly.
 51 |     |      * Calling a `nonReentrant` function from another `nonReentrant`
 52 |     |      * function is not supported. It is possible to prevent this from happening
 53 |     |      * by making the `nonReentrant` function external, and making it call a
 54 |     |      * `private` function that does the actual work.
 55 |     |      */
 56 |     |     modifier nonReentrant(GlobalState storage state) {
 57 |     |         _nonReentrantBefore(state);
 58 |     |         _;
 59 |     |         _nonReentrantAfter(state);
 60 |     |     }
 61 |     | 
 62 |     |     function _nonReentrantBefore(GlobalState storage state) private {
 63 |     |         // On the first call to nonReentrant, _status will be _NOT_ENTERED
 64 |     |         if (state.unlocked == _ENTERED) {
 65 |     |             revert ReentrancyGuardReentrantCall();
 66 |     |         }
 67 |     | 
 68 |     |         // Any calls to nonReentrant after this point will fail
 69 |     |         state.unlocked = _ENTERED;
 70 |     |     }
 71 |     | 
 72 |     |     function _nonReentrantAfter(GlobalState storage state) private {
 73 |     |         if (state.unlocked != _ENTERED) revert ReentrancyGuardInvalidState();
 74 |     |         // By storing the original value once again, a refund is triggered (see
 75 |     |         // https://eips.ethereum.org/EIPS/eip-2200)
 76 |     |         state.unlocked = _NOT_ENTERED;
 77 |     |     }
 78 |     | 
 79 |     |     /**
 80 |     |      * @dev Returns true if the reentrancy guard is currently set to "entered", which indicates there is a
 81 |     |      * `nonReentrant` function in the call stack.
 82 |     |      */
 83 |     |     function _reentrancyGuardEntered(GlobalState storage state) internal view returns (bool) {
 84 |     |         return state.unlocked == _ENTERED;
 85 |     |     }
 86 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/interfaces/IERC20Minimal.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | interface IERC20Minimal {
  5 |     |     /// @notice Returns the balance of a token
  6 |     |     /// @param account The address for which to look up the balance for
  7 |     |     /// @return amount of tokens held by the account
  8 |     |     function balanceOf(address account) external view returns (uint256);
  9 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/interfaces/IPool.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0-or-later
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | import '../base/structs/PoolsharkStructs.sol';
  5 |     | 
  6 |     | interface IPool is PoolsharkStructs {
  7 |     |     function immutables() external view returns (Immutables memory);
  8 |     |     
  9 |     |     function swap(
 10 |     |         SwapParams memory params
 11 |     |     ) external returns (
 12 |     |         int256 amount0,
 13 |     |         int256 amount1
 14 |     |     );
 15 |     | 
 16 |     |     function quote(
 17 |     |         QuoteParams memory params
 18 |     |     ) external view returns (
 19 |     |         uint256 inAmount,
 20 |     |         uint256 outAmount,
 21 |     |         uint160 priceAfter
 22 |     |     );
 23 |     | 
 24 |     |     function fees(
 25 |     |         uint16 protocolFee0,
 26 |     |         uint16 protocolFee1,
 27 |     |         bool setFees
 28 |     |     ) external returns (
 29 |     |         uint128 token0Fees,
 30 |     |         uint128 token1Fees
 31 |     |     );
 32 |     | 
 33 |     |     function globalState() external view returns (
 34 |     |         RangePoolState memory pool,
 35 |     |         LimitPoolState memory pool0,
 36 |     |         LimitPoolState memory pool1,
 37 |     |         uint128 liquidityGlobal,
 38 |     |         uint32 epoch,
 39 |     |         uint8 unlocked
 40 |     |     );
 41 |     | 
 42 |     |     function samples(uint256) external view returns (
 43 |     |         uint32,
 44 |     |         int56,
 45 |     |         uint160
 46 |     |     );
 47 |     | 
 48 |     |     function ticks(int24) external view returns (
 49 |     |         RangeTick memory,
 50 |     |         LimitTick memory
 51 |     |     );
 52 |     | 
 53 |     |     function positions(int24, int24) external view returns (
 54 |     |         uint128,
 55 |     |         uint128,
 56 |     |         uint128,
 57 |     |         uint256,
 58 |     |         uint256
 59 |     |     );
 60 |     | }
 61 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/interfaces/callbacks/IPoolsharkSwapCallback.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0-or-later
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | /// @title Callback for swaps
  5 |     | /// @notice Any contract that calls the `swap` function must implement this interface.
  6 |     | interface IPoolsharkSwapCallback {
  7 |     |     /// @notice Called to `msg.sender` after executing a swap.
  8 |     |     /// @dev In the implementation you must pay the pool tokens owed for the swap.
  9 |     |     /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.
 10 |     |     /// @param amount0Delta The amount of token0 either received by (positive) or sent from (negative) the user.
 11 |     |     /// @param amount1Delta The amount of token1 either received by (positive) or sent from (negative) the user.
 12 |     |     function poolsharkSwapCallback(
 13 |     |         int256 amount0Delta,
 14 |     |         int256 amount1Delta,
 15 |     |         bytes calldata data
 16 |     |     ) external;
 17 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/interfaces/limit/ILimitPool.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0-or-later
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | import './ILimitPoolStructs.sol';
  5 |     | import '../../base/structs/LimitPoolFactoryStructs.sol';
  6 |     | 
  7 |     | interface ILimitPool is ILimitPoolStructs {
  8 |     |     function initialize(
  9 |     |         uint160 startPrice
 10 |     |     ) external;
 11 |     | 
 12 |     |     function mintLimit(
 13 |     |         MintLimitParams memory params
 14 |     |     ) external;
 15 |     | 
 16 |     |     function burnLimit(
 17 |     |         BurnLimitParams memory params
 18 |     |     ) external;
 19 |     | 
 20 |     |     function fees(
 21 |     |         uint16 protocolFee0,
 22 |     |         uint16 protocolFee1,
 23 |     |         bool setFees
 24 |     |     ) external returns (
 25 |     |         uint128 token0Fees,
 26 |     |         uint128 token1Fees
 27 |     |     );
 28 |     | 
 29 |     |     function priceBounds(
 30 |     |         int16 tickSpacing
 31 |     |     ) external pure returns (
 32 |     |         uint160 minPrice,
 33 |     |         uint160 maxPrice
 34 |     |     );
 35 |     | }
 36 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/interfaces/limit/ILimitPoolFactory.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity 0.8.13;
  3 |     | import '../../base/storage/LimitPoolFactoryStorage.sol';
  4 |     | 
  5 |     | abstract contract ILimitPoolFactory is LimitPoolFactoryStorage {
  6 |     |     function createLimitPool(
  7 |     |         bytes32 poolType,
  8 |     |         address tokenIn,
  9 |     |         address tokenOut,
 10 |     |         uint16  swapFee,
 11 |     |         uint160 startPrice
 12 |     |     ) external virtual returns (
 13 |     |         address pool,
 14 |     |         address poolToken
 15 |     |     );
 16 |     | 
 17 |     |     function getLimitPool(
 18 |     |         bytes32 poolType,
 19 |     |         address tokenIn,
 20 |     |         address tokenOut,
 21 |     |         uint16  swapFee
 22 |     |     ) external view virtual returns (
 23 |     |         address pool,
 24 |     |         address poolToken
 25 |     |     );
 26 |     | }
 27 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/interfaces/limit/ILimitPoolManager.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0-or-later
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | /// @notice LimitPoolManager interface
  5 |     | interface ILimitPoolManager {
  6 |     |     function owner() external view returns (address);
  7 |     |     function feeTo() external view returns (address);
  8 |     |     function implementations(
  9 |     |         bytes32 poolType
 10 |     |     ) external view returns (
 11 |     |         address poolImpl,
 12 |     |         address tokenImpl
 13 |     |     );
 14 |     |     function feeTiers(
 15 |     |         uint16 swapFee
 16 |     |     ) external view returns (
 17 |     |         int16 tickSpacing
 18 |     |     );
 19 |     | }
 20 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/interfaces/limit/ILimitPoolStructs.sol
   1 |     | // SPDX-License-Identifier: BUSL-1.1
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | import '../../base/structs/PoolsharkStructs.sol';
   5 |     | 
   6 |     | interface ILimitPoolStructs is PoolsharkStructs {
   7 |     | 
   8 |     |     struct LimitPosition {
   9 |     |         uint128 amountIn; // token amount already claimed; balance
  10 |     |         uint128 amountOut; // necessary for non-custodial positions
  11 |     |         uint128 liquidity; // expected amount to be used not actual
  12 |     |         uint32 epochLast;  // epoch when this position was created at
  13 |     |         bool crossedInto; // whether the position was crossed into already
  14 |     |     }
  15 |     | 
  16 |     |     struct MintLimitParams {
  17 |     |         address to;
  18 |     |         uint128 amount;
  19 |     |         uint96 mintPercent;
  20 |     |         int24 lower;
  21 |     |         int24 upper;
  22 |     |         bool zeroForOne;
  23 |     |     }
  24 |     | 
  25 |     |     struct BurnLimitParams {
  26 |     |         address to;
  27 |     |         uint128 burnPercent;
  28 |     |         int24 lower;
  29 |     |         int24 claim;
  30 |     |         int24 upper;
  31 |     |         bool zeroForOne;
  32 |     |     }
  33 |     | 
  34 |     |     struct SnapshotLimitParams {
  35 |     |         address owner;
  36 |     |         uint128 burnPercent;
  37 |     |         int24 lower;
  38 |     |         int24 upper;
  39 |     |         int24 claim;
  40 |     |         bool zeroForOne;
  41 |     |     }
  42 |     | 
  43 |     |     struct UpdateLimitParams {
  44 |     |         address owner;
  45 |     |         address to;
  46 |     |         uint128 amount;
  47 |     |         int24 lower;
  48 |     |         int24 upper;
  49 |     |         int24 claim;
  50 |     |         bool zeroForOne;
  51 |     |     }
  52 |     | 
  53 |     |     struct MintLimitCache {
  54 |     |         GlobalState state;
  55 |     |         LimitPosition position;
  56 |     |         Immutables constants;
  57 |     |         LimitPoolState pool;
  58 |     |         SwapCache swapCache;
  59 |     |         uint256 liquidityMinted;
  60 |     |         uint256 mintSize;
  61 |     |         uint256 priceLimit;
  62 |     |         int256 amountIn;
  63 |     |         uint256 amountOut;
  64 |     |         uint256 priceLower;
  65 |     |         uint256 priceUpper;
  66 |     |         int24 tickLimit;
  67 |     |     }
  68 |     | 
  69 |     |     struct BurnLimitCache {
  70 |     |         GlobalState state;
  71 |     |         LimitPosition position;
  72 |     |         PoolsharkStructs.Immutables constants;
  73 |     |     }
  74 |     | 
  75 |     |     struct UpdateCache {
  76 |     |         GlobalState state;
  77 |     |         LimitPoolState pool;
  78 |     |         LimitTick claimTick;
  79 |     |         LimitPosition position;
  80 |     |         uint160 priceLower;
  81 |     |         uint160 priceClaim;
  82 |     |         uint160 priceUpper;
  83 |     |         bool earlyReturn;
  84 |     |         bool removeLower;
  85 |     |         bool removeUpper;
  86 |     |     }
  87 |     | 
  88 |     |     struct InsertSingleLocals {
  89 |     |         int24 previousFullTick;
  90 |     |         int24 nextFullTick;
  91 |     |         uint256 priceNext;
  92 |     |         uint256 pricePrevious;
  93 |     |         uint256 amountInExact;
  94 |     |         uint256 amountOutExact;
  95 |     |         uint256 amountToCross;
  96 |     |     }
  97 |     | 
  98 |     |     struct GetDeltasLocals {
  99 |     |         int24 previousFullTick;
 100 |     |         uint256 pricePrevious;
 101 |     |         uint256 priceNext;
 102 |     |     }
 103 |     | }
 104 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/interfaces/range/IRangePool.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0-or-later
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | import './IRangePoolStructs.sol';
  5 |     | import './IRangePoolManager.sol';
  6 |     | 
  7 |     | interface IRangePool is IRangePoolStructs {
  8 |     |     function mint(
  9 |     |         MintParams memory mintParams
 10 |     |     ) external;
 11 |     | 
 12 |     |     function burn(
 13 |     |         BurnParams memory burnParams
 14 |     |     ) external;
 15 |     | 
 16 |     |     function swap(
 17 |     |         SwapParams memory params
 18 |     |     ) external returns (
 19 |     |         int256 amount0,
 20 |     |         int256 amount1
 21 |     |     );
 22 |     | 
 23 |     |     function quote(
 24 |     |         QuoteParams memory params
 25 |     |     ) external view returns (
 26 |     |         uint256 inAmount,
 27 |     |         uint256 outAmount,
 28 |     |         uint160 priceAfter
 29 |     |     );
 30 |     | 
 31 |     |     function increaseSampleLength(
 32 |     |         uint16 sampleLengthNext
 33 |     |     ) external;
 34 |     | }
 35 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/interfaces/range/IRangePoolERC1155.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | 
  3 |     | pragma solidity 0.8.13;
  4 |     | 
  5 |     | import '../../base/structs/PoolsharkStructs.sol';
  6 |     | import "@openzeppelin/contracts/utils/introspection/IERC165.sol";
  7 |     | 
  8 |     | interface IRangePoolERC1155 is IERC165, PoolsharkStructs {
  9 |     |     event TransferSingle(
 10 |     |         address indexed sender,
 11 |     |         address indexed from,
 12 |     |         address indexed to,
 13 |     |         uint256 id,
 14 |     |         uint256 amount
 15 |     |     );
 16 |     | 
 17 |     |     event TransferBatch(
 18 |     |         address indexed sender,
 19 |     |         address indexed from,
 20 |     |         address indexed to,
 21 |     |         uint256[] ids,
 22 |     |         uint256[] amounts
 23 |     |     );
 24 |     | 
 25 |     |     event ApprovalForAll(
 26 |     |         address indexed account,
 27 |     |         address indexed sender,
 28 |     |         bool approve
 29 |     |     );
 30 |     | 
 31 |     |     function name() external view returns (string memory);
 32 |     | 
 33 |     |     function symbol() external view returns (string memory);
 34 |     | 
 35 |     |     function balanceOf(address account, uint256 id) external view returns (uint256);
 36 |     | 
 37 |     |     function balanceOfBatch(
 38 |     |         address[] calldata accounts,
 39 |     |         uint256[] calldata ids
 40 |     |     ) external view returns (
 41 |     |         uint256[] memory batchBalances
 42 |     |     );
 43 |     | 
 44 |     |     function totalSupply(uint256 id) external view returns (uint256);
 45 |     | 
 46 |     |     function isApprovedForAll(address owner, address spender) external view returns (bool);
 47 |     | 
 48 |     |     function setApprovalForAll(address sender, bool approved) external;
 49 |     | 
 50 |     |     function mintFungible(
 51 |     |         address account,
 52 |     |         uint256 id,
 53 |     |         uint256 amount,
 54 |     |         PoolsharkStructs.Immutables memory constants
 55 |     |     ) external;
 56 |     | 
 57 |     |     function burnFungible(
 58 |     |         address account,
 59 |     |         uint256 id,
 60 |     |         uint256 amount,
 61 |     |         PoolsharkStructs.Immutables memory constants
 62 |     |     ) external;
 63 |     | 
 64 |     |     function safeTransferFrom(
 65 |     |         address from,
 66 |     |         address to,
 67 |     |         uint256 id,
 68 |     |         uint256 amount
 69 |     |     ) external;
 70 |     | 
 71 |     |     function safeBatchTransferFrom(
 72 |     |         address from,
 73 |     |         address to,
 74 |     |         uint256[] calldata id,
 75 |     |         uint256[] calldata amount
 76 |     |     ) external;
 77 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/interfaces/range/IRangePoolFactory.sol
  1 |     | // SPDX-License-Identifier: GPLv3
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | interface IRangePoolFactory {
  5 |     |     function createRangePool(
  6 |     |         address fromToken,
  7 |     |         address destToken,
  8 |     |         uint16 fee,
  9 |     |         uint160 startPrice
 10 |     |     ) external returns (address book);
 11 |     | 
 12 |     |     function getRangePool(
 13 |     |         address fromToken,
 14 |     |         address destToken,
 15 |     |         uint256 fee
 16 |     |     ) external view returns (address);
 17 |     | 
 18 |     |     function owner() external view returns(address);
 19 |     | }
 20 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/interfaces/range/IRangePoolManager.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0-or-later
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | import './IRangePoolStructs.sol';
  5 |     | import './IRangePoolERC1155.sol';
  6 |     | 
  7 |     | interface IRangePoolManager {
  8 |     |     function owner() external view returns (address);
  9 |     |     function feeTo() external view returns (address);
 10 |     |     function protocolFees(address pool) external view returns (uint16);
 11 |     |     function feeTiers(uint16 swapFee) external view returns (int24);
 12 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/interfaces/range/IRangePoolStructs.sol
   1 |     | // SPDX-License-Identifier: GPLv3
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | import "./IRangePoolERC1155.sol";
   5 |     | import '../../base/structs/PoolsharkStructs.sol';
   6 |     | 
   7 |     | interface IRangePoolStructs is PoolsharkStructs {
   8 |     | 
   9 |     |     struct Position {
  10 |     |         uint256 feeGrowthInside0Last;
  11 |     |         uint256 feeGrowthInside1Last;
  12 |     |         uint128 liquidity;
  13 |     |         uint128 amount0;
  14 |     |         uint128 amount1;
  15 |     |     }
  16 |     | 
  17 |     |     struct MintParams {
  18 |     |         address to;
  19 |     |         int24 lower;
  20 |     |         int24 upper;
  21 |     |         uint128 amount0;
  22 |     |         uint128 amount1;
  23 |     |     }
  24 |     | 
  25 |     |     struct BurnParams {
  26 |     |         address to;
  27 |     |         int24 lower;
  28 |     |         int24 upper;
  29 |     |         uint128 burnPercent;
  30 |     |     }
  31 |     | 
  32 |     |     struct SnapshotParams {
  33 |     |         address owner;
  34 |     |         int24 lower;
  35 |     |         int24 upper;
  36 |     |     }
  37 |     | 
  38 |     |     struct CompoundParams {
  39 |     |         int24 lower;
  40 |     |         int24 upper;
  41 |     |     }
  42 |     | 
  43 |     |     struct SampleParams {
  44 |     |         uint16 sampleIndex;
  45 |     |         uint16 sampleLength;
  46 |     |         uint32 time;
  47 |     |         uint32[] secondsAgo;
  48 |     |         int24 tick;
  49 |     |         uint128 liquidity;
  50 |     |         PoolsharkStructs.Immutables constants;
  51 |     |     }
  52 |     | 
  53 |     |     struct AddParams {
  54 |     |         GlobalState state;
  55 |     |         MintParams mint;
  56 |     |         uint128 amount;
  57 |     |         uint128 liquidity;
  58 |     |     }
  59 |     | 
  60 |     |     struct RemoveParams {
  61 |     |         uint128 amount0;
  62 |     |         uint128 amount1;
  63 |     |         uint128 tokenBurned;
  64 |     |         PoolsharkStructs.Immutables constants;
  65 |     |     }
  66 |     | 
  67 |     |     struct UpdateParams {
  68 |     |         int24 lower;
  69 |     |         int24 upper;
  70 |     |         uint128 burnPercent;
  71 |     |     }
  72 |     | 
  73 |     |     struct MintCache {
  74 |     |         GlobalState state;
  75 |     |         Position position;
  76 |     |         PoolsharkStructs.Immutables constants;
  77 |     |         uint256 liquidityMinted;
  78 |     |     }
  79 |     | 
  80 |     |     struct BurnCache {
  81 |     |         GlobalState state;
  82 |     |         Position position;
  83 |     |         PoolsharkStructs.Immutables constants;
  84 |     |         uint128 amount0;
  85 |     |         uint128 amount1;
  86 |     |         uint128 tokenBurned;
  87 |     |     }
  88 |     | 
  89 |     |     struct PositionCache {
  90 |     |         uint160 priceLower;
  91 |     |         uint160 priceUpper;
  92 |     |         uint256 liquidityOnPosition;
  93 |     |         uint256 liquidityAmount;
  94 |     |         uint256 totalSupply;
  95 |     |         uint256 tokenId;
  96 |     |     }
  97 |     | 
  98 |     |     struct UpdatePositionCache {
  99 |     |         uint256 totalSupply;
 100 |     |         uint256 tokenBurned;
 101 |     |         uint256 rangeFeeGrowth0;
 102 |     |         uint256 rangeFeeGrowth1;
 103 |     |         uint128 amountFees0;
 104 |     |         uint128 amountFees1;
 105 |     |         uint128 feesBurned0;
 106 |     |         uint128 feesBurned1;
 107 |     |     }
 108 |     | 
 109 |     |     struct SnapshotCache {
 110 |     |         int24   tick;
 111 |     |         uint160 price;
 112 |     |         uint32  blockTimestamp;
 113 |     |         uint32  secondsOutsideLower;
 114 |     |         uint32  secondsOutsideUpper;
 115 |     |         int56   tickSecondsAccum;
 116 |     |         int56   tickSecondsAccumLower;
 117 |     |         int56   tickSecondsAccumUpper;
 118 |     |         uint128 liquidity;
 119 |     |         uint160 secondsPerLiquidityAccum;
 120 |     |         uint160 secondsPerLiquidityAccumLower;
 121 |     |         uint160 secondsPerLiquidityAccumUpper;
 122 |     |         uint256 userBalance;
 123 |     |         uint256 totalSupply;
 124 |     |         Position position;
 125 |     |         SampleState samples;
 126 |     |         PoolsharkStructs.Immutables constants;
 127 |     |     }
 128 |     | }
 129 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/EchidnaAssertions.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | import '../interfaces/limit/ILimitPoolStructs.sol';
  5 |     | 
  6 |     | library EchidnaAssertions {
  7 |     | 
  8 |     |     event LiquidityGlobalUnderflow(uint128 liquidityGlobal, uint128 amount, string location);
  9 |     |     event LiquidityUnderflow(uint128 liquidity, uint128 amount, string location);
 10 |     |     event LiquidityUnlock(int128 liquidity);
 11 |     |     event PoolBalanceExceeded(uint256 poolBalance, uint256 outputAmount);
 12 |     |     event LiquidityDelta(int128 liquidityDelta);
 13 |     |     event WrongTickClaimedAt4(bool zeroForOne, int24 claimTickNext, int24 upper, int24 lower);
 14 |     |     event TickAtPriceDivisibleByTickSpacing(int24 tick, uint160 priceAt, int16 tickSpacing);
 15 |     | 
 16 |     |     function assertLiquidityGlobalUnderflows(uint128 liquidityGlobal, uint128 amount, string memory location) internal {
 17 |     |         emit LiquidityGlobalUnderflow(liquidityGlobal, amount, location);
 18 |     |         assert(liquidityGlobal >= amount);
 19 |     |     }
 20 |     | 
 21 |     |     function assertLiquidityUnderflows(uint128 liquidity, uint128 amount, string memory location) internal {
 22 |     |         emit LiquidityUnderflow(liquidity, amount, location);
 23 |     |         assert(liquidity >= amount);
 24 |     |     }
 25 |     | 
 26 |     |     function assertPositiveLiquidityOnUnlock(int128 liquidity) internal {
 27 |     |         emit LiquidityUnlock(liquidity);
 28 |     |         assert(liquidity >= 0);
 29 |     |     }
 30 |     | 
 31 |     |     function assertPoolBalanceExceeded(uint256 poolBalance, uint256 outputAmount) internal {
 32 |     |         emit PoolBalanceExceeded(poolBalance, outputAmount);
 33 |     |         assert(poolBalance >= outputAmount);
 34 |     |     }
 35 |     | 
 36 |     |     function assertWrongTickClaimedAt4(bool zeroForOne, int24 claimTickNext, int24 upper, int24 lower) internal {
 37 |     |         emit WrongTickClaimedAt4(zeroForOne, claimTickNext, upper, lower);
 38 |     |         assert(false);
 39 |     |     }
 40 |     | 
 41 |     |     function assertTickAtPriceDivisibleByTickSpacing(int24 tick, uint160 priceAt, int16 tickSpacing) internal {
 42 |     |         emit TickAtPriceDivisibleByTickSpacing(tick, priceAt, tickSpacing);
 43 |     |         if(tick % tickSpacing == 0) assert(priceAt == 0);
 44 |     |     }
 45 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/TickMap.sol
   1 |     | // SPDX-License-Identifier: GPLv3
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | import './math/ConstantProduct.sol';
   5 |     | import '../base/structs/PoolsharkStructs.sol';
   6 |     | 
   7 |     | library TickMap {
   8 |     | 
   9 |     |     error TickIndexOverflow();
  10 |     |     error TickIndexUnderflow();
  11 |     |     error TickIndexBadSpacing();
  12 |     |     error BlockIndexOverflow();
  13 |     | 
  14 |     |     function get(
  15 |     |         PoolsharkStructs.TickMap storage tickMap,
  16 |     |         int24 tick,
  17 |     |         int24 tickSpacing
  18 |     |     ) internal view returns (
  19 |     |         bool exists
  20 |     |     ) {
  21 |     |         (
  22 |     |             uint256 tickIndex,
  23 |     |             uint256 wordIndex,
  24 |     |         ) = getIndices(tick, tickSpacing);
  25 |     | 
  26 |     |         // check if bit is already set
  27 |     |         uint256 word = tickMap.ticks[wordIndex] | 1 << (tickIndex & 0xFF);
  28 |     |         if (word == tickMap.ticks[wordIndex]) {
  29 |     |             return true;
  30 |     |         }
  31 |     |         return false;
  32 |     |     }
  33 |     | 
  34 |     |     function set(
  35 |     |         PoolsharkStructs.TickMap storage tickMap,
  36 |     |         int24 tick,
  37 |     |         int24 tickSpacing
  38 |     |     ) internal returns (
  39 |     |         bool exists
  40 |     |     ) {
  41 |     |         (
  42 |     |             uint256 tickIndex,
  43 |     |             uint256 wordIndex,
  44 |     |             uint256 blockIndex
  45 |     |         ) = getIndices(tick, tickSpacing);
  46 |     | 
  47 |     |         // check if bit is already set
  48 |     |         uint256 word = tickMap.ticks[wordIndex] | 1 << (tickIndex & 0xFF);
  49 |     |         if (word == tickMap.ticks[wordIndex]) {
  50 |     |             return true;
  51 |     |         }
  52 |     | 
  53 |     |         tickMap.ticks[wordIndex]     = word; 
  54 |     |         tickMap.words[blockIndex]   |= 1 << (wordIndex & 0xFF); // same as modulus 255
  55 |     |         tickMap.blocks              |= 1 << blockIndex;
  56 |     |         return false;
  57 |     |     }
  58 |     | 
  59 |     |     function unset(
  60 |     |         PoolsharkStructs.TickMap storage tickMap,
  61 |     |         int24 tick,
  62 |     |         int16 tickSpacing
  63 |     |     ) internal {
  64 |     |         (
  65 |     |             uint256 tickIndex,
  66 |     |             uint256 wordIndex,
  67 |     |             uint256 blockIndex
  68 |     |         ) = getIndices(tick, tickSpacing);
  69 |     | 
  70 |     |         tickMap.ticks[wordIndex] &= ~(1 << (tickIndex & 0xFF));
  71 |     |         if (tickMap.ticks[wordIndex] == 0) {
  72 |     |             tickMap.words[blockIndex] &= ~(1 << (wordIndex & 0xFF));
  73 |     |             if (tickMap.words[blockIndex] == 0) {
  74 |     |                 tickMap.blocks &= ~(1 << blockIndex);
  75 |     |             }
  76 |     |         }
  77 |     |     }
  78 |     | 
  79 |     |     function previous(
  80 |     |         PoolsharkStructs.TickMap storage tickMap,
  81 |     |         int24 tick,
  82 |     |         int16 tickSpacing,
  83 |     |         bool inclusive
  84 |     |     ) internal view returns (
  85 |     |         int24 previousTick
  86 |     |     ) {
  87 |     |         unchecked {
  88 |     |             // rounds up to ensure relative position
  89 |     |             if (tick % (tickSpacing / 2) != 0 || inclusive) {
  90 |     |                 if (tick < (ConstantProduct.maxTick(tickSpacing) - tickSpacing / 2)) {
  91 |     |                     /// @dev - ensures we cross when tick >= 0
  92 |     |                     if (tick >= 0) {
  93 |     |                         tick += tickSpacing / 2;
  94 |     |                     } else if (inclusive && tick % (tickSpacing / 2) == 0) {
  95 |     |                     /// @dev - ensures we cross when tick == tickAtPrice
  96 |     |                         tick += tickSpacing / 2;
  97 |     |                     }
  98 |     |                 }
  99 |     |             }
 100 |     |             (
 101 |     |               uint256 tickIndex,
 102 |     |               uint256 wordIndex,
 103 |     |               uint256 blockIndex
 104 |     |             ) = getIndices(tick, tickSpacing);
 105 |     | 
 106 |     |             uint256 word = tickMap.ticks[wordIndex] & ((1 << (tickIndex & 0xFF)) - 1);
 107 |     |             if (word == 0) {
 108 |     |                 uint256 block_ = tickMap.words[blockIndex] & ((1 << (wordIndex & 0xFF)) - 1);
 109 |     |                 if (block_ == 0) {
 110 |     |                     uint256 blockMap = tickMap.blocks & ((1 << blockIndex) - 1);
 111 |     |                     if (blockMap == 0) return tick;
 112 |     | 
 113 |     |                     blockIndex = _msb(blockMap);
 114 |     |                     block_ = tickMap.words[blockIndex];
 115 |     |                 }
 116 |     |                 wordIndex = (blockIndex << 8) | _msb(block_);
 117 |     |                 word = tickMap.ticks[wordIndex];
 118 |     |             }
 119 |     |             previousTick = _tick((wordIndex << 8) | _msb(word), tickSpacing);
 120 |     |         }
 121 |     |     }
 122 |     | 
 123 |     |     function next(
 124 |     |         PoolsharkStructs.TickMap storage tickMap,
 125 |     |         int24 tick,
 126 |     |         int16 tickSpacing,
 127 |     |         bool inclusive
 128 |     |     ) internal view returns (
 129 |     |         int24 nextTick
 130 |     |     ) {
 131 |     |         unchecked {
 132 |     |             /// @dev - handles tickAtPrice being past tickSpacing / 2
 133 |     |             if (inclusive && tick % tickSpacing != 0) {
 134 |     |                 tick -= 1;
 135 |     |             }
 136 |     |             /// @dev - handles negative ticks rounding up
 137 |     |             if (tick % (tickSpacing / 2) != 0) {
 138 |     |                 if (tick < 0)
 139 |     |                     if (tick > (ConstantProduct.minTick(tickSpacing) + tickSpacing / 2))
 140 |     |                         tick -= tickSpacing / 2;
 141 |     |             }
 142 |     |             (
 143 |     |               uint256 tickIndex,
 144 |     |               uint256 wordIndex,
 145 |     |               uint256 blockIndex
 146 |     |             ) = getIndices(tick, tickSpacing);
 147 |     |             uint256 word;
 148 |     |             if ((tickIndex & 0xFF) != 255) {
 149 |     |                 word = tickMap.ticks[wordIndex] & ~((1 << ((tickIndex & 0xFF) + 1)) - 1);
 150 |     |             }
 151 |     |             if (word == 0) {
 152 |     |                 uint256 block_;
 153 |     |                 if ((blockIndex & 0xFF) != 255) {
 154 |     |                     block_ = tickMap.words[blockIndex] & ~((1 << ((wordIndex & 0xFF) + 1)) - 1);
 155 |     |                 }
 156 |     |                 if (block_ == 0) {
 157 |     |                     uint256 blockMap = tickMap.blocks & ~((1 << blockIndex + 1) - 1);
 158 |     |                     if (blockMap == 0) return tick;
 159 |     |                     blockIndex = _lsb(blockMap);
 160 |     |                     block_ = tickMap.words[blockIndex];
 161 |     |                 }
 162 |     |                 wordIndex = (blockIndex << 8) | _lsb(block_);
 163 |     |                 word = tickMap.ticks[wordIndex];
 164 |     |             }
 165 |     |             nextTick = _tick((wordIndex << 8) | _lsb(word), tickSpacing);
 166 |     |         }
 167 |     |     }
 168 |     | 
 169 |     |     function getIndices(
 170 |     |         int24 tick,
 171 |     |         int24 tickSpacing
 172 |     |     ) public pure returns (
 173 |     |             uint256 tickIndex,
 174 |     |             uint256 wordIndex,
 175 |     |             uint256 blockIndex
 176 |     |         )
 177 |     |     {
 178 |     |         unchecked {
 179 |     |             if (tick > ConstantProduct.MAX_TICK) require(false, ' TickIndexOverflow()');
 180 |     |             if (tick < ConstantProduct.MIN_TICK) require(false, 'TickIndexUnderflow()');
 181 |     |             if (tick % (tickSpacing / 2) != 0) tick = round(tick, tickSpacing / 2);
 182 |     |             tickIndex = uint256(int256((round(tick, tickSpacing / 2) 
 183 |     |                                         - round(ConstantProduct.MIN_TICK, tickSpacing / 2)) 
 184 |     |                                         / (tickSpacing / 2)));
 185 |     |             wordIndex = tickIndex >> 8;   // 2^8 ticks per word
 186 |     |             blockIndex = tickIndex >> 16; // 2^8 words per block
 187 |     |             if (blockIndex > 255) require(false, 'BlockIndexOverflow()');
 188 |     |         }
 189 |     |     }
 190 |     | 
 191 |     | 
 192 |     | 
 193 |     |     function _tick (
 194 |     |         uint256 tickIndex,
 195 |     |         int24 tickSpacing
 196 |     |     ) internal pure returns (
 197 |     |         int24 tick
 198 |     |     ) {
 199 |     |         unchecked {
 200 |     |             if (tickIndex > uint24(round(ConstantProduct.MAX_TICK, tickSpacing) * 2) * 2) 
 201 |     |                 require(false, 'TickIndexOverflow()');
 202 |     |             tick = int24(int256(tickIndex) * (tickSpacing / 2) + round(ConstantProduct.MIN_TICK, tickSpacing / 2));
 203 |     |         }
 204 |     |     }
 205 |     | 
 206 |     |     function _msb(
 207 |     |         uint256 x
 208 |     |     ) internal pure returns (
 209 |     |         uint8 r
 210 |     |     ) {
 211 |     |         unchecked {
 212 |     |             assert(x > 0);
 213 |     |             if (x >= 0x100000000000000000000000000000000) {
 214 |     |                 x >>= 128;
 215 |     |                 r += 128;
 216 |     |             }
 217 |     |             if (x >= 0x10000000000000000) {
 218 |     |                 x >>= 64;
 219 |     |                 r += 64;
 220 |     |             }
 221 |     |             if (x >= 0x100000000) {
 222 |     |                 x >>= 32;
 223 |     |                 r += 32;
 224 |     |             }
 225 |     |             if (x >= 0x10000) {
 226 |     |                 x >>= 16;
 227 |     |                 r += 16;
 228 |     |             }
 229 |     |             if (x >= 0x100) {
 230 |     |                 x >>= 8;
 231 |     |                 r += 8;
 232 |     |             }
 233 |     |             if (x >= 0x10) {
 234 |     |                 x >>= 4;
 235 |     |                 r += 4;
 236 |     |             }
 237 |     |             if (x >= 0x4) {
 238 |     |                 x >>= 2;
 239 |     |                 r += 2;
 240 |     |             }
 241 |     |             if (x >= 0x2) r += 1;
 242 |     |         }
 243 |     |     }
 244 |     | 
 245 |     |     function _lsb(
 246 |     |         uint256 x
 247 |     |     ) internal pure returns (
 248 |     |         uint8 r
 249 |     |     ) {
 250 |     |         unchecked {
 251 |     |             assert(x > 0); // if x is 0 return 0
 252 |     |             r = 255;
 253 |     |             if (x & type(uint128).max > 0) {
 254 |     |                 r -= 128;
 255 |     |             } else {
 256 |     |                 x >>= 128;
 257 |     |             }
 258 |     |             if (x & type(uint64).max > 0) {
 259 |     |                 r -= 64;
 260 |     |             } else {
 261 |     |                 x >>= 64;
 262 |     |             }
 263 |     |             if (x & type(uint32).max > 0) {
 264 |     |                 r -= 32;
 265 |     |             } else {
 266 |     |                 x >>= 32;
 267 |     |             }
 268 |     |             if (x & type(uint16).max > 0) {
 269 |     |                 r -= 16;
 270 |     |             } else {
 271 |     |                 x >>= 16;
 272 |     |             }
 273 |     |             if (x & type(uint8).max > 0) {
 274 |     |                 r -= 8;
 275 |     |             } else {
 276 |     |                 x >>= 8;
 277 |     |             }
 278 |     |             if (x & 0xf > 0) {
 279 |     |                 r -= 4;
 280 |     |             } else {
 281 |     |                 x >>= 4;
 282 |     |             }
 283 |     |             if (x & 0x3 > 0) {
 284 |     |                 r -= 2;
 285 |     |             } else {
 286 |     |                 x >>= 2;
 287 |     |             }
 288 |     |             if (x & 0x1 > 0) r -= 1;
 289 |     |         }
 290 |     |     }
 291 |     | 
 292 |     |     function round(
 293 |     |         int24 tick,
 294 |     |         int24 tickSpacing
 295 |     |     ) internal pure returns (
 296 |     |         int24 roundedTick
 297 |     |     ) {
 298 |     |         return tick / tickSpacing * tickSpacing;
 299 |     |     }
 300 |     | 
 301 |     |     function roundHalf(
 302 |     |         int24 tick,
 303 |     |         PoolsharkStructs.Immutables memory constants,
 304 |     |         uint256 price
 305 |     |     ) internal pure returns (
 306 |     |         int24 roundedTick,
 307 |     |         uint160 roundedTickPrice
 308 |     |     ) {
 309 |     |         //pool.tickAtPrice -99.5
 310 |     |         //pool.tickAtPrice -100
 311 |     |         //-105
 312 |     |         //-95
 313 |     |         roundedTick = tick / constants.tickSpacing * constants.tickSpacing;
 314 |     |         roundedTickPrice = ConstantProduct.getPriceAtTick(roundedTick, constants);
 315 |     |         if (price == roundedTickPrice)
 316 |     |             return (roundedTick, roundedTickPrice);
 317 |     |         if (roundedTick > 0) {
 318 |     |             roundedTick += constants.tickSpacing / 2;
 319 |     |         } else if (roundedTick < 0) {
 320 |     |             if (roundedTickPrice < price)
 321 |     |                 roundedTick += constants.tickSpacing / 2;
 322 |     |             else
 323 |     |                 roundedTick -= constants.tickSpacing / 2;
 324 |     |         } else {
 325 |     |             if (price > roundedTickPrice) {
 326 |     |                 roundedTick += constants.tickSpacing / 2;
 327 |     |             } else if (price < roundedTickPrice) {
 328 |     |                 roundedTick -= constants.tickSpacing / 2;
 329 |     |             }
 330 |     |         }
 331 |     |     }
 332 |     | 
 333 |     |     function roundAhead(
 334 |     |         int24 tick,
 335 |     |         PoolsharkStructs.Immutables memory constants,
 336 |     |         bool zeroForOne,
 337 |     |         uint256 price
 338 |     |     ) internal pure returns (
 339 |     |         int24 roundedTick
 340 |     |     ) {
 341 |     |         roundedTick = tick / constants.tickSpacing * constants.tickSpacing;
 342 |     |         uint160 roundedTickPrice = ConstantProduct.getPriceAtTick(roundedTick, constants);
 343 |     |         if (price == roundedTickPrice)
 344 |     |             return roundedTick;
 345 |     |         if (zeroForOne) {
 346 |     |             // round up if positive
 347 |     |             if (roundedTick > 0 || (roundedTick == 0 && tick >= 0))
 348 |     |                 roundedTick += constants.tickSpacing;
 349 |     |             else if (tick % constants.tickSpacing == 0) {
 350 |     |                 // handle price at -99.5 and tickAtPrice == -100
 351 |     |                 if (tick < 0 && roundedTickPrice < price) {
 352 |     |                     roundedTick += constants.tickSpacing;
 353 |     |                 }
 354 |     |             }
 355 |     |         } else {
 356 |     |             // round down if negative
 357 |     |             if (roundedTick < 0 || (roundedTick == 0 && tick < 0))
 358 |     |             /// @dev - strictly less due to TickMath always rounding to lesser values
 359 |     |                 roundedTick -= constants.tickSpacing;
 360 |     |         }
 361 |     |     }
 362 |     | 
 363 |     |     function roundBack(
 364 |     |         int24 tick,
 365 |     |         PoolsharkStructs.Immutables memory constants,
 366 |     |         bool zeroForOne,
 367 |     |         uint256 price
 368 |     |     ) internal pure returns (
 369 |     |         int24 roundedTick
 370 |     |     ) {
 371 |     |         roundedTick = tick / constants.tickSpacing * constants.tickSpacing;
 372 |     |         uint160 roundedTickPrice = ConstantProduct.getPriceAtTick(roundedTick, constants);
 373 |     |         if (price == roundedTickPrice)
 374 |     |             return roundedTick;
 375 |     |         if (zeroForOne) {
 376 |     |             // round down if negative
 377 |     |             if (roundedTick < 0 || (roundedTick == 0 && tick < 0))
 378 |     |                 roundedTick -= constants.tickSpacing;
 379 |     |         } else {
 380 |     |             // round up if positive
 381 |     |             if (roundedTick > 0 || (roundedTick == 0 && tick >= 0))
 382 |     |                 roundedTick += constants.tickSpacing;
 383 |     |             else if (tick % constants.tickSpacing == 0) {
 384 |     |                 // handle price at -99.5 and tickAtPrice == -100
 385 |     |                 if (tick < 0 && roundedTickPrice < price) {
 386 |     |                     roundedTick += constants.tickSpacing;
 387 |     |                 }
 388 |     |             }
 389 |     |         }
 390 |     |     }
 391 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/Ticks.sol
   1 |     | // SPDX-License-Identifier: GPLv3
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | import '../base/structs/PoolsharkStructs.sol';
   5 |     | import './range/math/FeeMath.sol';
   6 |     | import './math/OverflowMath.sol';
   7 |     | import './math/ConstantProduct.sol';
   8 |     | import './TickMap.sol';
   9 |     | import './utils/SafeCast.sol';
  10 |     | import './range/math/FeeMath.sol';
  11 |     | import './range/Samples.sol';
  12 |     | import './limit/EpochMap.sol';
  13 |     | import './limit/TicksLimit.sol';
  14 |     | 
  15 |     | library Ticks {
  16 |     | 
  17 |     |     using SafeCast for uint256;
  18 |     | 
  19 |     |     // constants for crossing ticks / limit pools
  20 |     |     uint8 internal constant RANGE_TICK = 2**0;
  21 |     |     uint8 internal constant LIMIT_TICK = 2**1;
  22 |     |     uint8 internal constant LIMIT_POOL = 2**2;
  23 |     |     uint256 internal constant Q96 = 0x1000000000000000000000000;
  24 |     | 
  25 |     |     event Initialize(
  26 |     |         int24 minTick,
  27 |     |         int24 maxTick,
  28 |     |         uint160 startPrice,
  29 |     |         int24 startTick
  30 |     |     );
  31 |     | 
  32 |     |     event Swap(
  33 |     |         address indexed recipient,
  34 |     |         bool zeroForOne,
  35 |     |         uint256 amountIn,
  36 |     |         uint256 amountOut,
  37 |     |         uint160 price,
  38 |     |         uint128 liquidity,
  39 |     |         uint128 feeAmount,
  40 |     |         int24 tickAtPrice
  41 |     |     );
  42 |     | 
  43 |     |     function initialize(
  44 |     |         PoolsharkStructs.TickMap storage rangeTickMap,
  45 |     |         PoolsharkStructs.TickMap storage limitTickMap,
  46 |     |         IRangePoolStructs.Sample[65535] storage samples,
  47 |     |         ILimitPoolStructs.GlobalState memory state,
  48 |     |         PoolsharkStructs.Immutables memory constants,
  49 |     |         uint160 startPrice
  50 |     |     ) internal returns (
  51 |     |         ILimitPoolStructs.GlobalState memory
  52 |     |     ) {
  53 |     |         // state should only be initialized once
  54 |     |         if (state.pool0.price > 0) require (false, 'PoolAlreadyInitialized()');
  55 |     | 
  56 |     |         // initialize epoch
  57 |     |         state.epoch = 1;
  58 |     | 
  59 |     |         // check price bounds
  60 |     |         if (startPrice < constants.bounds.min || startPrice >= constants.bounds.max) require(false, 'StartPriceInvalid()');
  61 |     | 
  62 |     |         // initialize range ticks
  63 |     |         TickMap.set(rangeTickMap, ConstantProduct.minTick(constants.tickSpacing), constants.tickSpacing);
  64 |     |         TickMap.set(rangeTickMap, ConstantProduct.maxTick(constants.tickSpacing), constants.tickSpacing);
  65 |     |         
  66 |     |         // initialize limit ticks
  67 |     |         TickMap.set(limitTickMap, ConstantProduct.minTick(constants.tickSpacing), constants.tickSpacing);
  68 |     |         TickMap.set(limitTickMap, ConstantProduct.maxTick(constants.tickSpacing), constants.tickSpacing);
  69 |     | 
  70 |     |         // initialize price
  71 |     |         state.pool.price = startPrice;
  72 |     |         state.pool0.price = startPrice;
  73 |     |         state.pool1.price = startPrice;
  74 |     | 
  75 |     |         int24 startTick = ConstantProduct.getTickAtPrice(startPrice, constants);
  76 |     |         state.pool.tickAtPrice = startTick;
  77 |     |         state.pool0.tickAtPrice = startTick;
  78 |     |         state.pool1.tickAtPrice = startTick;
  79 |     | 
  80 |     |         // intialize samples
  81 |     |         state.pool = Samples.initialize(samples, state.pool);
  82 |     | 
  83 |     |         // emit event
  84 |     |         emit Initialize(
  85 |     |             ConstantProduct.minTick(constants.tickSpacing),
  86 |     |             ConstantProduct.maxTick(constants.tickSpacing),
  87 |     |             state.pool0.price,
  88 |     |             state.pool0.tickAtPrice
  89 |     |         );
  90 |     | 
  91 |     |         return state;
  92 |     |     }
  93 |     |     
  94 |     |     function swap(
  95 |     |         mapping(int24 => PoolsharkStructs.Tick) storage ticks,
  96 |     |         IRangePoolStructs.Sample[65535] storage samples,
  97 |     |         PoolsharkStructs.TickMap storage rangeTickMap,
  98 |     |         PoolsharkStructs.TickMap storage limitTickMap,
  99 |     |         PoolsharkStructs.SwapParams memory params,
 100 |     |         PoolsharkStructs.SwapCache memory cache
 101 |     |     ) internal returns (
 102 |     |         PoolsharkStructs.SwapCache memory
 103 |     |     )
 104 |     |     {   
 105 |     |         // start with range price
 106 |     |         cache.price = cache.state.pool.price;
 107 |     |         cache.crossTick = cache.state.pool.tickAtPrice;
 108 |     | 
 109 |     |         cache = _iterate(ticks, rangeTickMap, limitTickMap, cache, params.zeroForOne, true);
 110 |     | 
 111 |     |         uint128 startLiquidity = cache.liquidity.toUint128();
 112 |     |         
 113 |     |         // set crossTick/crossPrice based on the best between limit and range
 114 |     |         // grab sample for accumulators
 115 |     |         cache = PoolsharkStructs.SwapCache({
 116 |     |             state: cache.state,
 117 |     |             constants: cache.constants,
 118 |     |             price: cache.price,
 119 |     |             liquidity: cache.liquidity,
 120 |     |             amountLeft: params.amount,
 121 |     |             input:  0,
 122 |     |             output: 0,
 123 |     |             crossPrice: cache.crossPrice,
 124 |     |             secondsPerLiquidityAccum: 0,
 125 |     |             feeAmount: 0,
 126 |     |             tickSecondsAccum: 0,
 127 |     |             crossTick: cache.crossTick,
 128 |     |             crossStatus: cache.crossStatus,
 129 |     |             limitActive: cache.limitActive,
 130 |     |             exactIn: params.exactIn,
 131 |     |             cross: true
 132 |     |         });
 133 |     |         // should be calculated at each step for dynamic fee
 134 |     |         if (!cache.exactIn) cache.amountLeft = OverflowMath.mulDivRoundingUp(uint256(params.amount), 1e6, (1e6 - cache.constants.swapFee));
 135 |     |         // grab latest sample and store in cache for _cross
 136 |     |         (
 137 |     |             cache.tickSecondsAccum,
 138 |     |             cache.secondsPerLiquidityAccum
 139 |     |         ) = Samples.getSingle(
 140 |     |                 IPool(address(this)), 
 141 |     |                 IRangePoolStructs.SampleParams(
 142 |     |                     cache.state.pool.samples.index,
 143 |     |                     cache.state.pool.samples.length,
 144 |     |                     uint32(block.timestamp),
 145 |     |                     new uint32[](2),
 146 |     |                     cache.state.pool.tickAtPrice,
 147 |     |                     cache.liquidity.toUint128(),
 148 |     |                     cache.constants
 149 |     |                 ),
 150 |     |                 0
 151 |     |         );
 152 |     |         // increment swap epoch
 153 |     |         cache.state.epoch += 1;
 154 |     |         // grab latest sample and store in cache for _cross
 155 |     |         while (cache.cross) {
 156 |     |             // handle price being at cross tick
 157 |     |             cache = _quoteSingle(cache, params.priceLimit, params.zeroForOne);
 158 |     |             if (cache.cross) {
 159 |     |                 cache = _cross(
 160 |     |                     ticks,
 161 |     |                     rangeTickMap,
 162 |     |                     limitTickMap,
 163 |     |                     cache,
 164 |     |                     params
 165 |     |                 );
 166 |     |             }
 167 |     |         }
 168 |     |         /// @dev - write oracle entry after start of block
 169 |     |         (
 170 |     |             cache.state.pool.samples.index,
 171 |     |             cache.state.pool.samples.length
 172 |     |         ) = Samples.save(
 173 |     |             samples,
 174 |     |             cache.state.pool.samples,
 175 |     |             startLiquidity,
 176 |     |             cache.state.pool.tickAtPrice
 177 |     |         );
 178 |     |         // pool liquidity should be updated along the way
 179 |     |         cache.state.pool.price = cache.price.toUint160();
 180 |     | 
 181 |     |         if (cache.price != cache.crossPrice) {
 182 |     |             cache.state.pool.tickAtPrice = ConstantProduct.getTickAtPrice(cache.price.toUint160(), cache.constants);
 183 |     |         } else {
 184 |     |             cache.state.pool.tickAtPrice = cache.crossTick;
 185 |     |         }
 186 |     |         if (cache.limitActive) {
 187 |     |             if (params.zeroForOne) {
 188 |     |                 cache.state.pool1.price = cache.state.pool.price;
 189 |     |                 cache.state.pool1.tickAtPrice = cache.state.pool.tickAtPrice;
 190 |     |             } else {
 191 |     |                 cache.state.pool0.price = cache.state.pool.price;
 192 |     |                 cache.state.pool0.tickAtPrice = cache.state.pool.tickAtPrice;
 193 |     |             }
 194 |     |         }
 195 |     |         emit Swap(
 196 |     |             params.to,
 197 |     |             params.zeroForOne,
 198 |     |             cache.input,
 199 |     |             cache.output,
 200 |     |             cache.price.toUint160(),
 201 |     |             cache.liquidity.toUint128(),
 202 |     |             cache.feeAmount,
 203 |     |             cache.state.pool.tickAtPrice
 204 |     |         );
 205 |     |         return cache;
 206 |     |     }
 207 |     | 
 208 |     |     function quote(
 209 |     |         mapping(int24 => PoolsharkStructs.Tick) storage ticks,
 210 |     |         PoolsharkStructs.TickMap storage rangeTickMap,
 211 |     |         PoolsharkStructs.TickMap storage limitTickMap,
 212 |     |         PoolsharkStructs.QuoteParams memory params,
 213 |     |         PoolsharkStructs.SwapCache memory cache
 214 |     |     ) internal view returns (
 215 |     |         uint256,
 216 |     |         uint256,
 217 |     |         uint160
 218 |     |     ) {
 219 |     |         // start with range price
 220 |     |         cache.price = cache.state.pool.price;
 221 |     |         cache.crossTick = cache.state.pool.tickAtPrice;
 222 |     | 
 223 |     |         cache = _iterate(ticks, rangeTickMap, limitTickMap, cache, params.zeroForOne, true);
 224 |     |         
 225 |     |         // set crossTick/crossPrice based on the best between limit and range
 226 |     |         // grab sample for accumulators
 227 |     |         cache = PoolsharkStructs.SwapCache({
 228 |     |             state: cache.state,
 229 |     |             constants: cache.constants,
 230 |     |             price: cache.price,
 231 |     |             liquidity: cache.liquidity,
 232 |     |             amountLeft: params.amount,
 233 |     |             input:  0,
 234 |     |             output: 0,
 235 |     |             crossPrice: cache.crossPrice,
 236 |     |             secondsPerLiquidityAccum: 0,
 237 |     |             feeAmount: 0,
 238 |     |             tickSecondsAccum: 0,
 239 |     |             crossTick: cache.crossTick,
 240 |     |             crossStatus: cache.crossStatus,
 241 |     |             limitActive: cache.limitActive,
 242 |     |             exactIn: params.exactIn,
 243 |     |             cross: true
 244 |     |         });
 245 |     |         // should be calculated at each step for dynamic fee
 246 |     |         if (!cache.exactIn) cache.amountLeft = OverflowMath.mulDivRoundingUp(uint256(params.amount), 1e6, (1e6 - cache.constants.swapFee));
 247 |     |         while (cache.cross) {
 248 |     |             cache = _quoteSingle(cache, params.priceLimit, params.zeroForOne);
 249 |     |             if (cache.cross) {
 250 |     |                 cache = _pass(
 251 |     |                     ticks,
 252 |     |                     rangeTickMap,
 253 |     |                     limitTickMap,
 254 |     |                     cache,
 255 |     |                     params
 256 |     |                 );
 257 |     |             }
 258 |     |         }
 259 |     |         return (
 260 |     |             cache.input,
 261 |     |             cache.output,
 262 |     |             cache.price.toUint160()
 263 |     |         );
 264 |     |     }
 265 |     | 
 266 |     |     function _quoteSingle(
 267 |     |         PoolsharkStructs.SwapCache memory cache,
 268 |     |         uint160 priceLimit,
 269 |     |         bool zeroForOne
 270 |     |     ) internal pure returns (
 271 |     |         PoolsharkStructs.SwapCache memory
 272 |     |     ) {
 273 |     |         if ((zeroForOne ? priceLimit >= cache.price
 274 |     |                         : priceLimit <= cache.price) ||
 275 |     |             (zeroForOne && cache.price == cache.constants.bounds.min) ||
 276 |     |             (!zeroForOne && cache.price == cache.constants.bounds.max) ||
 277 |     |             (cache.amountLeft == 0 && cache.liquidity > 0))
 278 |     |         {
 279 |     |             cache.cross = false;
 280 |     |             return cache;
 281 |     |         }
 282 |     |         uint256 nextPrice = cache.crossPrice;
 283 |     |         uint256 amountOut;
 284 |     |         if (zeroForOne) {
 285 |     |             // Trading token 0 (x) for token 1 (y).
 286 |     |             // price  is decreasing.
 287 |     |             if (nextPrice < priceLimit) {
 288 |     |                 nextPrice = priceLimit;
 289 |     |             }
 290 |     |             uint256 amountMax = cache.exactIn ? ConstantProduct.getDx(cache.liquidity, nextPrice, cache.price, true)
 291 |     |                                               : ConstantProduct.getDy(cache.liquidity, nextPrice, cache.price, false);
 292 |     |             if (cache.amountLeft < amountMax) {
 293 |     |                 // We can swap within the current range.
 294 |     |                 uint256 liquidityPadded = uint256(cache.liquidity) << 96;
 295 |     |                 // calculate price after swap
 296 |     |                 uint256 newPrice;
 297 |     |                 if (cache.exactIn) {
 298 |     |                     newPrice = OverflowMath.mulDivRoundingUp(
 299 |     |                         liquidityPadded,
 300 |     |                         cache.price,
 301 |     |                         liquidityPadded + uint256(cache.price) * uint256(cache.amountLeft)
 302 |     |                     );
 303 |     |                     amountOut = ConstantProduct.getDy(cache.liquidity, newPrice, uint256(cache.price), false);
 304 |     |                     cache.input += cache.amountLeft;
 305 |     |                 } else {
 306 |     |                     newPrice = cache.price - 
 307 |     |                         OverflowMath.divRoundingUp(cache.amountLeft << 96, cache.liquidity);
 308 |     |                     amountOut = cache.amountLeft;
 309 |     |                     cache.input += ConstantProduct.getDx(cache.liquidity, newPrice, uint256(cache.price), true);
 310 |     |                 }
 311 |     |                 cache.amountLeft = 0;
 312 |     |                 cache.cross = false;
 313 |     |                 cache.price = uint160(newPrice);
 314 |     |             } else {
 315 |     |                 if (cache.exactIn) {
 316 |     |                     amountOut = ConstantProduct.getDy(cache.liquidity, nextPrice, cache.price, false);
 317 |     |                     cache.input += amountMax;
 318 |     |                 } else {
 319 |     |                     amountOut = amountMax;
 320 |     |                     cache.input += ConstantProduct.getDx(cache.liquidity, nextPrice, cache.price, true);
 321 |     |                 }
 322 |     |                 cache.amountLeft -= amountMax;
 323 |     |                 if (nextPrice == cache.crossPrice) cache.cross = true;
 324 |     |                 else cache.cross = false;
 325 |     |                 cache.price = uint160(nextPrice);
 326 |     |             }
 327 |     |         } else {
 328 |     |             // Price is increasing.
 329 |     |             if (nextPrice > priceLimit) {
 330 |     |                 nextPrice = priceLimit;
 331 |     |             }
 332 |     |             uint256 amountMax = cache.exactIn ? ConstantProduct.getDy(cache.liquidity, uint256(cache.price), nextPrice, true)
 333 |     |                                               : ConstantProduct.getDx(cache.liquidity, uint256(cache.price), nextPrice, false);
 334 |     |             if (cache.amountLeft < amountMax) {
 335 |     |                 uint256 newPrice;
 336 |     |                 if (cache.exactIn) {
 337 |     |                     newPrice = cache.price +
 338 |     |                         OverflowMath.mulDiv(cache.amountLeft, Q96, cache.liquidity);
 339 |     |                     amountOut = ConstantProduct.getDx(cache.liquidity, cache.price, newPrice, false);
 340 |     |                     cache.input += cache.amountLeft;
 341 |     |                 } else {
 342 |     |                     uint256 liquidityPadded = uint256(cache.liquidity) << 96;
 343 |     |                     newPrice = OverflowMath.mulDivRoundingUp(
 344 |     |                         liquidityPadded, 
 345 |     |                         cache.price,
 346 |     |                         liquidityPadded - uint256(cache.price) * cache.amountLeft
 347 |     |                     );
 348 |     |                     amountOut = cache.amountLeft;
 349 |     |                     cache.input += ConstantProduct.getDy(cache.liquidity, cache.price, newPrice, true);
 350 |     |                 }
 351 |     |                 cache.amountLeft = 0;
 352 |     |                 cache.cross = false;
 353 |     |                 cache.price = uint160(newPrice);
 354 |     |             } else {
 355 |     |                 if (cache.exactIn) {
 356 |     |                     amountOut = ConstantProduct.getDx(cache.liquidity, cache.price, nextPrice, false);
 357 |     |                     cache.input += amountMax;
 358 |     |                 } else {
 359 |     |                     amountOut = amountMax;
 360 |     |                     cache.input += ConstantProduct.getDy(cache.liquidity, cache.price, nextPrice, true);
 361 |     |                 }
 362 |     |                 cache.amountLeft -= amountMax;
 363 |     |                 if (nextPrice == cache.crossPrice) cache.cross = true;
 364 |     |                 else cache.cross = false;
 365 |     |                 cache.price = uint160(nextPrice);
 366 |     |             }
 367 |     |         }
 368 |     |         cache = FeeMath.calculate(cache, amountOut, zeroForOne);
 369 |     |         return cache;
 370 |     |     }
 371 |     | 
 372 |     |     function _cross(
 373 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
 374 |     |         PoolsharkStructs.TickMap storage rangeTickMap,
 375 |     |         PoolsharkStructs.TickMap storage limitTickMap,
 376 |     |         PoolsharkStructs.SwapCache memory cache,
 377 |     |         PoolsharkStructs.SwapParams memory params
 378 |     |     ) internal returns (
 379 |     |         PoolsharkStructs.SwapCache memory
 380 |     |     ) {
 381 |     |         // crossing range ticks
 382 |     |         if ((cache.crossStatus & RANGE_TICK) > 0) {
 383 |     |             PoolsharkStructs.RangeTick memory crossTick = ticks[cache.crossTick].range;
 384 |     |             crossTick.feeGrowthOutside0       = cache.state.pool.feeGrowthGlobal0 - crossTick.feeGrowthOutside0;
 385 |     |             crossTick.feeGrowthOutside1       = cache.state.pool.feeGrowthGlobal1 - crossTick.feeGrowthOutside1;
 386 |     |             crossTick.tickSecondsAccumOutside = cache.tickSecondsAccum - crossTick.tickSecondsAccumOutside;
 387 |     |             crossTick.secondsPerLiquidityAccumOutside = cache.secondsPerLiquidityAccum - crossTick.secondsPerLiquidityAccumOutside;
 388 |     |             ticks[cache.crossTick].range = crossTick;
 389 |     |             int128 liquidityDelta = crossTick.liquidityDelta;
 390 |     |             if (params.zeroForOne) {
 391 |     |                 unchecked {
 392 |     |                     if (liquidityDelta >= 0){
 393 |     |                         cache.state.pool.liquidity -= uint128(liquidityDelta);
 394 |     |                     } else {
 395 |     |                         cache.state.pool.liquidity += uint128(-liquidityDelta); 
 396 |     |                     }
 397 |     |                 }
 398 |     |             } else {
 399 |     |                 unchecked {
 400 |     |                     if (liquidityDelta >= 0) {
 401 |     |                         cache.state.pool.liquidity += uint128(liquidityDelta);
 402 |     |                     } else {
 403 |     |                         cache.state.pool.liquidity -= uint128(-liquidityDelta);
 404 |     |                     }
 405 |     |                 }
 406 |     |             }
 407 |     |             /// @dev - price and tickAtPrice updated at end of loop
 408 |     |         }
 409 |     |         // crossing limit tick
 410 |     |         if ((cache.crossStatus & LIMIT_TICK) > 0) {
 411 |     |             // cross limit tick
 412 |     |             EpochMap.set(cache.crossTick, !params.zeroForOne, cache.state.epoch, limitTickMap, cache.constants);
 413 |     |             int128 liquidityDelta = ticks[cache.crossTick].limit.liquidityDelta;
 414 |     | 
 415 |     |             if (liquidityDelta >= 0) {
 416 |     |                 cache.liquidity += uint128(liquidityDelta);
 417 |     |                 if (params.zeroForOne) cache.state.pool1.liquidity += uint128(liquidityDelta);
 418 |     |                 else cache.state.pool0.liquidity += uint128(liquidityDelta);
 419 |     |             }
 420 |     |             else {
 421 |     |                 cache.liquidity -= uint128(-liquidityDelta);
 422 |     |                 if (params.zeroForOne) cache.state.pool1.liquidity -= uint128(-liquidityDelta);
 423 |     |                 else cache.state.pool0.liquidity -= uint128(-liquidityDelta);
 424 |     |             }
 425 |     |             // zero out liquidityDelta and priceAt
 426 |     |             ticks[cache.crossTick].limit = PoolsharkStructs.LimitTick(0,0,0);
 427 |     |             TicksLimit.clear(ticks, cache.constants, limitTickMap, cache.crossTick);
 428 |     |             /// @dev - price and tickAtPrice updated at end of loop
 429 |     |         }
 430 |     |         if ((cache.crossStatus & LIMIT_POOL) > 0) {
 431 |     |             // add limit pool
 432 |     |             uint128 liquidityDelta = params.zeroForOne ? cache.state.pool1.liquidity
 433 |     |                                                        : cache.state.pool0.liquidity;
 434 |     | 
 435 |     |             if (liquidityDelta > 0) cache.liquidity += liquidityDelta;
 436 |     |         }
 437 |     |         cache = _iterate(ticks, rangeTickMap, limitTickMap, cache, params.zeroForOne, false);
 438 |     | 
 439 |     |         return cache;
 440 |     |     }
 441 |     | 
 442 |     |     function _pass(
 443 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
 444 |     |         PoolsharkStructs.TickMap storage rangeTickMap,
 445 |     |         PoolsharkStructs.TickMap storage limitTickMap,
 446 |     |         PoolsharkStructs.SwapCache memory cache,
 447 |     |         PoolsharkStructs.QuoteParams memory params
 448 |     |     ) internal view returns (
 449 |     |         PoolsharkStructs.SwapCache memory
 450 |     |     ) {
 451 |     |         if ((cache.crossStatus & RANGE_TICK) > 0) {
 452 |     |             int128 liquidityDelta = ticks[cache.crossTick].range.liquidityDelta;
 453 |     |             if (params.zeroForOne) {
 454 |     |                 unchecked {
 455 |     |                     if (liquidityDelta >= 0){
 456 |     |                         cache.state.pool.liquidity -= uint128(liquidityDelta);
 457 |     |                     } else {
 458 |     |                         cache.state.pool.liquidity += uint128(-liquidityDelta);
 459 |     |                     }
 460 |     |                 }
 461 |     |             } else {
 462 |     |                 unchecked {
 463 |     |                     if (liquidityDelta >= 0) {
 464 |     |                         cache.state.pool.liquidity += uint128(liquidityDelta);
 465 |     |                     } else {
 466 |     |                         cache.state.pool.liquidity -= uint128(-liquidityDelta);
 467 |     |                     }
 468 |     |                 }
 469 |     |             }
 470 |     |         }
 471 |     |         if ((cache.crossStatus & LIMIT_TICK) > 0) {
 472 |     |             // cross limit tick
 473 |     |             int128 liquidityDelta = ticks[cache.crossTick].limit.liquidityDelta;
 474 |     | 
 475 |     |             if (liquidityDelta > 0) {
 476 |     |                 cache.liquidity += uint128(liquidityDelta);
 477 |     |                 if (params.zeroForOne) cache.state.pool1.liquidity += uint128(liquidityDelta);
 478 |     |                 else cache.state.pool0.liquidity += uint128(liquidityDelta);
 479 |     |             } 
 480 |     |             else {
 481 |     |                 cache.liquidity -= uint128(-liquidityDelta);
 482 |     |                 if (params.zeroForOne) {
 483 |     |                     cache.state.pool1.liquidity -= uint128(-liquidityDelta);
 484 |     |                 } else {
 485 |     |                     cache.state.pool0.liquidity -= uint128(-liquidityDelta);
 486 |     |                 }
 487 |     |             }
 488 |     |         }
 489 |     |         if ((cache.crossStatus & LIMIT_POOL) > 0) {
 490 |     |             // add limit pool
 491 |     |             uint128 liquidityDelta = params.zeroForOne ? cache.state.pool1.liquidity
 492 |     |                                                        : cache.state.pool0.liquidity;
 493 |     | 
 494 |     |             if (liquidityDelta > 0) {
 495 |     |                 cache.liquidity += liquidityDelta;
 496 |     |             }
 497 |     |         }
 498 |     |         cache = _iterate(ticks, rangeTickMap, limitTickMap, cache, params.zeroForOne, false);
 499 |     | 
 500 |     |         return cache;
 501 |     |     }
 502 |     | 
 503 |     |     function _iterate(
 504 |     |         mapping(int24 => PoolsharkStructs.Tick) storage ticks,
 505 |     |         PoolsharkStructs.TickMap storage rangeTickMap,
 506 |     |         PoolsharkStructs.TickMap storage limitTickMap,
 507 |     |         PoolsharkStructs.SwapCache memory cache,
 508 |     |         bool zeroForOne,
 509 |     |         bool inclusive
 510 |     |     ) internal view returns (
 511 |     |         PoolsharkStructs.SwapCache memory 
 512 |     |     )    
 513 |     |     {
 514 |     |         if (zeroForOne) {
 515 |     |             if (cache.price > cache.state.pool1.price) {
 516 |     |                 // load range pool
 517 |     |                 cache.limitActive = false;
 518 |     |                 cache.liquidity = cache.state.pool.liquidity;
 519 |     |                 (cache.crossTick,) = TickMap.roundHalf(cache.crossTick, cache.constants, cache.price);
 520 |     |                 // next range tick vs. limit pool price
 521 |     |                 cache.crossTick = TickMap.previous(rangeTickMap, cache.crossTick, cache.constants.tickSpacing, inclusive);
 522 |     |                 cache.crossPrice = ConstantProduct.getPriceAtTick(cache.crossTick, cache.constants);
 523 |     |                 if (cache.state.pool1.price >= cache.crossPrice) {
 524 |     |                     // cross into limit pool
 525 |     |                     cache.crossStatus = LIMIT_POOL;
 526 |     |                     if (cache.state.pool1.price == cache.crossPrice)
 527 |     |                         // also cross range tick
 528 |     |                         cache.crossStatus |= RANGE_TICK;
 529 |     |                     else {
 530 |     |                         cache.crossTick = cache.state.pool1.tickAtPrice;
 531 |     |                         cache.crossPrice = cache.state.pool1.price;
 532 |     |                     }
 533 |     |                 }
 534 |     |                 else {
 535 |     |                     // cross only range tick
 536 |     |                     cache.crossStatus = RANGE_TICK;
 537 |     |                 }
 538 |     |             } else {
 539 |     |                 // load range and limit pools
 540 |     |                 cache.limitActive = true;
 541 |     |                 cache.liquidity = cache.state.pool.liquidity + cache.state.pool1.liquidity;
 542 |     |                 (cache.crossTick,) = TickMap.roundHalf(cache.crossTick, cache.constants, cache.price);
 543 |     |                 // next range tick vs. next limit tick
 544 |     |                 int24 rangeTickAhead = TickMap.previous(rangeTickMap, cache.crossTick, cache.constants.tickSpacing, inclusive);
 545 |     |                 int24 limitTickAhead = TickMap.previous(limitTickMap, cache.crossTick, cache.constants.tickSpacing, inclusive);
 546 |     |                 if (rangeTickAhead >= limitTickAhead) {
 547 |     |                     cache.crossTick = rangeTickAhead;
 548 |     |                     // cross range tick
 549 |     |                     cache.crossStatus = RANGE_TICK;
 550 |     |                     if (rangeTickAhead == limitTickAhead)
 551 |     |                         // also cross limit tick
 552 |     |                         cache.crossStatus |= LIMIT_TICK;
 553 |     |                     cache.crossPrice = ConstantProduct.getPriceAtTick(cache.crossTick, cache.constants);
 554 |     |                 } else {
 555 |     |                     // only cross limit tick
 556 |     |                     cache.crossTick = limitTickAhead;
 557 |     |                     cache.crossStatus = LIMIT_TICK;
 558 |     |                     cache.crossPrice = ticks[cache.crossTick].limit.priceAt == 0 ? ConstantProduct.getPriceAtTick(cache.crossTick, cache.constants)
 559 |     |                                                                                  : ticks[cache.crossTick].limit.priceAt;
 560 |     |                 }
 561 |     |             }
 562 |     |         } else {
 563 |     |             if (cache.price < cache.state.pool0.price) {
 564 |     |                 // load range pool
 565 |     |                 cache.limitActive = false;
 566 |     |                 cache.liquidity = cache.state.pool.liquidity;
 567 |     |                 (cache.crossTick,) = TickMap.roundHalf(cache.crossTick, cache.constants, cache.price);
 568 |     |                 // next range tick vs. limit pool price
 569 |     |                 cache.crossTick = TickMap.next(rangeTickMap, cache.crossTick, cache.constants.tickSpacing, inclusive);
 570 |     |                 cache.crossPrice = ConstantProduct.getPriceAtTick(cache.crossTick, cache.constants);
 571 |     |                 if (cache.state.pool0.price <= cache.crossPrice) {
 572 |     |                     // cross into limit pool
 573 |     |                     cache.crossStatus = LIMIT_POOL;
 574 |     |                     if (cache.state.pool0.price == cache.crossPrice)
 575 |     |                         // also cross range tick
 576 |     |                         cache.crossStatus |= RANGE_TICK;
 577 |     |                     else {
 578 |     |                         cache.crossTick = cache.state.pool0.tickAtPrice;
 579 |     |                         cache.crossPrice = cache.state.pool0.price;
 580 |     |                     }
 581 |     |                 }
 582 |     |                 else {
 583 |     |                     // cross only range tick
 584 |     |                     cache.crossStatus = RANGE_TICK;
 585 |     |                 }
 586 |     |             } else {
 587 |     |                 // load range and limit pools
 588 |     |                 cache.limitActive = true;
 589 |     |                 cache.liquidity = cache.state.pool.liquidity + cache.state.pool0.liquidity;
 590 |     |                 (cache.crossTick,) = TickMap.roundHalf(cache.crossTick, cache.constants, cache.price);
 591 |     |                 // next range tick vs. next limit tick
 592 |     |                 int24 rangeTickAhead = TickMap.next(rangeTickMap, cache.crossTick, cache.constants.tickSpacing, inclusive);
 593 |     |                 int24 limitTickAhead = TickMap.next(limitTickMap, cache.crossTick, cache.constants.tickSpacing, inclusive);
 594 |     |                 if (rangeTickAhead <= limitTickAhead) {
 595 |     |                     cache.crossTick = rangeTickAhead;
 596 |     |                     // cross range tick
 597 |     |                     cache.crossStatus |= RANGE_TICK;
 598 |     |                     if (rangeTickAhead == limitTickAhead)
 599 |     |                         // also cross limit tick
 600 |     |                         cache.crossStatus |= LIMIT_TICK;
 601 |     |                     cache.crossPrice = ConstantProduct.getPriceAtTick(cache.crossTick, cache.constants);
 602 |     |                 } else {
 603 |     |                     // only cross limit tick
 604 |     |                     cache.crossTick = limitTickAhead;
 605 |     |                     cache.crossStatus |= LIMIT_TICK;
 606 |     |                     cache.crossPrice = ticks[cache.crossTick].limit.priceAt == 0 ? ConstantProduct.getPriceAtTick(cache.crossTick, cache.constants)
 607 |     |                                                                                  : ticks[cache.crossTick].limit.priceAt;
 608 |     |                 }
 609 |     |             }
 610 |     |         }
 611 |     |         return cache;
 612 |     |     }
 613 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/limit/Claims.sol
   1 |     | // SPDX-License-Identifier: BUSL-1.1
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | import '../../interfaces/limit/ILimitPoolStructs.sol';
   5 |     | import './EpochMap.sol';
   6 |     | import '../TickMap.sol';
   7 |     | import '../utils/String.sol';
   8 |     | import '../utils/SafeCast.sol';
   9 |     | import '../EchidnaAssertions.sol';
  10 |     | 
  11 |     | library Claims {
  12 |     | 
  13 |     |     using SafeCast for uint256;
  14 |     | 
  15 |     |     function validate(
  16 |     |         mapping(address => mapping(int24 => mapping(int24 => ILimitPoolStructs.LimitPosition)))
  17 |     |             storage positions,
  18 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
  19 |     |         PoolsharkStructs.TickMap storage tickMap,
  20 |     |         ILimitPoolStructs.LimitPoolState memory pool,
  21 |     |         ILimitPoolStructs.UpdateLimitParams memory params,
  22 |     |         ILimitPoolStructs.UpdateCache memory cache,
  23 |     |         PoolsharkStructs.Immutables memory constants
  24 |     |     ) internal returns (
  25 |     |         ILimitPoolStructs.UpdateLimitParams memory,
  26 |     |         ILimitPoolStructs.UpdateCache memory
  27 |     |     ) {
  28 |     |         // validate position liquidity
  29 |     |         if (params.amount > cache.position.liquidity) require (false, 'NotEnoughPositionLiquidity()');
  30 |     |         if (cache.position.liquidity == 0) {
  31 |     |             require(false, 'NoPositionLiquidityFound()');
  32 |     |         }
  33 |     |         
  34 |     |         if (params.claim < params.lower || params.claim > params.upper) require (false, 'InvalidClaimTick()');
  35 |     | 
  36 |     |         uint32 claimTickEpoch = EpochMap.get(params.claim, params.zeroForOne, tickMap, constants);
  37 |     | 
  38 |     |         if (params.zeroForOne){
  39 |     |             if (pool.price >= cache.priceClaim) {
  40 |     |                 if (pool.price <= cache.priceUpper) {
  41 |     |                     cache.priceClaim = pool.price;
  42 |     |                     params.claim = TickMap.roundBack(pool.tickAtPrice, constants, params.zeroForOne, cache.priceClaim);
  43 |     |                     claimTickEpoch = cache.state.epoch;
  44 |     |                 } else {
  45 |     |                     cache.priceClaim = cache.priceUpper;
  46 |     |                     params.claim = params.upper;
  47 |     |                     cache.claimTick = ticks[params.upper].limit;
  48 |     |                 }
  49 |     |                 claimTickEpoch = cache.state.epoch;
  50 |     |             } else if (params.claim % constants.tickSpacing != 0) {
  51 |     |                 if (cache.claimTick.priceAt == 0) {
  52 |     |                     require (false, 'WrongTickClaimedAt1()');
  53 |     |                 }
  54 |     |                 cache.priceClaim = cache.claimTick.priceAt;
  55 |     |             }
  56 |     |         } else {
  57 |     |             if (pool.price <= cache.priceClaim) {
  58 |     |                 if (pool.price >= cache.priceLower) {
  59 |     |                     cache.priceClaim = pool.price;
  60 |     |                     params.claim = TickMap.roundBack(pool.tickAtPrice, constants, params.zeroForOne, cache.priceClaim);
  61 |     |                     claimTickEpoch = cache.state.epoch;
  62 |     |                 } else {
  63 |     |                     cache.priceClaim = cache.priceLower;
  64 |     |                     params.claim = params.lower;
  65 |     |                     cache.claimTick = ticks[params.upper].limit;
  66 |     |                 }
  67 |     |                 claimTickEpoch = cache.state.epoch;
  68 |     |             } else if (params.claim % constants.tickSpacing != 0) {
  69 |     |                 if (cache.claimTick.priceAt == 0) {
  70 |     |                     require (false, 'WrongTickClaimedAt2()');
  71 |     |                 }
  72 |     |                 cache.priceClaim = cache.claimTick.priceAt;
  73 |     |             }
  74 |     |         }
  75 |     | 
  76 |     |         // validate claim tick
  77 |     |         if (params.claim == (params.zeroForOne ? params.upper : params.lower)) {
  78 |     |              if (claimTickEpoch <= cache.position.epochLast)
  79 |     |                 require (false, 'WrongTickClaimedAt3()');
  80 |     |         } else if (params.amount > 0) {
  81 |     |             /// @dev - partway claim is valid as long as liquidity is not being removed
  82 |     |             int24 claimTickNext = params.zeroForOne
  83 |     |                 ? TickMap.next(tickMap, params.claim, constants.tickSpacing, false)
  84 |     |                 : TickMap.previous(tickMap, params.claim, constants.tickSpacing, false);
  85 |     |             // if we cleared the final tick of their position, this is the wrong claim tick
  86 |     |             if (params.zeroForOne ? claimTickNext > params.upper
  87 |     |                                   : claimTickNext < params.lower) {
  88 |     |                 EchidnaAssertions.assertWrongTickClaimedAt4(params.zeroForOne, claimTickNext, params.upper, params.lower);
  89 |     |                 require (false, 'WrongTickClaimedAt4()');
  90 |     |             }
  91 |     |             // zero fill or partial fill
  92 |     |             /// @dev - if the next tick was crossed after position creation, the claim tick is incorrect
  93 |     |             /// @dev - we can cycle to find the right claim tick for the user
  94 |     |             uint32 claimTickNextAccumEpoch = EpochMap.get(claimTickNext, params.zeroForOne, tickMap, constants);
  95 |     |             ///@dev - next swapEpoch should not be greater
  96 |     |             if (claimTickNextAccumEpoch > cache.position.epochLast) {
  97 |     |                 require (false, 'WrongTickClaimedAt5()');
  98 |     |             }
  99 |     |             if (params.zeroForOne) {
 100 |     |                 uint32 endTickAccumEpoch = EpochMap.get(params.upper, params.zeroForOne, tickMap, constants);
 101 |     |                 if (endTickAccumEpoch > cache.position.epochLast) {
 102 |     |                     params.claim = params.upper;
 103 |     |                     cache.priceClaim = cache.priceUpper;
 104 |     |                     cache.claimTick = ticks[params.upper].limit;
 105 |     |                 }
 106 |     |             } else {
 107 |     |                 uint32 endTickAccumEpoch = EpochMap.get(params.lower, params.zeroForOne, tickMap, constants);
 108 |     |                 if (endTickAccumEpoch > cache.position.epochLast) {
 109 |     |                     params.claim = params.lower;
 110 |     |                     cache.priceClaim = cache.priceLower;
 111 |     |                     cache.claimTick = ticks[params.lower].limit;
 112 |     |                 }
 113 |     |             }
 114 |     | 
 115 |     |         }
 116 |     |         /// @dev - start tick does not overwrite position and final tick clears position
 117 |     |         if (params.claim != params.upper && params.claim != params.lower) {
 118 |     |             // check epochLast on claim tick
 119 |     |             if (claimTickEpoch <= cache.position.epochLast)
 120 |     |                 require (false, 'WrongTickClaimedAt7()');
 121 |     |             // prevent position overwriting at claim tick
 122 |     |             if (params.zeroForOne) {
 123 |     |                 if (positions[params.owner][params.claim][params.upper].liquidity > 0) {
 124 |     |                     require (false, string.concat('UpdatePositionFirstAt(', String.from(params.claim), ', ', String.from(params.upper), ')'));
 125 |     |                 }
 126 |     |             } else {
 127 |     |                 if (positions[params.owner][params.lower][params.claim].liquidity > 0) {
 128 |     |                     require (false, string.concat('UpdatePositionFirstAt(', String.from(params.lower), ', ', String.from(params.claim), ')'));
 129 |     |                 }
 130 |     |             }
 131 |     |         }
 132 |     | 
 133 |     |         // early return if no update and amount burned is 0
 134 |     |         //TODO: after we've cycled through claim ticks and there are no position updates just revert - DONE
 135 |     |         if (params.zeroForOne ? params.claim == params.lower
 136 |     |                               : params.claim == params.upper) {
 137 |     |             if (params.amount == 0)
 138 |     |                 require(false, 'NoPositionUpdates()');
 139 |     |         }
 140 |     | 
 141 |     |         return (params, cache);
 142 |     |     }
 143 |     | 
 144 |     |     function getDeltas(
 145 |     |         ILimitPoolStructs.UpdateCache memory cache,
 146 |     |         ILimitPoolStructs.UpdateLimitParams memory params,
 147 |     |         PoolsharkStructs.Immutables memory constants
 148 |     |     ) internal pure returns (
 149 |     |         ILimitPoolStructs.UpdateCache memory
 150 |     |     ) {
 151 |     |         // if half tick priceAt > 0 add amountOut to amountOutClaimed
 152 |     |         // set claimPriceLast if zero
 153 |     |         if (!cache.position.crossedInto) {
 154 |     |             cache.position.crossedInto = true;
 155 |     |         }
 156 |     |         ILimitPoolStructs.GetDeltasLocals memory locals;
 157 |     | 
 158 |     |         if (params.claim % constants.tickSpacing != 0)
 159 |     |         // this should pass price at the claim tick
 160 |     |             locals.previousFullTick = TickMap.roundBack(params.claim, constants, params.zeroForOne, ConstantProduct.getPriceAtTick(params.claim, constants));
 161 |     |         else
 162 |     |             locals.previousFullTick = params.claim;
 163 |     |         locals.pricePrevious = ConstantProduct.getPriceAtTick(locals.previousFullTick, constants);
 164 |     |         if (params.zeroForOne ? locals.previousFullTick > params.lower
 165 |     |                               : locals.previousFullTick < params.upper) {
 166 |     |             
 167 |     |             // claim amounts up to latest full tick crossed
 168 |     |             cache.position.amountIn += uint128(params.zeroForOne ? ConstantProduct.getDy(cache.position.liquidity, cache.priceLower, locals.pricePrevious, false)
 169 |     |                                                                  : ConstantProduct.getDx(cache.position.liquidity, locals.pricePrevious, cache.priceUpper, false));
 170 |     |         }
 171 |     |         if (params.amount > 0) {
 172 |     |            // if tick hasn't been set back calculate amountIn
 173 |     |             if (params.zeroForOne ? cache.priceClaim > locals.pricePrevious
 174 |     |                                   : cache.priceClaim < locals.pricePrevious) {
 175 |     |                 // allow partial tick claim if removing liquidity
 176 |     |                 cache.position.amountIn += uint128(params.zeroForOne ? ConstantProduct.getDy(params.amount, locals.pricePrevious, cache.priceClaim, false)
 177 |     |                                                                      : ConstantProduct.getDx(params.amount, cache.priceClaim, locals.pricePrevious, false));
 178 |     |             }
 179 |     |             // use priceClaim if tick hasn't been set back
 180 |     |             // else use claimPriceLast to calculate amountOut
 181 |     |             if (params.claim != (params.zeroForOne ? params.upper : params.lower)) {
 182 |     |                 cache.position.amountOut += uint128(params.zeroForOne ? ConstantProduct.getDx(params.amount, cache.priceClaim, cache.priceUpper, false)
 183 |     |                                                                       : ConstantProduct.getDy(params.amount, cache.priceLower, cache.priceClaim, false));
 184 |     |             }
 185 |     |         }
 186 |     |         // take protocol fee if needed
 187 |     |         if (cache.pool.protocolFee > 0 && cache.position.amountIn > 0) {
 188 |     |             uint128 protocolFeeAmount = cache.position.amountIn * cache.pool.protocolFee / 1e6;
 189 |     |             cache.position.amountIn -= protocolFeeAmount;
 190 |     |             cache.pool.protocolFees += protocolFeeAmount;
 191 |     |         }
 192 |     | 
 193 |     |         return cache;
 194 |     |     }
 195 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/limit/EpochMap.sol
   1 |     | // SPDX-License-Identifier: BUSL-1.1
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | import '../math/ConstantProduct.sol';
   5 |     | import '../../interfaces/limit/ILimitPoolStructs.sol';
   6 |     | 
   7 |     | library EpochMap {
   8 |     |     function set(
   9 |     |         int24  tick,
  10 |     |         bool zeroForOne,
  11 |     |         uint256 epoch,
  12 |     |         PoolsharkStructs.TickMap storage tickMap,
  13 |     |         PoolsharkStructs.Immutables memory constants
  14 |     |     ) internal {
  15 |     |         (
  16 |     |             uint256 tickIndex,
  17 |     |             uint256 wordIndex,
  18 |     |             uint256 blockIndex,
  19 |     |             uint256 volumeIndex
  20 |     |         ) = getIndices(tick, constants);
  21 |     |         // assert epoch isn't bigger than max uint32
  22 |     |         uint256 epochValue = zeroForOne ? tickMap.epochs0[volumeIndex][blockIndex][wordIndex]
  23 |     |                                         : tickMap.epochs1[volumeIndex][blockIndex][wordIndex];
  24 |     |         // clear previous value
  25 |     |         epochValue &=  ~(((1 << 9) - 1) << ((tickIndex & 0x7) * 32));
  26 |     |         // add new value to word
  27 |     |         epochValue |= epoch << ((tickIndex & 0x7) * 32);
  28 |     |         // store word in map
  29 |     |         zeroForOne ? tickMap.epochs0[volumeIndex][blockIndex][wordIndex] = epochValue
  30 |     |                    : tickMap.epochs1[volumeIndex][blockIndex][wordIndex] = epochValue;
  31 |     |     }
  32 |     | 
  33 |     |     function get(
  34 |     |         int24 tick,
  35 |     |         bool zeroForOne,
  36 |     |         PoolsharkStructs.TickMap storage tickMap,
  37 |     |         PoolsharkStructs.Immutables memory constants
  38 |     |     ) internal view returns (
  39 |     |         uint32 epoch
  40 |     |     ) {
  41 |     |         (
  42 |     |             uint256 tickIndex,
  43 |     |             uint256 wordIndex,
  44 |     |             uint256 blockIndex,
  45 |     |             uint256 volumeIndex
  46 |     |         ) = getIndices(tick, constants);
  47 |     | 
  48 |     |         uint256 epochValue = zeroForOne ? tickMap.epochs0[volumeIndex][blockIndex][wordIndex]
  49 |     |                                         : tickMap.epochs1[volumeIndex][blockIndex][wordIndex];
  50 |     |         // right shift so first 8 bits are epoch value
  51 |     |         epochValue >>= ((tickIndex & 0x7) * 32);
  52 |     |         // clear other bits
  53 |     |         epochValue &= ((1 << 32) - 1);
  54 |     |         return uint32(epochValue);
  55 |     |     }
  56 |     | 
  57 |     |     function getIndices(
  58 |     |         int24 tick,
  59 |     |         PoolsharkStructs.Immutables memory constants
  60 |     |     ) internal pure returns (
  61 |     |             uint256 tickIndex,
  62 |     |             uint256 wordIndex,
  63 |     |             uint256 blockIndex,
  64 |     |             uint256 volumeIndex
  65 |     |         )
  66 |     |     {
  67 |     |         unchecked {
  68 |     |             if (tick > ConstantProduct.maxTick(constants.tickSpacing)) require (false, 'TickIndexOverflow()');
  69 |     |             if (tick < ConstantProduct.minTick(constants.tickSpacing)) require (false, 'TickIndexUnderflow()');
  70 |     |             if (tick % (constants.tickSpacing / 2) != 0) {
  71 |     |                 require (false, 'TickIndexInvalid()');
  72 |     |             } 
  73 |     |             tickIndex = uint256(int256((_round(tick, constants.tickSpacing / 2) 
  74 |     |                                         - _round(ConstantProduct.MIN_TICK, constants.tickSpacing / 2)) 
  75 |     |                                         / (constants.tickSpacing / 2)));
  76 |     |             wordIndex = tickIndex >> 3;        // 2^3 epochs per word
  77 |     |             blockIndex = tickIndex >> 11;      // 2^8 words per block
  78 |     |             volumeIndex = tickIndex >> 19;     // 2^8 blocks per volume
  79 |     |             if (blockIndex > 2046) require (false, 'BlockIndexOverflow()');
  80 |     |         }
  81 |     |     }
  82 |     | 
  83 |     |     function _tick (
  84 |     |         uint256 tickIndex,
  85 |     |         PoolsharkStructs.Immutables memory constants
  86 |     |     ) internal pure returns (
  87 |     |         int24 tick
  88 |     |     ) {
  89 |     |         unchecked {
  90 |     |             if (tickIndex > uint24(_round(ConstantProduct.MAX_TICK, constants.tickSpacing) * 2) * 2) 
  91 |     |                 require(false, 'TickIndexOverflow()');
  92 |     |             tick = int24(int256(tickIndex) * (constants.tickSpacing / 2) + _round(ConstantProduct.MIN_TICK, constants.tickSpacing / 2));
  93 |     |         }
  94 |     |     }
  95 |     | 
  96 |     |     function _round(
  97 |     |         int24 tick,
  98 |     |         int24 tickSpacing
  99 |     |     ) internal pure returns (
 100 |     |         int24 roundedTick
 101 |     |     ) {
 102 |     |         return tick / tickSpacing * tickSpacing;
 103 |     |     }
 104 |     | }
 105 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/limit/PositionsLimit.sol
   1 |     | // SPDX-License-Identifier: BUSL-1.1
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | import './TicksLimit.sol';
   5 |     | import '../../interfaces/range/IRangePoolStructs.sol';
   6 |     | import '../../interfaces/limit/ILimitPoolStructs.sol';
   7 |     | import '../math/OverflowMath.sol';
   8 |     | import './Claims.sol';
   9 |     | import './EpochMap.sol';
  10 |     | import '../utils/SafeCast.sol';
  11 |     | import '../Ticks.sol';
  12 |     | 
  13 |     | /// @notice Position management library for ranged liquidity.
  14 |     | /// @notice Position management library for ranged liquidity.
  15 |     | library PositionsLimit {
  16 |     |     using SafeCast for uint256;
  17 |     | 
  18 |     |     event BurnLimit(
  19 |     |         address indexed to,
  20 |     |         int24 lower,
  21 |     |         int24 upper,
  22 |     |         int24 claim,
  23 |     |         bool zeroForOne,
  24 |     |         uint128 liquidityBurned,
  25 |     |         uint128 tokenInClaimed,
  26 |     |         uint128 tokenOutBurned
  27 |     |     );
  28 |     | 
  29 |     |     function resize(
  30 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
  31 |     |         IRangePoolStructs.Sample[65535] storage samples,
  32 |     |         PoolsharkStructs.TickMap storage rangeTickMap,
  33 |     |         PoolsharkStructs.TickMap storage limitTickMap,
  34 |     |         ILimitPoolStructs.MintLimitParams memory params,
  35 |     |         ILimitPoolStructs.MintLimitCache memory cache
  36 |     |     ) internal returns (
  37 |     |         ILimitPoolStructs.MintLimitParams memory,
  38 |     |         ILimitPoolStructs.MintLimitCache memory
  39 |     |     )
  40 |     |     {
  41 |     |         ConstantProduct.checkTicks(params.lower, params.upper, cache.constants.tickSpacing);
  42 |     | 
  43 |     |         cache.priceLower = ConstantProduct.getPriceAtTick(params.lower, cache.constants);
  44 |     |         cache.priceUpper = ConstantProduct.getPriceAtTick(params.upper, cache.constants);
  45 |     | 
  46 |     |         // cannot mint empty position
  47 |     |         if (params.amount == 0) require (false, 'PositionAmountZero()');
  48 |     | 
  49 |     |         cache.mintSize = uint256(params.mintPercent) * uint256(params.amount) / 1e28;
  50 |     |         // calculate L constant
  51 |     |         cache.liquidityMinted = ConstantProduct.getLiquidityForAmounts(
  52 |     |             cache.priceLower,
  53 |     |             cache.priceUpper,
  54 |     |             params.zeroForOne ? cache.priceLower : cache.priceUpper,
  55 |     |             params.zeroForOne ? 0 : uint256(params.amount),
  56 |     |             params.zeroForOne ? uint256(params.amount) : 0
  57 |     |         );
  58 |     | 
  59 |     |         if (cache.liquidityMinted == 0) require (false, 'PositionLiquidityZero()');
  60 |     |         // calculate price limit by using half of input
  61 |     |         {
  62 |     |             cache.priceLimit = params.zeroForOne ? ConstantProduct.getNewPrice(cache.priceUpper, cache.liquidityMinted, params.amount / 2, true, true)
  63 |     |                                                  : ConstantProduct.getNewPrice(cache.priceLower, cache.liquidityMinted, params.amount / 2, false, true);
  64 |     |             if (cache.priceLimit == 0) require (false, 'PriceLimitZero()');
  65 |     |             // get tick at price
  66 |     |             cache.tickLimit = ConstantProduct.getTickAtPrice(cache.priceLimit.toUint160(), cache.constants);
  67 |     |             // round to nearest tick spacing
  68 |     |             cache.priceLimit = ConstantProduct.getPriceAtTick(cache.tickLimit, cache.constants);
  69 |     |         }
  70 |     | 
  71 |     |         PoolsharkStructs.SwapCache memory swapCache;
  72 |     |         swapCache.state = cache.state;
  73 |     |         swapCache.constants = cache.constants;
  74 |     |         swapCache.price = cache.state.pool.price;
  75 |     | 
  76 |     |         // swap zero if no liquidity near market price
  77 |     |         if (cache.state.pool.liquidity == 0 && 
  78 |     |             (params.zeroForOne ? swapCache.price > cache.priceLower
  79 |     |                                : swapCache.price < cache.priceUpper)) {
  80 |     |             swapCache = Ticks.swap(
  81 |     |                 ticks,
  82 |     |                 samples,
  83 |     |                 rangeTickMap,
  84 |     |                 limitTickMap,
  85 |     |                 PoolsharkStructs.SwapParams({
  86 |     |                     to: params.to,
  87 |     |                     priceLimit: (params.zeroForOne ? cache.priceLower 
  88 |     |                                                    : cache.priceUpper).toUint160(),
  89 |     |                     amount: 0,
  90 |     |                     //TODO: handle exactOut
  91 |     |                     exactIn: true,
  92 |     |                     zeroForOne: params.zeroForOne,
  93 |     |                     callbackData: abi.encodePacked(bytes1(0x0))
  94 |     |                 }),
  95 |     |                 swapCache
  96 |     |             );
  97 |     |         }
  98 |     | 
  99 |     |         // only swap if priceLimit is beyond current pool price
 100 |     |         if (params.zeroForOne ? cache.priceLimit < swapCache.price
 101 |     |                               : cache.priceLimit > swapCache.price) {
 102 |     |             // swap and save the pool state
 103 |     |             swapCache = Ticks.swap(
 104 |     |                 ticks,
 105 |     |                 samples,
 106 |     |                 rangeTickMap,
 107 |     |                 limitTickMap,
 108 |     |                 PoolsharkStructs.SwapParams({
 109 |     |                     to: params.to,
 110 |     |                     priceLimit: cache.priceLimit.toUint160(),
 111 |     |                     amount: params.amount,
 112 |     |                     //TODO: handle exactOut
 113 |     |                     exactIn: true,
 114 |     |                     zeroForOne: params.zeroForOne,
 115 |     |                     callbackData: abi.encodePacked(bytes1(0x0))
 116 |     |                 }),
 117 |     |                 swapCache
 118 |     |             );
 119 |     |             // subtract from remaining input amount
 120 |     |             params.amount -= uint128(swapCache.input);
 121 |     | 
 122 |     |         }
 123 |     |         // save to cache
 124 |     |         cache.swapCache = swapCache;
 125 |     |         cache.state = swapCache.state;
 126 |     | 
 127 |     |         if (params.amount < cache.mintSize) params.amount = 0;
 128 |     |         // move start tick based on amount filled in swap
 129 |     |         if ((params.amount > 0 && swapCache.input > 0) ||
 130 |     |             (params.zeroForOne ? cache.priceLower < swapCache.price
 131 |     |                                : cache.priceUpper > swapCache.price)
 132 |     |         ) {
 133 |     |             // move the tick limit based on pool.tickAtPrice
 134 |     |             if (params.zeroForOne ? cache.priceLower < swapCache.price
 135 |     |                                   : cache.priceUpper > swapCache.price) {
 136 |     |                 cache.tickLimit = swapCache.state.pool.tickAtPrice;
 137 |     |             }
 138 |     |             // round ahead tickLimit to avoid crossing epochs
 139 |     |             cache.tickLimit = TickMap.roundAhead(cache.tickLimit, cache.constants, params.zeroForOne, swapCache.price);
 140 |     |             if (params.zeroForOne) {
 141 |     |                 if (cache.priceLower < swapCache.price) {
 142 |     |                     // if rounding goes past limit trim position
 143 |     |                     /// @dev - if swap didn't go to limit user would be 100% filled
 144 |     |                     params.lower = cache.tickLimit;
 145 |     |                     cache.priceLower = ConstantProduct.getPriceAtTick(params.lower, cache.constants);
 146 |     |                 }
 147 |     |                 if (params.lower >= params.upper && 
 148 |     |                     params.lower < ConstantProduct.maxTick(cache.constants.tickSpacing) - cache.constants.tickSpacing
 149 |     |                 ) {
 150 |     |                     params.upper = params.lower + cache.constants.tickSpacing;
 151 |     |                 }
 152 |     |                 cache.priceUpper = ConstantProduct.getPriceAtTick(params.upper, cache.constants);
 153 |     |             } else {
 154 |     |                 if (cache.priceUpper > swapCache.price) {
 155 |     |                     // if rounding goes past limit trim position
 156 |     |                     params.upper = cache.tickLimit;
 157 |     |                     cache.priceUpper = ConstantProduct.getPriceAtTick(params.upper, cache.constants);
 158 |     |                 }
 159 |     |                 if (params.upper <= params.lower && 
 160 |     |                     params.lower > ConstantProduct.minTick(cache.constants.tickSpacing) + cache.constants.tickSpacing
 161 |     |                 ) {
 162 |     |                     params.lower = params.upper - cache.constants.tickSpacing;
 163 |     |                 }
 164 |     |                 cache.priceLower = ConstantProduct.getPriceAtTick(params.lower, cache.constants);
 165 |     |             }
 166 |     |             if (params.amount > 0 && params.lower < params.upper)
 167 |     |                 cache.liquidityMinted = ConstantProduct.getLiquidityForAmounts(
 168 |     |                     cache.priceLower,
 169 |     |                     cache.priceUpper,
 170 |     |                     params.zeroForOne ? cache.priceLower : cache.priceUpper,
 171 |     |                     params.zeroForOne ? 0 : uint256(params.amount),
 172 |     |                     params.zeroForOne ? uint256(params.amount) : 0
 173 |     |                 );
 174 |     |             else
 175 |     |                 /// @auditor unnecessary since params.amount is 0
 176 |     |                 cache.liquidityMinted = 0;
 177 |     |             cache.state.epoch += 1;
 178 |     |         }
 179 |     |         // console.log('position bounds end', uint24(-params.lower), uint24(params.upper), uint24(cache.state.pool.tickAtPrice));
 180 |     | 
 181 |     |         if (params.lower >= params.upper) {
 182 |     |             params.amount = 0;
 183 |     |         }
 184 |     | 
 185 |     |         return (
 186 |     |             params,
 187 |     |             cache
 188 |     |         );
 189 |     |     }
 190 |     | 
 191 |     |     function add(
 192 |     |         ILimitPoolStructs.MintLimitCache memory cache,
 193 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
 194 |     |         PoolsharkStructs.TickMap storage tickMap,
 195 |     |         ILimitPoolStructs.MintLimitParams memory params
 196 |     |     ) internal returns (
 197 |     |         PoolsharkStructs.LimitPoolState memory,
 198 |     |         ILimitPoolStructs.LimitPosition memory
 199 |     |     ) {
 200 |     |         if (cache.liquidityMinted == 0) return (cache.pool, cache.position);
 201 |     | 
 202 |     |         if (cache.position.liquidity == 0) {
 203 |     |             cache.position.epochLast = cache.state.epoch;
 204 |     |         } else {
 205 |     |             // safety check in case we somehow get here
 206 |     |             if (
 207 |     |                 params.zeroForOne
 208 |     |                     ? EpochMap.get(params.lower, params.zeroForOne, tickMap, cache.constants)
 209 |     |                             > cache.position.epochLast
 210 |     |                     : EpochMap.get(params.upper, params.zeroForOne, tickMap, cache.constants)
 211 |     |                             > cache.position.epochLast
 212 |     |             ) {
 213 |     |                 require (false, string.concat('UpdatePositionFirstAt(', String.from(params.lower), ', ', String.from(params.upper), ')'));
 214 |     |             }
 215 |     |             /// @auditor maybe this shouldn't be a revert but rather just not mint the position?
 216 |     |         }
 217 |     |         
 218 |     |         // add liquidity to ticks
 219 |     |         TicksLimit.insert(
 220 |     |             ticks,
 221 |     |             tickMap,
 222 |     |             cache,
 223 |     |             params
 224 |     |         );
 225 |     | 
 226 |     |         // update liquidity global
 227 |     |         cache.state.liquidityGlobal += uint128(cache.liquidityMinted);
 228 |     | 
 229 |     |         cache.position.liquidity += uint128(cache.liquidityMinted);
 230 |     | 
 231 |     |         return (cache.pool, cache.position);
 232 |     |     }
 233 |     | 
 234 |     |     //Limitxxx would be easier
 235 |     | 
 236 |     |     function remove(
 237 |     |         mapping(address => mapping(int24 => mapping(int24 => ILimitPoolStructs.LimitPosition)))
 238 |     |             storage positions,
 239 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
 240 |     |         PoolsharkStructs.TickMap storage tickMap,
 241 |     |         PoolsharkStructs.GlobalState memory state,
 242 |     |         ILimitPoolStructs.UpdateLimitParams memory params,
 243 |     |         PoolsharkStructs.Immutables memory constants
 244 |     |     ) internal returns (
 245 |     |         PoolsharkStructs.GlobalState memory,
 246 |     |         ILimitPoolStructs.LimitPosition memory
 247 |     |     ) {
 248 |     |         // initialize cache
 249 |     |         ILimitPoolStructs.UpdateCache memory cache;
 250 |     |         cache.position = positions[msg.sender][params.lower][params.upper];
 251 |     |         cache.priceLower = ConstantProduct.getPriceAtTick(params.lower, constants);
 252 |     |         cache.priceUpper = ConstantProduct.getPriceAtTick(params.upper, constants);
 253 |     |         cache.removeLower = true; cache.removeUpper = true;
 254 |     |         cache.pool = params.zeroForOne ? cache.state.pool0 : cache.state.pool1;
 255 |     | 
 256 |     |         // convert percentage to liquidity amount
 257 |     |         params.amount = _convert(cache.position.liquidity, params.amount);
 258 |     | 
 259 |     |         // early return if no liquidity to remove
 260 |     |         if (params.amount == 0) return (state, cache.position);
 261 |     |         if (params.amount > cache.position.liquidity) {
 262 |     |             require (false, 'NotEnoughPositionLiquidity()');
 263 |     |         }
 264 |     |         /// @dev - validate position has not been crossed into
 265 |     |         if (params.zeroForOne) {
 266 |     |             if (EpochMap.get(params.lower, params.zeroForOne, tickMap, constants)
 267 |     |                         > cache.position.epochLast) {
 268 |     |                 int24 nextTick = TickMap.next(tickMap, params.lower, constants.tickSpacing, false);
 269 |     |                 if (cache.pool.price > cache.priceLower ||
 270 |     |                     EpochMap.get(nextTick, params.zeroForOne, tickMap, constants)
 271 |     |                         > cache.position.epochLast) {
 272 |     |                     require (false, 'WrongTickClaimedAt7()');            
 273 |     |                 }
 274 |     |                 if (cache.pool.price == cache.priceLower) {
 275 |     |                     EchidnaAssertions.assertLiquidityUnderflows(cache.pool.liquidity, params.amount, "PLU-1");
 276 |     |                     cache.pool.liquidity -= params.amount;
 277 |     |                 }
 278 |     |             }
 279 |     |             // if pool price is further along
 280 |     |             // OR next tick has a greater epoch
 281 |     |         } else {
 282 |     |             if (EpochMap.get(params.upper, params.zeroForOne, tickMap, constants)
 283 |     |                         > cache.position.epochLast) {
 284 |     |                 int24 previousTick = TickMap.previous(tickMap, params.upper, constants.tickSpacing, false);
 285 |     |                 if (cache.pool.price < cache.priceUpper ||
 286 |     |                     EpochMap.get(previousTick, params.zeroForOne, tickMap, constants)
 287 |     |                         > cache.position.epochLast) {
 288 |     |                     require (false, 'WrongTickClaimedAt8()');            
 289 |     |                 }
 290 |     |                 if (cache.pool.price == cache.priceUpper) {
 291 |     |                     EchidnaAssertions.assertLiquidityUnderflows(cache.pool.liquidity, params.amount, "PLU-2");
 292 |     |                     cache.pool.liquidity -= params.amount;
 293 |     |                 }
 294 |     |             }
 295 |     |         }
 296 |     | 
 297 |     |         TicksLimit.remove(
 298 |     |             ticks,
 299 |     |             tickMap,
 300 |     |             cache,
 301 |     |             params,
 302 |     |             constants
 303 |     |         );
 304 |     | 
 305 |     |         // update liquidity global
 306 |     |         EchidnaAssertions.assertLiquidityGlobalUnderflows(state.liquidityGlobal, params.amount, "LGU-1");
 307 |     |         state.liquidityGlobal -= params.amount;
 308 |     | 
 309 |     |         cache.position.amountOut += uint128(
 310 |     |             params.zeroForOne
 311 |     |                 ? ConstantProduct.getDx(params.amount, cache.priceLower, cache.priceUpper, false)
 312 |     |                 : ConstantProduct.getDy(params.amount, cache.priceLower, cache.priceUpper, false)
 313 |     |         );
 314 |     | 
 315 |     |         cache.position.liquidity -= uint128(params.amount);
 316 |     |         positions[msg.sender][params.lower][params.upper] = cache.position;
 317 |     | 
 318 |     |         if (params.amount > 0) {
 319 |     |             emit BurnLimit(
 320 |     |                     params.to,
 321 |     |                     params.lower,
 322 |     |                     params.upper,
 323 |     |                     params.zeroForOne ? params.lower : params.upper,
 324 |     |                     params.zeroForOne,
 325 |     |                     params.amount,
 326 |     |                     0,
 327 |     |                     cache.position.amountOut
 328 |     |             );
 329 |     |         }
 330 |     |         // save pool state to memory
 331 |     |         if (params.zeroForOne) cache.state.pool0 = cache.pool;
 332 |     |         else cache.state.pool1 = cache.pool;
 333 |     | 
 334 |     |         return (state, cache.position);
 335 |     |     }
 336 |     | 
 337 |     |     function update(
 338 |     |         mapping(address => mapping(int24 => mapping(int24 => ILimitPoolStructs.LimitPosition)))
 339 |     |             storage positions,
 340 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
 341 |     |         PoolsharkStructs.TickMap storage tickMap,
 342 |     |         ILimitPoolStructs.GlobalState memory state,
 343 |     |         ILimitPoolStructs.UpdateLimitParams memory params,
 344 |     |         PoolsharkStructs.Immutables memory constants
 345 |     |     ) internal returns (
 346 |     |         ILimitPoolStructs.GlobalState memory,
 347 |     |         ILimitPoolStructs.LimitPosition memory,
 348 |     |         int24
 349 |     |     )
 350 |     |     {
 351 |     |         ILimitPoolStructs.UpdateCache memory cache;
 352 |     |         (
 353 |     |             params,
 354 |     |             cache,
 355 |     |             state
 356 |     |         ) = _deltas(
 357 |     |             positions,
 358 |     |             ticks,
 359 |     |             tickMap,
 360 |     |             state,
 361 |     |             params,
 362 |     |             constants
 363 |     |         );
 364 |     | 
 365 |     |         if (cache.earlyReturn)
 366 |     |             return (state, cache.position, params.claim);
 367 |     | 
 368 |     |         // update pool liquidity
 369 |     |         if (cache.priceClaim == cache.pool.price && params.amount > 0) {
 370 |     |             // handle pool.price at edge of range
 371 |     |             if (params.zeroForOne ? cache.priceClaim < cache.priceUpper
 372 |     |                                   : cache.priceClaim > cache.priceLower){
 373 |     |                 EchidnaAssertions.assertLiquidityUnderflows(cache.pool.liquidity, params.amount, "PLU-3");
 374 |     |                 cache.pool.liquidity -= params.amount;
 375 |     |             }
 376 |     |         }
 377 |     | 
 378 |     | 
 379 |     |         if (params.amount > 0) {
 380 |     |             if (params.claim == (params.zeroForOne ? params.upper : params.lower)) {
 381 |     |                 // only remove once if final tick of position
 382 |     |                 cache.removeLower = false;
 383 |     |                 cache.removeUpper = false;
 384 |     |             } else {
 385 |     |                 params.zeroForOne ? cache.removeUpper = true 
 386 |     |                                   : cache.removeLower = true;
 387 |     |             }
 388 |     |             if (params.zeroForOne) {
 389 |     |                 if (params.claim == params.lower && 
 390 |     |                     cache.pool.price < cache.priceLower
 391 |     |                 ) {
 392 |     |                     cache.removeLower = true;
 393 |     |                 } else if (params.claim % constants.tickSpacing != 0 && 
 394 |     |                     cache.pool.price < cache.priceClaim)
 395 |     |                     cache.removeLower = true;
 396 |     |             } else {
 397 |     |                 if (params.claim == params.upper &&
 398 |     |                     cache.pool.price > cache.priceUpper
 399 |     |                 )
 400 |     |                     cache.removeUpper = true;
 401 |     |                 else if (params.claim % constants.tickSpacing != 0 &&
 402 |     |                             cache.pool.price > cache.priceClaim)
 403 |     |                     cache.removeUpper = true;
 404 |     |             }
 405 |     |             TicksLimit.remove(
 406 |     |                 ticks,
 407 |     |                 tickMap,
 408 |     |                 cache,
 409 |     |                 params,
 410 |     |                 constants
 411 |     |             );
 412 |     |             // update position liquidity
 413 |     |             cache.position.liquidity -= uint128(params.amount);
 414 |     |             // update global liquidity
 415 |     |             EchidnaAssertions.assertLiquidityGlobalUnderflows(state.liquidityGlobal, params.amount, "LGU-2");
 416 |     |             state.liquidityGlobal -= params.amount;
 417 |     |         }
 418 |     |         //TODO: set params.amount = 0 if end tick so correct value is emitted for event
 419 |     |         if (params.zeroForOne ? params.claim == params.upper
 420 |     |                               : params.claim == params.lower) {
 421 |     |             EchidnaAssertions.assertLiquidityGlobalUnderflows(state.liquidityGlobal, cache.position.liquidity, "LGU-3");
 422 |     |             state.liquidityGlobal -= cache.position.liquidity;
 423 |     |             // set params.amount for BurnLimit event
 424 |     |             params.amount = cache.position.liquidity;
 425 |     |             cache.position.liquidity = 0;
 426 |     |         }
 427 |     |         // clear out old position
 428 |     |         if (params.zeroForOne ? params.claim != params.lower 
 429 |     |                               : params.claim != params.upper) {
 430 |     |             
 431 |     |             /// @dev - this also clears out position end claims
 432 |     |             if (params.zeroForOne ? params.claim == params.lower 
 433 |     |                                   : params.claim == params.upper) {
 434 |     |                 // subtract remaining position liquidity out from global
 435 |     |                 EchidnaAssertions.assertLiquidityGlobalUnderflows(state.liquidityGlobal, cache.position.liquidity, "LGU-4");
 436 |     |                 state.liquidityGlobal -= cache.position.liquidity;
 437 |     |             }
 438 |     |             delete positions[msg.sender][params.lower][params.upper];
 439 |     |         }
 440 |     |         // clear position if empty
 441 |     |         if (cache.position.liquidity == 0) {
 442 |     |             cache.position.epochLast = 0;
 443 |     |             cache.position.crossedInto = false;
 444 |     |         }
 445 |     | 
 446 |     |         // round back claim tick for storage
 447 |     |         if (params.claim % constants.tickSpacing != 0)
 448 |     |             params.claim = TickMap.roundBack(params.claim, constants, params.zeroForOne, cache.priceClaim);
 449 |     |         
 450 |     |         emit BurnLimit(
 451 |     |             params.to,
 452 |     |             params.lower,
 453 |     |             params.upper,
 454 |     |             params.claim,
 455 |     |             params.zeroForOne,
 456 |     |             params.amount,
 457 |     |             cache.position.amountIn,
 458 |     |             cache.position.amountOut
 459 |     |         );
 460 |     |         // save pool to globalState
 461 |     |         if (params.zeroForOne) state.pool0 = cache.pool;
 462 |     |         else state.pool1 = cache.pool;
 463 |     | 
 464 |     |         // return cached position in memory and transfer out
 465 |     |         return (state, cache.position, params.claim);
 466 |     |     }
 467 |     | 
 468 |     |     function snapshot(
 469 |     |         mapping(address => mapping(int24 => mapping(int24 => ILimitPoolStructs.LimitPosition)))
 470 |     |             storage positions,
 471 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
 472 |     |         PoolsharkStructs.TickMap storage tickMap,
 473 |     |         ILimitPoolStructs.GlobalState memory state,
 474 |     |         ILimitPoolStructs.UpdateLimitParams memory params,
 475 |     |         PoolsharkStructs.Immutables memory constants
 476 |     |     ) internal returns (
 477 |     |         ILimitPoolStructs.LimitPosition memory
 478 |     |     ) {
 479 |     |         ILimitPoolStructs.UpdateCache memory cache;
 480 |     |         (
 481 |     |             params,
 482 |     |             cache,
 483 |     |             state
 484 |     |         ) = _deltas(
 485 |     |             positions,
 486 |     |             ticks,
 487 |     |             tickMap,
 488 |     |             state,
 489 |     |             params,
 490 |     |             constants
 491 |     |         );
 492 |     | 
 493 |     |         if (cache.earlyReturn)
 494 |     |             return (cache.position);
 495 |     | 
 496 |     |         if (params.amount > 0) {
 497 |     |             cache.position.liquidity -= uint128(params.amount);
 498 |     |         }
 499 |     |         
 500 |     |         // clear position values if empty
 501 |     |         if (cache.position.liquidity == 0) {
 502 |     |             cache.position.epochLast = 0;
 503 |     |             cache.position.crossedInto = false;
 504 |     |         }    
 505 |     |         return cache.position;
 506 |     |     }
 507 |     | 
 508 |     |     function _convert(
 509 |     |         uint128 liquidity,
 510 |     |         uint128 percent
 511 |     |     ) internal pure returns (
 512 |     |         uint128
 513 |     |     ) {
 514 |     |         // convert percentage to liquidity amount
 515 |     |         if (percent > 1e38) percent = 1e38;
 516 |     |         if (liquidity == 0 && percent > 0) require (false, 'PositionNotFound()');
 517 |     |         return uint128(uint256(liquidity) * uint256(percent) / 1e38);
 518 |     |     }
 519 |     | 
 520 |     |     function _deltas(
 521 |     |         mapping(address => mapping(int24 => mapping(int24 => ILimitPoolStructs.LimitPosition)))
 522 |     |             storage positions,
 523 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
 524 |     |         PoolsharkStructs.TickMap storage tickMap,
 525 |     |         ILimitPoolStructs.GlobalState memory state,
 526 |     |         ILimitPoolStructs.UpdateLimitParams memory params,
 527 |     |         PoolsharkStructs.Immutables memory constants
 528 |     |     ) internal returns (
 529 |     |         ILimitPoolStructs.UpdateLimitParams memory,
 530 |     |         ILimitPoolStructs.UpdateCache memory,
 531 |     |         ILimitPoolStructs.GlobalState memory
 532 |     |     ) {
 533 |     |         ILimitPoolStructs.UpdateCache memory cache = ILimitPoolStructs.UpdateCache({
 534 |     |             state: state,
 535 |     |             position: positions[params.owner][params.lower][params.upper],
 536 |     |             pool: params.zeroForOne ? state.pool0 : state.pool1,
 537 |     |             priceLower: ConstantProduct.getPriceAtTick(params.lower, constants),
 538 |     |             priceClaim: ticks[params.claim].limit.priceAt == 0 ? ConstantProduct.getPriceAtTick(params.claim, constants)
 539 |     |                                                                : ticks[params.claim].limit.priceAt,
 540 |     |             priceUpper: ConstantProduct.getPriceAtTick(params.upper, constants),
 541 |     |             claimTick: ticks[params.claim].limit,
 542 |     |             earlyReturn: false,
 543 |     |             removeLower: false,
 544 |     |             removeUpper: false
 545 |     |         });
 546 |     | 
 547 |     |         params.amount = _convert(cache.position.liquidity, params.amount);
 548 |     | 
 549 |     |         // check claim is valid
 550 |     |         (params, cache) = Claims.validate(
 551 |     |             positions,
 552 |     |             ticks,
 553 |     |             tickMap,
 554 |     |             cache.pool,
 555 |     |             params,
 556 |     |             cache,
 557 |     |             constants
 558 |     |         );
 559 |     |         if (cache.earlyReturn) {
 560 |     |             return (params, cache, state);
 561 |     |         }
 562 |     |         // calculate position deltas
 563 |     |         cache = Claims.getDeltas(cache, params, constants);
 564 |     | 
 565 |     | 
 566 |     | 
 567 |     |         return (params, cache, state);
 568 |     |     }
 569 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/limit/TicksLimit.sol
   1 |     | // SPDX-License-Identifier: GPLv3
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | import '../../interfaces/limit/ILimitPoolStructs.sol';
   5 |     | import '../../interfaces/limit/ILimitPoolFactory.sol';
   6 |     | import '../../base/structs/LimitPoolFactoryStructs.sol';
   7 |     | import '../../interfaces/limit/ILimitPool.sol';
   8 |     | import '../math/ConstantProduct.sol';
   9 |     | import './PositionsLimit.sol';
  10 |     | import '../math/OverflowMath.sol';
  11 |     | import '../TickMap.sol';
  12 |     | import './EpochMap.sol';
  13 |     | import '../range/Samples.sol';
  14 |     | import '../utils/SafeCast.sol';
  15 |     | 
  16 |     | /// @notice Tick management library for limit pools
  17 |     | library TicksLimit {
  18 |     |     error LiquidityOverflow();
  19 |     |     error LiquidityUnderflow();
  20 |     |     error InvalidLowerTick();
  21 |     |     error InvalidUpperTick();
  22 |     |     error InvalidPositionAmount();
  23 |     |     error InvalidPositionBounds();
  24 |     | 
  25 |     |     using SafeCast for uint256;
  26 |     | 
  27 |     |     uint256 internal constant Q96 = 0x1000000000000000000000000;
  28 |     | 
  29 |     |     function validate(
  30 |     |         int24 lower,
  31 |     |         int24 upper,
  32 |     |         int24 tickSpacing
  33 |     |     ) internal pure {
  34 |     |         if (lower % tickSpacing != 0) require(false, 'InvalidLowerTick()');
  35 |     |         if (lower <= ConstantProduct.MIN_TICK) require(false, 'InvalidLowerTick()');
  36 |     |         if (upper % tickSpacing != 0) require(false, 'InvalidUpperTick()');
  37 |     |         if (upper >= ConstantProduct.MAX_TICK) require(false, 'InvalidUpperTick()');
  38 |     |         if (lower >= upper) require(false, 'InvalidPositionBounds()');
  39 |     |     }
  40 |     | 
  41 |     |     function insert(
  42 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
  43 |     |         PoolsharkStructs.TickMap storage tickMap,
  44 |     |         ILimitPoolStructs.MintLimitCache memory cache,
  45 |     |         ILimitPoolStructs.MintLimitParams memory params
  46 |     |     ) internal {
  47 |     |         /// @auditor - validation of ticks is in Positions.validate
  48 |     |         if (cache.liquidityMinted > (uint128(type(int128).max) - cache.state.liquidityGlobal) )
  49 |     |             require (false, 'LiquidityOverflow()');
  50 |     | 
  51 |     |         int256 liquidityMinted = int256(cache.liquidityMinted);
  52 |     | 
  53 |     |         // check if adding liquidity necessary
  54 |     |         if (!params.zeroForOne || cache.priceLower > cache.pool.price) {
  55 |     |             // sets bit in map
  56 |     |             if(!TickMap.set(tickMap, params.lower, cache.constants.tickSpacing)){
  57 |     |                 // inherit epoch 
  58 |     |                 int24 tickAhead;
  59 |     |                 if (params.zeroForOne) {
  60 |     |                     tickAhead  = TickMap.next(tickMap, params.lower, cache.constants.tickSpacing, false);
  61 |     |                 } else {
  62 |     |                     tickAhead  = TickMap.previous(tickMap, params.lower, cache.constants.tickSpacing, false);
  63 |     |                 }
  64 |     |                 uint32 epochAhead = EpochMap.get(tickAhead, params.zeroForOne, tickMap, cache.constants);
  65 |     |                 EpochMap.set(params.lower, params.zeroForOne, epochAhead, tickMap, cache.constants);
  66 |     |             }
  67 |     |             PoolsharkStructs.LimitTick memory tickLower = ticks[params.lower].limit;
  68 |     |             if (params.zeroForOne) {
  69 |     |                 tickLower.liquidityDelta += int128(liquidityMinted);
  70 |     |             } else {
  71 |     |                 tickLower.liquidityDelta -= int128(liquidityMinted);
  72 |     |             }
  73 |     |             tickLower.liquidityAbsolute += cache.liquidityMinted.toUint128();
  74 |     |             ticks[params.lower].limit = tickLower;
  75 |     |         } else {
  76 |     |             /// @dev - i.e. if zeroForOne && cache.priceLower <= cache.pool.price
  77 |     |             cache.state.epoch += 1;
  78 |     |             // mark epoch on undercut tick
  79 |     |             EpochMap.set(params.lower, params.zeroForOne, cache.state.epoch, tickMap, cache.constants);
  80 |     |         }
  81 |     | 
  82 |     |         if (params.zeroForOne || cache.priceUpper < cache.pool.price) {
  83 |     |             if(!TickMap.set(tickMap, params.upper, cache.constants.tickSpacing)) {
  84 |     |                 int24 tickAhead;
  85 |     |                 if (params.zeroForOne) {
  86 |     |                     tickAhead  = TickMap.next(tickMap, params.upper, cache.constants.tickSpacing, false);
  87 |     |                 } else {
  88 |     |                     tickAhead  = TickMap.previous(tickMap, params.upper, cache.constants.tickSpacing, false);
  89 |     |                 }
  90 |     |                 uint32 epochAhead = EpochMap.get(tickAhead, params.zeroForOne, tickMap, cache.constants);
  91 |     |                 EpochMap.set(params.upper, params.zeroForOne, epochAhead, tickMap, cache.constants);
  92 |     |             }
  93 |     |             PoolsharkStructs.LimitTick memory tickUpper = ticks[params.upper].limit;
  94 |     |             if (params.zeroForOne) {
  95 |     |                 tickUpper.liquidityDelta -= int128(liquidityMinted);
  96 |     |             } else {
  97 |     |                 tickUpper.liquidityDelta += int128(liquidityMinted);
  98 |     |             }
  99 |     |             tickUpper.liquidityAbsolute += cache.liquidityMinted.toUint128();
 100 |     |             ticks[params.upper].limit = tickUpper;
 101 |     |         } else {
 102 |     |             /// @dev - i.e. if !zeroForOne && cache.priceUpper >= cache.pool.price
 103 |     |             cache.state.epoch += 1;
 104 |     |             // mark epoch on undercut tick
 105 |     |             EpochMap.set(params.upper, params.zeroForOne, cache.state.epoch, tickMap, cache.constants);
 106 |     |         }
 107 |     |     }
 108 |     | 
 109 |     |     function insertSingle(
 110 |     |         ILimitPoolStructs.MintLimitParams memory params,
 111 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
 112 |     |         PoolsharkStructs.TickMap storage tickMap,
 113 |     |         ILimitPoolStructs.MintLimitCache memory cache,
 114 |     |         PoolsharkStructs.LimitPoolState memory pool,
 115 |     |         PoolsharkStructs.Immutables memory constants
 116 |     |     ) internal returns (
 117 |     |         PoolsharkStructs.LimitPoolState memory
 118 |     |     ){
 119 |     |         /// @auditor - would be smart to protect against the case of epochs crossing
 120 |     |         (
 121 |     |             int24 tickToSave,
 122 |     |             uint160 roundedPrice
 123 |     |         ) = TickMap.roundHalf(pool.tickAtPrice, constants, pool.price);
 124 |     |         // update tick to save
 125 |     |         ILimitPoolStructs.LimitTick memory tick = ticks[tickToSave].limit;
 126 |     |         /// @auditor - tick.priceAt will be zero for tick % tickSpacing == 0
 127 |     |         if (tick.priceAt == 0) {
 128 |     |             if (pool.price != (params.zeroForOne ? cache.priceLower : cache.priceUpper)) {
 129 |     |                 TickMap.set(tickMap, tickToSave, constants.tickSpacing);
 130 |     |             }
 131 |     |             EpochMap.set(tickToSave, params.zeroForOne, cache.state.epoch, tickMap, constants);
 132 |     |         }
 133 |     |         // skip if we are at the nearest full tick
 134 |     |         if(pool.price != roundedPrice) {
 135 |     |             // if empty just save the pool price
 136 |     |             if (tick.priceAt == 0) {
 137 |     |                 tick.priceAt = pool.price;
 138 |     |                 EchidnaAssertions.assertTickAtPriceDivisibleByTickSpacing(tickToSave, ticks[tickToSave].limit.priceAt, constants.tickSpacing);
 139 |     |             }
 140 |     |             else {
 141 |     |                 // we need to blend the two partial fills into a single tick
 142 |     |                 ILimitPoolStructs.InsertSingleLocals memory locals;
 143 |     |                 if (params.zeroForOne) {
 144 |     |                     // 0 -> 1 positions price moves up so nextFullTick is greater
 145 |     |                     locals.previousFullTick = tickToSave - constants.tickSpacing / 2;
 146 |     |                     locals.pricePrevious = ConstantProduct.getPriceAtTick(locals.previousFullTick, constants);
 147 |     |                     // calculate amountOut filled across both partial fills
 148 |     |                     locals.amountOutExact = ConstantProduct.getDy(pool.liquidity, locals.pricePrevious, pool.price, false);
 149 |     |                     locals.amountOutExact += ConstantProduct.getDy(uint128(tick.liquidityDelta), locals.pricePrevious, tick.priceAt, false);
 150 |     |                     uint128 combinedLiquidity = pool.liquidity + uint128(tick.liquidityDelta);
 151 |     |                     /// @auditor - the opposing amount calculated is off by 1/100 millionth
 152 |     |                     ///            (i.e. since we're using exactOut we lose precision on exactInput amount)
 153 |     |                     ///            the expected dy to the next tick is either exact or slightly more
 154 |     |                     ///            the expected dx to the next tick is 1/100 millionth less after the blend
 155 |     |                     // advance price past closest full tick using amountOut filled
 156 |     |                     tick.priceAt = ConstantProduct.getNewPrice(uint256(locals.pricePrevious), combinedLiquidity, locals.amountOutExact, false, true).toUint160();
 157 |     |                     // dx to the next tick is less than before the tick blend
 158 |     |                     EpochMap.set(tickToSave, params.zeroForOne, cache.state.epoch, tickMap, constants);
 159 |     |                 } else {
 160 |     |                     // 0 -> 1 positions price moves up so nextFullTick is lesser
 161 |     |                     locals.previousFullTick = tickToSave + constants.tickSpacing / 2;
 162 |     |                     locals.pricePrevious = ConstantProduct.getPriceAtTick(locals.previousFullTick, constants);
 163 |     |                     // calculate amountOut filled across both partial fills
 164 |     |                     locals.amountOutExact = ConstantProduct.getDx(pool.liquidity, pool.price, locals.pricePrevious, false);
 165 |     |                     locals.amountOutExact += ConstantProduct.getDx(uint128(tick.liquidityDelta), tick.priceAt, locals.pricePrevious, false);
 166 |     |                     // add current pool liquidity to partial tick
 167 |     |                     uint128 combinedLiquidity = pool.liquidity + uint128(tick.liquidityDelta);
 168 |     |                     // advance price past closest full tick using amountOut filled
 169 |     |                     tick.priceAt = ConstantProduct.getNewPrice(uint256(locals.pricePrevious), combinedLiquidity, locals.amountOutExact, true, true).toUint160();
 170 |     |                     // mark epoch for second partial fill positions
 171 |     |                     EpochMap.set(tickToSave, params.zeroForOne, cache.state.epoch, tickMap, constants);
 172 |     |                 }
 173 |     |             }
 174 |     |         }
 175 |     |         // invariant => if we save liquidity to tick clear pool liquidity
 176 |     |         if ((tickToSave != (params.zeroForOne ? params.lower : params.upper))) {
 177 |     |             tick.liquidityDelta += int128(pool.liquidity);
 178 |     |             tick.liquidityAbsolute += pool.liquidity;
 179 |     |             pool.liquidity = 0;
 180 |     |         }
 181 |     |         ticks[tickToSave].limit = tick;
 182 |     |         return pool;
 183 |     |     }
 184 |     | 
 185 |     |     function remove(
 186 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
 187 |     |         PoolsharkStructs.TickMap storage tickMap,
 188 |     |         ILimitPoolStructs.UpdateCache memory cache,
 189 |     |         ILimitPoolStructs.UpdateLimitParams memory params,
 190 |     |         PoolsharkStructs.Immutables memory constants
 191 |     |     ) internal {
 192 |     |         // set ticks based on claim and zeroForOne
 193 |     |         int24 lower = params.zeroForOne ? params.claim : params.lower;
 194 |     |         int24 upper = params.zeroForOne ? params.upper : params.claim;
 195 |     |         {    
 196 |     |             PoolsharkStructs.LimitTick memory tickLower = ticks[lower].limit;
 197 |     |             
 198 |     |             if (cache.removeLower) {
 199 |     |                 if (params.zeroForOne) {
 200 |     |                     tickLower.liquidityDelta -= int128(params.amount);
 201 |     |                 } else {
 202 |     |                     tickLower.liquidityDelta += int128(params.amount);
 203 |     |                 }
 204 |     |                 tickLower.liquidityAbsolute -= params.amount;
 205 |     |                 ticks[lower].limit = tickLower;
 206 |     |                 clear(ticks, constants, tickMap, lower);
 207 |     |             }
 208 |     |         }
 209 |     |         {
 210 |     |             PoolsharkStructs.LimitTick memory tickUpper = ticks[upper].limit;
 211 |     |             if (cache.removeUpper) {
 212 |     |                 if (params.zeroForOne) {
 213 |     |                     tickUpper.liquidityDelta += int128(params.amount);
 214 |     |                 } else {
 215 |     |                     tickUpper.liquidityDelta -= int128(params.amount);
 216 |     |                 }
 217 |     |                 tickUpper.liquidityAbsolute -= params.amount;
 218 |     |                 ticks[upper].limit = tickUpper;
 219 |     |                 clear(ticks, constants, tickMap, upper);
 220 |     |             }
 221 |     |         }
 222 |     |     }
 223 |     | 
 224 |     |      function unlock(
 225 |     |         ILimitPoolStructs.MintLimitCache memory cache,
 226 |     |         PoolsharkStructs.LimitPoolState memory pool,
 227 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
 228 |     |         PoolsharkStructs.TickMap storage tickMap,
 229 |     |         bool zeroForOne
 230 |     |     ) internal returns (
 231 |     |         ILimitPoolStructs.MintLimitCache memory,
 232 |     |         PoolsharkStructs.LimitPoolState memory
 233 |     |     )
 234 |     |     {
 235 |     |         if (pool.liquidity > 0) return (cache, pool);
 236 |     | 
 237 |     |         (int24 startTick,) = TickMap.roundHalf(pool.tickAtPrice, cache.constants, pool.price);
 238 |     | 
 239 |     |         if (zeroForOne) {
 240 |     |             pool.tickAtPrice = TickMap.next(tickMap, startTick, cache.constants.tickSpacing, true);
 241 |     |             if (pool.tickAtPrice < ConstantProduct.maxTick(cache.constants.tickSpacing)) {
 242 |     |                 EpochMap.set(pool.tickAtPrice, zeroForOne, cache.state.epoch, tickMap, cache.constants);
 243 |     |             }
 244 |     |         } else {
 245 |     |             /// @dev - roundedUp true since liquidity could be equal to the current pool tickAtPrice
 246 |     |             pool.tickAtPrice = TickMap.previous(tickMap, startTick, cache.constants.tickSpacing, true);
 247 |     |             if (pool.tickAtPrice > ConstantProduct.minTick(cache.constants.tickSpacing)) {
 248 |     |                 EpochMap.set(pool.tickAtPrice, zeroForOne, cache.state.epoch, tickMap, cache.constants);
 249 |     |             }
 250 |     |         }
 251 |     | 
 252 |     |         // increment pool liquidity
 253 |     |         EchidnaAssertions.assertPositiveLiquidityOnUnlock(ticks[pool.tickAtPrice].limit.liquidityDelta);
 254 |     |         pool.liquidity += uint128(ticks[pool.tickAtPrice].limit.liquidityDelta);
 255 |     |         int24 tickToClear = pool.tickAtPrice;
 256 |     |         uint160 tickPriceAt = ticks[pool.tickAtPrice].limit.priceAt;
 257 |     | 
 258 |     |         if (tickPriceAt == 0) {
 259 |     |             // if full tick crossed
 260 |     |             pool.price = ConstantProduct.getPriceAtTick(pool.tickAtPrice, cache.constants);
 261 |     |         } else {
 262 |     |             // if half tick crossed
 263 |     |             pool.price = tickPriceAt;
 264 |     |             pool.tickAtPrice = ConstantProduct.getTickAtPrice(tickPriceAt, cache.constants);
 265 |     |         }
 266 |     | 
 267 |     |         // zero out tick
 268 |     |         ticks[tickToClear].limit = PoolsharkStructs.LimitTick(0,0,0);
 269 |     |         clear(ticks, cache.constants, tickMap, tickToClear);
 270 |     | 
 271 |     |         return (cache, pool);
 272 |     |     }
 273 |     | 
 274 |     |     function clear(
 275 |     |         mapping(int24 => PoolsharkStructs.Tick) storage ticks,
 276 |     |         PoolsharkStructs.Immutables memory constants,
 277 |     |         PoolsharkStructs.TickMap storage tickMap,
 278 |     |         int24 tickToClear
 279 |     |     ) internal {
 280 |     |         if (_empty(ticks[tickToClear])) {
 281 |     |             if (tickToClear != ConstantProduct.maxTick(constants.tickSpacing) &&
 282 |     |                 tickToClear != ConstantProduct.minTick(constants.tickSpacing)) {
 283 |     |                 ticks[tickToClear].limit = PoolsharkStructs.LimitTick(0,0,0);
 284 |     |                 TickMap.unset(tickMap, tickToClear, constants.tickSpacing);
 285 |     |             }
 286 |     |         }
 287 |     |     }
 288 |     | 
 289 |     |     function _empty(
 290 |     |         ILimitPoolStructs.Tick memory tick
 291 |     |     ) internal pure returns (
 292 |     |         bool
 293 |     |     ) {
 294 |     |         if (tick.limit.liquidityAbsolute != 0) {
 295 |     |             return false;
 296 |     |         }
 297 |     |         return true;
 298 |     |     }
 299 |     | }
 300 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/limit/pool/BurnLimitCall.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | import '../../../interfaces/limit/ILimitPoolStructs.sol';
   5 |     | import '../PositionsLimit.sol';
   6 |     | import '../../utils/Collect.sol';
   7 |     | 
   8 | *   | library BurnLimitCall {
   9 |     | 
  10 |     |     error SimulateBurn(int24 lower, int24 upper, bool positionExists);
  11 |     | 
  12 |     |     event DebugSimBurn(int24 lower, int24 upper, bool positionExists);
  13 |     | 
  14 |     | 
  15 |     |     event BurnLimit(
  16 |     |         address indexed to,
  17 |     |         int24 lower,
  18 |     |         int24 upper,
  19 |     |         int24 claim,
  20 |     |         bool zeroForOne,
  21 |     |         uint128 liquidityBurned,
  22 |     |         uint128 tokenInClaimed,
  23 |     |         uint128 tokenOutBurned
  24 |     |     );
  25 |     | 
  26 |     |     function perform(
  27 |     |         ILimitPoolStructs.BurnLimitParams memory params,
  28 |     |         ILimitPoolStructs.BurnLimitCache memory cache,
  29 |     |         PoolsharkStructs.TickMap storage tickMap,
  30 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
  31 |     |         mapping(address => mapping(int24 => mapping(int24 => ILimitPoolStructs.LimitPosition)))
  32 |     |             storage positions
  33 |     |     ) internal returns (ILimitPoolStructs.BurnLimitCache memory) {
  34 |     |         if (params.lower >= params.upper) require (false, 'InvalidPositionBounds()');
  35 |     |         if (cache.position.epochLast == 0) require(false, 'PositionNotFound()');
  36 |     |         assert(false);
  37 |     |         if (cache.position.crossedInto
  38 |     |             || params.claim != (params.zeroForOne ? params.lower : params.upper)
  39 |     |             || cache.position.epochLast < (params.zeroForOne ? EpochMap.get(params.lower, params.zeroForOne, tickMap, cache.constants)
  40 |     |                                                              : EpochMap.get(params.upper, params.zeroForOne, tickMap, cache.constants)))
  41 |     |         {
  42 |     |             // position has been crossed into
  43 |     |             (
  44 |     |                 cache.state,
  45 |     |                 cache.position,
  46 |     |                 params.claim
  47 |     |             ) = PositionsLimit.update(
  48 |     |                 positions,
  49 |     |                 ticks,
  50 |     |                 tickMap,
  51 |     |                 cache.state,
  52 |     |                 ILimitPoolStructs.UpdateLimitParams(
  53 |     |                     params.to,
  54 |     |                     params.to,
  55 |     |                     params.burnPercent,
  56 |     |                     params.lower,
  57 |     |                     params.upper,
  58 |     |                     params.claim,
  59 |     |                     params.zeroForOne
  60 |     |                 ),
  61 |     |                 cache.constants
  62 |     |             );
  63 |     |         } else {
  64 |     |             // position has not been crossed into
  65 |     |             (cache.state, cache.position) = PositionsLimit.remove(
  66 |     |                 positions,
  67 |     |                 ticks,
  68 |     |                 tickMap,
  69 |     |                 cache.state,
  70 |     |                 ILimitPoolStructs.UpdateLimitParams(
  71 |     |                     params.to,
  72 |     |                     params.to,
  73 |     |                     params.burnPercent,
  74 |     |                     params.lower,
  75 |     |                     params.upper,
  76 |     |                     params.zeroForOne ? params.lower : params.upper,
  77 |     |                     params.zeroForOne
  78 |     |                 ),
  79 |     |                 cache.constants
  80 |     |             );
  81 |     |         }
  82 |     |         cache = Collect.burnLimit(
  83 |     |             cache,
  84 |     |             params
  85 |     |         );
  86 |     |         if ((params.zeroForOne ? params.claim != params.upper
  87 |     |                                : params.claim != params.lower))
  88 |     |             params.zeroForOne
  89 |     |                 ? positions[params.to][params.claim][params.upper] = cache.position
  90 |     |                 : positions[params.to][params.lower][params.claim] = cache.position;
  91 |     |         return cache;
  92 |     |     }
  93 |     | 
  94 |     |     // Echidna funcs
  95 | *   |     function getResizedTicks(
  96 |     |         ILimitPoolStructs.BurnLimitParams memory params,
  97 |     |         ILimitPoolStructs.BurnLimitCache memory cache,
  98 |     |         PoolsharkStructs.TickMap storage tickMap,
  99 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
 100 |     |         mapping(address => mapping(int24 => mapping(int24 => ILimitPoolStructs.LimitPosition)))
 101 |     |             storage positions
 102 |     |     ) external {
 103 | *   |         if (params.lower >= params.upper) require (false, 'InvalidPositionBounds()');
 104 | *   |         if (cache.position.epochLast == 0) require(false, 'PositionNotFound()');
 105 |     |         if (cache.position.crossedInto
 106 |     |             || params.claim != (params.zeroForOne ? params.lower : params.upper)
 107 |     |             || cache.position.epochLast < (params.zeroForOne ? EpochMap.get(params.lower, params.zeroForOne, tickMap, cache.constants)
 108 |     |                                                              : EpochMap.get(params.upper, params.zeroForOne, tickMap, cache.constants)))
 109 |     |         {
 110 |     |             // position has been crossed into
 111 |     |             (
 112 |     |                 cache.state,
 113 |     |                 cache.position,
 114 |     |                 params.claim
 115 |     |             ) = PositionsLimit.update(
 116 |     |                 positions,
 117 |     |                 ticks,
 118 |     |                 tickMap,
 119 |     |                 cache.state,
 120 |     |                 ILimitPoolStructs.UpdateLimitParams(
 121 |     |                     params.to,
 122 |     |                     params.to,
 123 |     |                     params.burnPercent,
 124 |     |                     params.lower,
 125 |     |                     params.upper,
 126 |     |                     params.claim,
 127 |     |                     params.zeroForOne
 128 |     |                 ),
 129 |     |                 cache.constants
 130 |     |             );
 131 |     |         } else {
 132 |     |             // position has not been crossed into
 133 |     |             (cache.state, cache.position) = PositionsLimit.remove(
 134 |     |                 positions,
 135 |     |                 ticks,
 136 |     |                 tickMap,
 137 |     |                 cache.state,
 138 |     |                 ILimitPoolStructs.UpdateLimitParams(
 139 |     |                     params.to,
 140 |     |                     params.to,
 141 |     |                     params.burnPercent,
 142 |     |                     params.lower,
 143 |     |                     params.upper,
 144 |     |                     params.zeroForOne ? params.lower : params.upper,
 145 |     |                     params.zeroForOne
 146 |     |                 ),
 147 |     |                 cache.constants
 148 |     |             );
 149 |     |         }
 150 |     |         cache = Collect.burnLimit(
 151 |     |             cache,
 152 |     |             params
 153 |     |         );
 154 |     | 
 155 |     |         bool positionExists = cache.position.epochLast != 0;
 156 |     |         emit DebugSimBurn(params.lower, params.upper, positionExists);
 157 |     |         if ((params.zeroForOne ? params.claim != params.upper
 158 |     |                                : params.claim != params.lower)) {
 159 |     |             params.zeroForOne
 160 |     |                 ? positions[params.to][params.claim][params.upper] = cache.position
 161 |     |                 : positions[params.to][params.lower][params.claim] = cache.position;
 162 |     | 
 163 |     |             if (params.zeroForOne) {
 164 |     |                 revert SimulateBurn(params.claim, params.upper, positionExists);
 165 |     |             }
 166 |     |             else {
 167 |     |                 revert SimulateBurn(params.lower, params.claim, positionExists);
 168 |     |             }
 169 |     |         }
 170 |     |         
 171 |     |         revert SimulateBurn(params.lower, params.upper, positionExists);
 172 |     |     }
 173 |     | }
 174 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/limit/pool/MintLimitCall.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | import '../../../interfaces/limit/ILimitPoolStructs.sol';
   5 |     | import '../PositionsLimit.sol';
   6 |     | import '../../utils/Collect.sol';
   7 |     | import '../../EchidnaAssertions.sol';
   8 |     | import '../../../interfaces/IERC20Minimal.sol';
   9 |     | 
  10 | *   | library MintLimitCall {
  11 |     | 
  12 |     |     error SimulateMint(int24 lower, int24 upper, bool positionCreated);
  13 |     | 
  14 |     |     event MintLimit(
  15 |     |         address indexed to,
  16 |     |         int24 lower,
  17 |     |         int24 upper,
  18 |     |         bool zeroForOne,
  19 |     |         uint32 epochLast,
  20 |     |         uint128 amountIn,
  21 |     |         uint128 amountFilled,
  22 |     |         uint128 liquidityMinted
  23 |     |     );
  24 |     | 
  25 |     |     event Sync(
  26 |     |         uint160 price,
  27 |     |         uint128 liquidity
  28 |     |     );
  29 |     | 
  30 |     |     function perform(
  31 |     |         mapping(address => mapping(int24 => mapping(int24 => ILimitPoolStructs.LimitPosition)))
  32 |     |             storage positions,
  33 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
  34 |     |         IRangePoolStructs.Sample[65535] storage samples,
  35 |     |         PoolsharkStructs.TickMap storage rangeTickMap,
  36 |     |         PoolsharkStructs.TickMap storage limitTickMap,
  37 |     |         PoolsharkStructs.GlobalState storage globalState,
  38 |     |         ILimitPoolStructs.MintLimitParams memory params,
  39 |     |         ILimitPoolStructs.MintLimitCache memory cache
  40 |     |     ) internal returns (ILimitPoolStructs.MintLimitCache memory) {
  41 |     | 
  42 |     |         // resize position if necessary
  43 |     |         (params, cache) = PositionsLimit.resize(
  44 |     |             ticks,
  45 |     |             samples,
  46 |     |             rangeTickMap,
  47 |     |             limitTickMap,
  48 |     |             params,
  49 |     |             cache
  50 |     |         );
  51 |     | 
  52 |     |         // save state for reentrancy safety
  53 |     |         save(cache, globalState, !params.zeroForOne);
  54 |     | 
  55 |     |         // transfer in token amount
  56 |     |         SafeTransfers.transferIn(
  57 |     |                                  params.zeroForOne ? cache.constants.token0 
  58 |     |                                                    : cache.constants.token1,
  59 |     |                                  params.amount + cache.swapCache.input
  60 |     |                                 );
  61 |     |         // transfer out if swap output 
  62 |     |         EchidnaAssertions.assertPoolBalanceExceeded(
  63 |     |             (params.zeroForOne ? balance(cache.constants.token1) : balance(cache.constants.token0)),
  64 |     |             cache.swapCache.output
  65 |     |         );
  66 |     |         if (cache.swapCache.output > 0)
  67 |     |             SafeTransfers.transferOut(
  68 |     |                 params.to,
  69 |     |                 params.zeroForOne ? cache.constants.token1 
  70 |     |                                   : cache.constants.token0,
  71 |     |                 cache.swapCache.output
  72 |     |             );
  73 |     |         // mint position if amount is left
  74 |     |         if (params.amount > 0 && params.lower < params.upper) {
  75 |     |             cache.pool = params.zeroForOne ? cache.state.pool0 : cache.state.pool1;
  76 |     |             // load position given params
  77 |     |             cache.position = positions[params.to][params.lower][params.upper];
  78 |     |             
  79 |     |             // bump to the next tick if there is no liquidity
  80 |     |             if (cache.pool.liquidity == 0) {
  81 |     |                 /// @dev - this makes sure to have liquidity unlocked if undercutting
  82 |     |                 (cache, cache.pool) = TicksLimit.unlock(cache, cache.pool, ticks, limitTickMap, params.zeroForOne);
  83 |     |             }
  84 |     | 
  85 |     |             if (params.zeroForOne) {
  86 |     |                 uint160 priceLower = ConstantProduct.getPriceAtTick(params.lower, cache.constants);
  87 |     |                 if (priceLower <= cache.pool.price) {
  88 |     |                     // save liquidity if active
  89 |     |                     if (cache.pool.liquidity > 0) {
  90 |     |                         cache.pool = TicksLimit.insertSingle(params, ticks, limitTickMap, cache, cache.pool, cache.constants);
  91 |     |                     }
  92 |     |                     cache.pool.price = priceLower;
  93 |     |                     cache.pool.tickAtPrice = params.lower;
  94 |     |                     /// @auditor - double check liquidity is set correctly for this in insertSingle
  95 |     |                     cache.pool.liquidity += uint128(cache.liquidityMinted);
  96 |     |                     cache.position.crossedInto = true;
  97 |     |                     // set epoch on start tick to signify position being crossed into
  98 |     |                     /// @auditor - this is safe assuming we have swapped at least this far on the other side
  99 |     |                     emit Sync(cache.pool.price, cache.pool.liquidity);
 100 |     |                 }
 101 |     |             } else {
 102 |     |                 uint160 priceUpper = ConstantProduct.getPriceAtTick(params.upper, cache.constants);
 103 |     |                 if (priceUpper >= cache.pool.price) {
 104 |     |                     if (cache.pool.liquidity > 0) {
 105 |     |                         cache.pool = TicksLimit.insertSingle(params, ticks, limitTickMap, cache, cache.pool, cache.constants);
 106 |     |                     }
 107 |     |                     cache.pool.price = priceUpper;
 108 |     |                     cache.pool.tickAtPrice = params.upper;
 109 |     |                     cache.pool.liquidity += uint128(cache.liquidityMinted);
 110 |     |                     cache.position.crossedInto = true;
 111 |     |                     // set epoch on start tick to signify position being crossed into
 112 |     |                     /// @auditor - this is safe assuming we have swapped at least this far on the other side
 113 |     |                     emit Sync(cache.pool.price, cache.pool.liquidity);
 114 |     |                 }
 115 |     |             }
 116 |     |             (cache.pool, cache.position) = PositionsLimit.add(
 117 |     |                 cache,
 118 |     |                 ticks,
 119 |     |                 limitTickMap,
 120 |     |                 params
 121 |     |             );
 122 |     | 
 123 |     |             // save position to storage
 124 |     |             positions[params.to][params.lower][params.upper] = cache.position;
 125 |     | 
 126 |     |             params.zeroForOne ? cache.state.pool0 = cache.pool : cache.state.pool1 = cache.pool;
 127 |     | 
 128 |     |             emit MintLimit(
 129 |     |                 params.to,
 130 |     |                 params.lower,
 131 |     |                 params.upper,
 132 |     |                 params.zeroForOne,
 133 |     |                 cache.position.epochLast,
 134 |     |                 uint128(params.amount + cache.swapCache.input),
 135 |     |                 uint128(cache.swapCache.output),
 136 |     |                 uint128(cache.liquidityMinted)
 137 |     |             );
 138 |     |         }
 139 |     | 
 140 |     |         require(cache.position.liquidity != 0, "Minting with 0 liquidity");
 141 |     |         // save lp side for safe reentrancy
 142 |     |         save(cache, globalState, params.zeroForOne);
 143 |     |         return cache;
 144 |     |     }
 145 |     | 
 146 |     |     function save(
 147 |     |         ILimitPoolStructs.MintLimitCache memory cache,
 148 |     |         PoolsharkStructs.GlobalState storage globalState,
 149 |     |         bool zeroForOne
 150 |     |     ) internal {
 151 |     |         globalState.epoch = cache.state.epoch;
 152 |     |         globalState.liquidityGlobal = cache.state.liquidityGlobal;
 153 |     |         if (zeroForOne) {
 154 |     |             globalState.pool = cache.state.pool;
 155 |     |             globalState.pool0 = cache.state.pool0;
 156 |     |         } else {
 157 |     |             globalState.pool = cache.state.pool;
 158 |     |             globalState.pool1 = cache.state.pool1;
 159 |     |         }
 160 |     |     }
 161 |     | 
 162 |     |     // Echidna funcs
 163 | *   |     function getResizedTicks(
 164 |     |         mapping(address => mapping(int24 => mapping(int24 => ILimitPoolStructs.LimitPosition)))
 165 |     |             storage positions,
 166 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
 167 |     |         IRangePoolStructs.Sample[65535] storage samples,
 168 |     |         PoolsharkStructs.TickMap storage rangeTickMap,
 169 |     |         PoolsharkStructs.TickMap storage limitTickMap,
 170 |     |         PoolsharkStructs.GlobalState storage globalState,
 171 |     |         ILimitPoolStructs.MintLimitParams memory params,
 172 |     |         ILimitPoolStructs.MintLimitCache memory cache
 173 |     |     ) external {
 174 | *   |         bool positionCreated = false;
 175 |     |         // resize position if necessary
 176 | *   |         (params, cache) = PositionsLimit.resize(
 177 | *   |             ticks,
 178 | *   |             samples,
 179 | *   |             rangeTickMap,
 180 | *   |             limitTickMap,
 181 | *   |             params,
 182 | *   |             cache
 183 |     |         );
 184 |     | 
 185 |     |         // save state for reentrancy safety
 186 | *   |         save(cache, globalState, !params.zeroForOne);
 187 |     | 
 188 |     |         // transfer in token amount
 189 | *   |         SafeTransfers.transferIn(
 190 | *   |                                  params.zeroForOne ? cache.constants.token0 
 191 | *   |                                                    : cache.constants.token1,
 192 | *   |                                  params.amount + cache.swapCache.input
 193 |     |                                 );
 194 |     |         // transfer out if swap output 
 195 | *   |         if (cache.swapCache.output > 0)
 196 | *   |             SafeTransfers.transferOut(
 197 |     |                 params.to,
 198 |     |                 params.zeroForOne ? cache.constants.token1 
 199 |     |                                   : cache.constants.token0,
 200 |     |                 cache.swapCache.output
 201 |     |             );
 202 |     |         // mint position if amount is left
 203 |     |         if (params.amount > 0 && params.lower < params.upper) {
 204 |     |             cache.pool = params.zeroForOne ? cache.state.pool0 : cache.state.pool1;
 205 |     |             // load position given params
 206 |     |             cache.position = positions[params.to][params.lower][params.upper];
 207 |     |             
 208 |     |             // bump to the next tick if there is no liquidity
 209 |     |             if (cache.pool.liquidity == 0) {
 210 |     |                 /// @dev - this makes sure to have liquidity unlocked if undercutting
 211 |     |                 (cache, cache.pool) = TicksLimit.unlock(cache, cache.pool, ticks, limitTickMap, params.zeroForOne);
 212 |     |             }
 213 |     | 
 214 |     |             if (params.zeroForOne) {
 215 |     |                 uint160 priceLower = ConstantProduct.getPriceAtTick(params.lower, cache.constants);
 216 |     |                 if (priceLower <= cache.pool.price) {
 217 |     |                     // save liquidity if active
 218 |     |                     if (cache.pool.liquidity > 0) {
 219 |     |                         cache.pool = TicksLimit.insertSingle(params, ticks, limitTickMap, cache, cache.pool, cache.constants);
 220 |     |                     }
 221 |     |                     cache.pool.price = priceLower;
 222 |     |                     cache.pool.tickAtPrice = params.lower;
 223 |     |                     /// @auditor - double check liquidity is set correctly for this in insertSingle
 224 |     |                     cache.pool.liquidity += uint128(cache.liquidityMinted);
 225 |     |                     cache.position.crossedInto = true;
 226 |     |                     // set epoch on start tick to signify position being crossed into
 227 |     |                     /// @auditor - this is safe assuming we have swapped at least this far on the other side
 228 |     |                     emit Sync(cache.pool.price, cache.pool.liquidity);
 229 |     |                 }
 230 |     |             } else {
 231 |     |                 uint160 priceUpper = ConstantProduct.getPriceAtTick(params.upper, cache.constants);
 232 |     |                 if (priceUpper >= cache.pool.price) {
 233 |     |                     if (cache.pool.liquidity > 0) {
 234 |     |                         cache.pool = TicksLimit.insertSingle(params, ticks, limitTickMap, cache, cache.pool, cache.constants);
 235 |     |                     }
 236 |     |                     cache.pool.price = priceUpper;
 237 |     |                     cache.pool.tickAtPrice = params.upper;
 238 |     |                     cache.pool.liquidity += uint128(cache.liquidityMinted);
 239 |     |                     cache.position.crossedInto = true;
 240 |     |                     // set epoch on start tick to signify position being crossed into
 241 |     |                     /// @auditor - this is safe assuming we have swapped at least this far on the other side
 242 |     |                     emit Sync(cache.pool.price, cache.pool.liquidity);
 243 |     |                 }
 244 |     |             }
 245 |     |             (cache.pool, cache.position) = PositionsLimit.add(
 246 |     |                 cache,
 247 |     |                 ticks,
 248 |     |                 limitTickMap,
 249 |     |                 params
 250 |     |             );
 251 |     | 
 252 |     |             positionCreated = true;
 253 |     |             // save position to storage
 254 |     |             positions[params.to][params.lower][params.upper] = cache.position;
 255 |     | 
 256 |     |             params.zeroForOne ? cache.state.pool0 = cache.pool : cache.state.pool1 = cache.pool;
 257 |     | 
 258 |     |             emit MintLimit(
 259 |     |                 params.to,
 260 |     |                 params.lower,
 261 |     |                 params.upper,
 262 |     |                 params.zeroForOne,
 263 |     |                 cache.position.epochLast,
 264 |     |                 uint128(params.amount + cache.swapCache.input),
 265 |     |                 uint128(cache.swapCache.output),
 266 |     |                 uint128(cache.liquidityMinted)
 267 |     |             );
 268 |     |         }
 269 |     | 
 270 |     |         // save lp side for safe reentrancy
 271 |     |         save(cache, globalState, params.zeroForOne);
 272 |     | 
 273 |     |         revert SimulateMint(params.lower, params.upper, positionCreated);
 274 |     |     }
 275 |     | 
 276 |     |     function balance(
 277 |     |         address token
 278 |     |     ) private view returns (uint256) {
 279 |     |         (
 280 |     |             bool success,
 281 |     |             bytes memory data
 282 |     |         ) = token.staticcall(
 283 |     |                                     abi.encodeWithSelector(
 284 |     |                                         IERC20Minimal.balanceOf.selector,
 285 |     |                                         address(this)
 286 |     |                                     )
 287 |     |                                 );
 288 |     |         require(success && data.length >= 32);
 289 |     |         return abi.decode(data, (uint256));
 290 |     |     }
 291 |     | }
 292 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/math/ConstantProduct.sol
   1 |     | // SPDX-License-Identifier: GPL-3.0-or-later
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | import './OverflowMath.sol';
   5 |     | import '../../interfaces/limit/ILimitPoolStructs.sol';
   6 |     | import '../../base/structs/PoolsharkStructs.sol';
   7 |     | 
   8 |     | /// @notice Math library that facilitates ranged liquidity calculations.
   9 |     | library ConstantProduct {
  10 |     |     uint256 internal constant Q96 = 0x1000000000000000000000000;
  11 |     | 
  12 |     |     struct PriceBounds {
  13 |     |         uint160 min;
  14 |     |         uint160 max;
  15 |     |     }
  16 |     | 
  17 |     |     /////////////////////////////////////////////////////////////
  18 |     |     ///////////////////////// DYDX MATH /////////////////////////
  19 |     |     /////////////////////////////////////////////////////////////
  20 |     | 
  21 |     |     function getDy(
  22 |     |         uint256 liquidity,
  23 |     |         uint256 priceLower,
  24 |     |         uint256 priceUpper,
  25 |     |         bool roundUp
  26 |     |     ) internal pure returns (uint256 dy) {
  27 |     |         return _getDy(liquidity, priceLower, priceUpper, roundUp);
  28 |     |     }
  29 |     | 
  30 |     |     function getDx(
  31 |     |         uint256 liquidity,
  32 |     |         uint256 priceLower,
  33 |     |         uint256 priceUpper,
  34 |     |         bool roundUp
  35 |     |     ) internal pure returns (uint256 dx) {
  36 |     |         return _getDx(liquidity, priceLower, priceUpper, roundUp);
  37 |     |     }
  38 |     | 
  39 |     |     function _getDy(
  40 |     |         uint256 liquidity,
  41 |     |         uint256 priceLower,
  42 |     |         uint256 priceUpper,
  43 |     |         bool roundUp
  44 |     |     ) internal pure returns (uint256 dy) {
  45 |     |         unchecked {
  46 |     |             if (liquidity == 0) return 0;
  47 |     |             if (roundUp) {
  48 |     |                 dy = OverflowMath.mulDivRoundingUp(liquidity, priceUpper - priceLower, Q96);
  49 |     |             } else {
  50 |     |                 dy = OverflowMath.mulDiv(liquidity, priceUpper - priceLower, Q96);
  51 |     |             }
  52 |     |         }
  53 |     |     }
  54 |     | 
  55 |     |     function _getDx(
  56 |     |         uint256 liquidity,
  57 |     |         uint256 priceLower,
  58 |     |         uint256 priceUpper,
  59 |     |         bool roundUp
  60 |     |     ) internal pure returns (uint256 dx) {
  61 |     |         unchecked {
  62 |     |             if (liquidity == 0) return 0;
  63 |     |             if (roundUp) {
  64 |     |                 dx = OverflowMath.divRoundingUp(
  65 |     |                         OverflowMath.mulDivRoundingUp(
  66 |     |                             liquidity << 96, 
  67 |     |                             priceUpper - priceLower,
  68 |     |                             priceUpper
  69 |     |                         ),
  70 |     |                         priceLower
  71 |     |                 );
  72 |     |             } else {
  73 |     |                 dx = OverflowMath.mulDiv(
  74 |     |                         liquidity << 96,
  75 |     |                         priceUpper - priceLower,
  76 |     |                         priceUpper
  77 |     |                 ) / priceLower;
  78 |     |             }
  79 |     |         }
  80 |     |     }
  81 |     | 
  82 |     |     function getLiquidityForAmounts(
  83 |     |         uint256 priceLower,
  84 |     |         uint256 priceUpper,
  85 |     |         uint256 currentPrice,
  86 |     |         uint256 dy,
  87 |     |         uint256 dx
  88 |     |     ) internal pure returns (uint256 liquidity) {
  89 |     |         unchecked {
  90 |     |             if (priceUpper <= currentPrice) {
  91 |     |                 liquidity = OverflowMath.mulDiv(dy, Q96, priceUpper - priceLower);
  92 |     |             } else if (currentPrice <= priceLower) {
  93 |     |                 liquidity = OverflowMath.mulDiv(
  94 |     |                     dx,
  95 |     |                     OverflowMath.mulDiv(priceLower, priceUpper, Q96),
  96 |     |                     priceUpper - priceLower
  97 |     |                 );
  98 |     |             } else {
  99 |     |                 uint256 liquidity0 = OverflowMath.mulDiv(
 100 |     |                     dx,
 101 |     |                     OverflowMath.mulDiv(priceUpper, currentPrice, Q96),
 102 |     |                     priceUpper - currentPrice
 103 |     |                 );
 104 |     |                 uint256 liquidity1 = OverflowMath.mulDiv(dy, Q96, currentPrice - priceLower);
 105 |     |                 liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;
 106 |     |             }
 107 |     |         }
 108 |     |     }
 109 |     | 
 110 |     |     function getAmountsForLiquidity(
 111 |     |         uint256 priceLower,
 112 |     |         uint256 priceUpper,
 113 |     |         uint256 currentPrice,
 114 |     |         uint256 liquidityAmount,
 115 |     |         bool roundUp
 116 |     |     ) internal pure returns (uint128 token0amount, uint128 token1amount) {
 117 |     |         if (priceUpper <= currentPrice) {
 118 |     |             token1amount = uint128(_getDy(liquidityAmount, priceLower, priceUpper, roundUp));
 119 |     |         } else if (currentPrice <= priceLower) {
 120 |     |             token0amount = uint128(_getDx(liquidityAmount, priceLower, priceUpper, roundUp));
 121 |     |         } else {
 122 |     |             token0amount = uint128(_getDx(liquidityAmount, currentPrice, priceUpper, roundUp));
 123 |     |             token1amount = uint128(_getDy(liquidityAmount, priceLower, currentPrice, roundUp));
 124 |     |         }
 125 |     |         if (token0amount > uint128(type(int128).max)) require(false, 'AmountsOutOfBounds()');
 126 |     |         if (token1amount > uint128(type(int128).max)) require(false, 'AmountsOutOfBounds()');
 127 |     |     }
 128 |     | 
 129 |     |     function getNewPrice(
 130 |     |         uint256 price,
 131 |     |         uint256 liquidity,
 132 |     |         uint256 amount,
 133 |     |         bool zeroForOne,
 134 |     |         bool exactIn
 135 |     |     ) internal pure returns (
 136 |     |         uint256 newPrice
 137 |     |     ) {
 138 |     |         if (exactIn) {
 139 |     |             if (zeroForOne) {
 140 |     |                 uint256 liquidityPadded = liquidity << 96;
 141 |     |                 newPrice = OverflowMath.mulDivRoundingUp(
 142 |     |                                 liquidityPadded,
 143 |     |                                 price,
 144 |     |                                 liquidityPadded + price * amount
 145 |     |                     );
 146 |     |             } else {
 147 |     |                 newPrice = price + (amount << 96) / liquidity;
 148 |     |             }
 149 |     |         } else {
 150 |     |             if (zeroForOne) {
 151 |     |                 newPrice = price - 
 152 |     |                         OverflowMath.divRoundingUp(amount << 96, liquidity);
 153 |     |             } else {
 154 |     |                 uint256 liquidityPadded = uint256(liquidity) << 96;
 155 |     |                 newPrice = OverflowMath.mulDivRoundingUp(
 156 |     |                         liquidityPadded, 
 157 |     |                         price,
 158 |     |                         liquidityPadded - uint256(price) * amount
 159 |     |                 );
 160 |     |             }
 161 |     |         }
 162 |     |     }
 163 |     | 
 164 |     |     /////////////////////////////////////////////////////////////
 165 |     |     ///////////////////////// TICK MATH /////////////////////////
 166 |     |     /////////////////////////////////////////////////////////////
 167 |     | 
 168 |     |     int24 internal constant MIN_TICK = -887272;   /// @dev - tick for price of 2^-128
 169 |     |     int24 internal constant MAX_TICK = -MIN_TICK; /// @dev - tick for price of 2^128
 170 |     | 
 171 |     |     function minTick(
 172 |     |         int16 tickSpacing
 173 |     |     ) internal pure returns (
 174 |     |         int24 tick
 175 |     |     ) {
 176 |     |         return MIN_TICK / tickSpacing * tickSpacing;
 177 |     |     }
 178 |     | 
 179 |     |     function maxTick(
 180 |     |         int16 tickSpacing
 181 |     |     ) internal pure returns (
 182 |     |         int24 tick
 183 |     |     ) {
 184 |     |         return MAX_TICK / tickSpacing * tickSpacing;
 185 |     |     }
 186 |     | 
 187 |     |     function priceBounds(
 188 |     |         int16 tickSpacing
 189 |     |     ) internal pure returns (
 190 |     |         uint160,
 191 |     |         uint160
 192 |     |     ) {
 193 |     |         return (minPrice(tickSpacing), maxPrice(tickSpacing));
 194 |     |     }
 195 |     | 
 196 |     |     function minPrice(
 197 |     |         int16 tickSpacing
 198 |     |     ) internal pure returns (
 199 |     |         uint160 price
 200 |     |     ) {
 201 |     |         PoolsharkStructs.Immutables  memory constants;
 202 |     |         constants.tickSpacing = tickSpacing;
 203 |     |         return getPriceAtTick(minTick(tickSpacing), constants);
 204 |     |     }
 205 |     | 
 206 |     |     function maxPrice(
 207 |     |         int16 tickSpacing
 208 |     |     ) internal pure returns (
 209 |     |         uint160 price
 210 |     |     ) {
 211 |     |         PoolsharkStructs.Immutables  memory constants;
 212 |     |         constants.tickSpacing = tickSpacing;
 213 |     |         return getPriceAtTick(maxTick(tickSpacing), constants);
 214 |     |     }
 215 |     |     
 216 |     |     function checkTicks(
 217 |     |         int24 lower,
 218 |     |         int24 upper,
 219 |     |         int16 tickSpacing
 220 |     |     ) internal pure
 221 |     |     {
 222 |     |         if (lower <= minTick(tickSpacing)) require (false, 'LowerTickOutOfBounds()');
 223 |     |         if (upper >= maxTick(tickSpacing)) require (false, 'UpperTickOutOfBounds()');
 224 |     |         if (lower % tickSpacing != 0) require (false, 'LowerTickOutsideTickSpacing()');
 225 |     |         if (upper % tickSpacing != 0) require (false, 'UpperTickOutsideTickSpacing()');
 226 |     |         if (lower >= upper) require (false, 'LowerUpperTickOrderInvalid()');
 227 |     |     }
 228 |     | 
 229 |     |     function checkPrice(
 230 |     |         uint160 price,
 231 |     |         PriceBounds memory bounds
 232 |     |     ) internal pure {
 233 |     |         if (price < bounds.min || price >= bounds.max) require (false, 'PriceOutOfBounds()');
 234 |     |     }
 235 |     | 
 236 |     |     /// @notice Calculates sqrt(1.0001^tick) * 2^96.
 237 |     |     /// @dev Throws if |tick| > max tick.
 238 |     |     /// @param tick The input tick for the above formula.
 239 |     |     /// @return price Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)
 240 |     |     /// at the given tick.
 241 |     |     function getPriceAtTick(
 242 |     |         int24 tick,
 243 |     |         PoolsharkStructs.Immutables memory constants
 244 |     |     ) internal pure returns (
 245 |     |         uint160 price
 246 |     |     ) {
 247 |     |         uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));
 248 |     |         if (absTick > uint256(uint24(maxTick(constants.tickSpacing)))) require (false, 'TickOutOfBounds()');
 249 |     |         unchecked {
 250 |     |             uint256 ratio = absTick & 0x1 != 0
 251 |     |                 ? 0xfffcb933bd6fad37aa2d162d1a594001
 252 |     |                 : 0x100000000000000000000000000000000;
 253 |     |             if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;
 254 |     |             if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;
 255 |     |             if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;
 256 |     |             if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;
 257 |     |             if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;
 258 |     |             if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;
 259 |     |             if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;
 260 |     |             if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;
 261 |     |             if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;
 262 |     |             if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;
 263 |     |             if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;
 264 |     |             if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;
 265 |     |             if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;
 266 |     |             if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;
 267 |     |             if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;
 268 |     |             if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;
 269 |     |             if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;
 270 |     |             if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;
 271 |     |             if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;
 272 |     | 
 273 |     |             if (tick > 0) ratio = type(uint256).max / ratio;
 274 |     |             // This divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.
 275 |     |             // We then downcast because we know the result always fits within 160 bits due to our tick input constraint.
 276 |     |             // We round up in the division so getTickAtPrice of the output price is always consistent.
 277 |     |             price = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));
 278 |     |         }
 279 |     |     }
 280 |     | 
 281 |     |     /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio.
 282 |     |     /// @param price The sqrt ratio for which to compute the tick as a Q64.96.
 283 |     |     /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio.
 284 |     |     function getTickAtPrice(
 285 |     |         uint160 price,
 286 |     |         PoolsharkStructs.Immutables  memory constants
 287 |     |     ) internal pure returns (int24 tick) {
 288 |     |         // Second inequality must be < because the price can never reach the price at the max tick.
 289 |     |         if (price < constants.bounds.min || price >= constants.bounds.max)
 290 |     |             require (false, 'PriceOutOfBounds()');
 291 |     |         uint256 ratio = uint256(price) << 32;
 292 |     | 
 293 |     |         uint256 r = ratio;
 294 |     |         uint256 msb = 0;
 295 |     | 
 296 |     |         assembly {
 297 |     |             let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))
 298 |     |             msb := or(msb, f)
 299 |     |             r := shr(f, r)
 300 |     |         }
 301 |     |         assembly {
 302 |     |             let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))
 303 |     |             msb := or(msb, f)
 304 |     |             r := shr(f, r)
 305 |     |         }
 306 |     |         assembly {
 307 |     |             let f := shl(5, gt(r, 0xFFFFFFFF))
 308 |     |             msb := or(msb, f)
 309 |     |             r := shr(f, r)
 310 |     |         }
 311 |     |         assembly {
 312 |     |             let f := shl(4, gt(r, 0xFFFF))
 313 |     |             msb := or(msb, f)
 314 |     |             r := shr(f, r)
 315 |     |         }
 316 |     |         assembly {
 317 |     |             let f := shl(3, gt(r, 0xFF))
 318 |     |             msb := or(msb, f)
 319 |     |             r := shr(f, r)
 320 |     |         }
 321 |     |         assembly {
 322 |     |             let f := shl(2, gt(r, 0xF))
 323 |     |             msb := or(msb, f)
 324 |     |             r := shr(f, r)
 325 |     |         }
 326 |     |         assembly {
 327 |     |             let f := shl(1, gt(r, 0x3))
 328 |     |             msb := or(msb, f)
 329 |     |             r := shr(f, r)
 330 |     |         }
 331 |     |         assembly {
 332 |     |             let f := gt(r, 0x1)
 333 |     |             msb := or(msb, f)
 334 |     |         }
 335 |     | 
 336 |     |         if (msb >= 128) r = ratio >> (msb - 127);
 337 |     |         else r = ratio << (127 - msb);
 338 |     | 
 339 |     |         int256 log_2 = (int256(msb) - 128) << 64;
 340 |     | 
 341 |     |         assembly {
 342 |     |             r := shr(127, mul(r, r))
 343 |     |             let f := shr(128, r)
 344 |     |             log_2 := or(log_2, shl(63, f))
 345 |     |             r := shr(f, r)
 346 |     |         }
 347 |     |         assembly {
 348 |     |             r := shr(127, mul(r, r))
 349 |     |             let f := shr(128, r)
 350 |     |             log_2 := or(log_2, shl(62, f))
 351 |     |             r := shr(f, r)
 352 |     |         }
 353 |     |         assembly {
 354 |     |             r := shr(127, mul(r, r))
 355 |     |             let f := shr(128, r)
 356 |     |             log_2 := or(log_2, shl(61, f))
 357 |     |             r := shr(f, r)
 358 |     |         }
 359 |     |         assembly {
 360 |     |             r := shr(127, mul(r, r))
 361 |     |             let f := shr(128, r)
 362 |     |             log_2 := or(log_2, shl(60, f))
 363 |     |             r := shr(f, r)
 364 |     |         }
 365 |     |         assembly {
 366 |     |             r := shr(127, mul(r, r))
 367 |     |             let f := shr(128, r)
 368 |     |             log_2 := or(log_2, shl(59, f))
 369 |     |             r := shr(f, r)
 370 |     |         }
 371 |     |         assembly {
 372 |     |             r := shr(127, mul(r, r))
 373 |     |             let f := shr(128, r)
 374 |     |             log_2 := or(log_2, shl(58, f))
 375 |     |             r := shr(f, r)
 376 |     |         }
 377 |     |         assembly {
 378 |     |             r := shr(127, mul(r, r))
 379 |     |             let f := shr(128, r)
 380 |     |             log_2 := or(log_2, shl(57, f))
 381 |     |             r := shr(f, r)
 382 |     |         }
 383 |     |         assembly {
 384 |     |             r := shr(127, mul(r, r))
 385 |     |             let f := shr(128, r)
 386 |     |             log_2 := or(log_2, shl(56, f))
 387 |     |             r := shr(f, r)
 388 |     |         }
 389 |     |         assembly {
 390 |     |             r := shr(127, mul(r, r))
 391 |     |             let f := shr(128, r)
 392 |     |             log_2 := or(log_2, shl(55, f))
 393 |     |             r := shr(f, r)
 394 |     |         }
 395 |     |         assembly {
 396 |     |             r := shr(127, mul(r, r))
 397 |     |             let f := shr(128, r)
 398 |     |             log_2 := or(log_2, shl(54, f))
 399 |     |             r := shr(f, r)
 400 |     |         }
 401 |     |         assembly {
 402 |     |             r := shr(127, mul(r, r))
 403 |     |             let f := shr(128, r)
 404 |     |             log_2 := or(log_2, shl(53, f))
 405 |     |             r := shr(f, r)
 406 |     |         }
 407 |     |         assembly {
 408 |     |             r := shr(127, mul(r, r))
 409 |     |             let f := shr(128, r)
 410 |     |             log_2 := or(log_2, shl(52, f))
 411 |     |             r := shr(f, r)
 412 |     |         }
 413 |     |         assembly {
 414 |     |             r := shr(127, mul(r, r))
 415 |     |             let f := shr(128, r)
 416 |     |             log_2 := or(log_2, shl(51, f))
 417 |     |             r := shr(f, r)
 418 |     |         }
 419 |     |         assembly {
 420 |     |             r := shr(127, mul(r, r))
 421 |     |             let f := shr(128, r)
 422 |     |             log_2 := or(log_2, shl(50, f))
 423 |     |         }
 424 |     | 
 425 |     |         int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number
 426 |     | 
 427 |     |         int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);
 428 |     |         int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);
 429 |     | 
 430 |     |         tick = tickLow == tickHi ? tickLow : getPriceAtTick(tickHi, constants) <= price
 431 |     |             ? tickHi
 432 |     |             : tickLow;
 433 |     |     }
 434 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/math/OverflowMath.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | /// @notice Math library that facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision.
   5 |     | library OverflowMath {
   6 |     | 
   7 |     |     // @dev no underflow or overflow checks
   8 |     |     function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {
   9 |     |         assembly {
  10 |     |             z := add(div(x, y), gt(mod(x, y), 0))
  11 |     |         }
  12 |     |     }
  13 |     | 
  14 |     |     /// @notice Calculates floor(a×b÷denominator) with full precision - throws if result overflows an uint256 or denominator == 0.
  15 |     |     /// @param a The multiplicand.
  16 |     |     /// @param b The multiplier.
  17 |     |     /// @param denominator The divisor.
  18 |     |     /// @return result The 256-bit result.
  19 |     |     /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.
  20 |     |     function mulDiv(
  21 |     |         uint256 a,
  22 |     |         uint256 b,
  23 |     |         uint256 denominator
  24 |     |     ) internal pure returns (uint256 result) {
  25 |     |         unchecked {
  26 |     |             // 512-bit multiply [prod1 prod0] = a * b.
  27 |     |             // Compute the product mod 2**256 and mod 2**256 - 1,
  28 |     |             // then use the Chinese Remainder Theorem to reconstruct
  29 |     |             // the 512 bit result. The result is stored in two 256
  30 |     |             // variables such that product = prod1 * 2**256 + prod0.
  31 |     |             uint256 prod0; // Least significant 256 bits of the product.
  32 |     |             uint256 prod1; // Most significant 256 bits of the product.
  33 |     |             assembly {
  34 |     |                 let mm := mulmod(a, b, not(0))
  35 |     |                 prod0 := mul(a, b)
  36 |     |                 prod1 := sub(sub(mm, prod0), lt(mm, prod0))
  37 |     |             }
  38 |     |             // Handle non-overflow cases, 256 by 256 division.
  39 |     |             if (prod1 == 0) {
  40 |     |                 require(denominator > 0);
  41 |     |                 assembly {
  42 |     |                     result := div(prod0, denominator)
  43 |     |                 }
  44 |     |                 return result;
  45 |     |             }
  46 |     |             // Make sure the result is less than 2**256 -
  47 |     |             // also prevents denominator == 0.
  48 |     |             require(denominator > prod1);
  49 |     |             ///////////////////////////////////////////////
  50 |     |             // 512 by 256 division.
  51 |     |             ///////////////////////////////////////////////
  52 |     |             // Make division exact by subtracting the remainder from [prod1 prod0] -
  53 |     |             // compute remainder using mulmod.
  54 |     |             uint256 remainder;
  55 |     |             assembly {
  56 |     |                 remainder := mulmod(a, b, denominator)
  57 |     |             }
  58 |     |             // Subtract 256 bit number from 512 bit number.
  59 |     |             assembly {
  60 |     |                 prod1 := sub(prod1, gt(remainder, prod0))
  61 |     |                 prod0 := sub(prod0, remainder)
  62 |     |             }
  63 |     |             // Factor powers of two out of denominator -
  64 |     |             // compute largest power of two divisor of denominator
  65 |     |             // (always >= 1).
  66 |     |             uint256 twos = uint256(-int256(denominator)) & denominator;
  67 |     |             // Divide denominator by power of two.
  68 |     |             assembly {
  69 |     |                 denominator := div(denominator, twos)
  70 |     |             }
  71 |     |             // Divide [prod1 prod0] by the factors of two.
  72 |     |             assembly {
  73 |     |                 prod0 := div(prod0, twos)
  74 |     |             }
  75 |     |             // Shift in bits from prod1 into prod0. For this we need
  76 |     |             // to flip `twos` such that it is 2**256 / twos -
  77 |     |             // if twos is zero, then it becomes one.
  78 |     |             assembly {
  79 |     |                 twos := add(div(sub(0, twos), twos), 1)
  80 |     |             }
  81 |     |             prod0 |= prod1 * twos;
  82 |     |             // Invert denominator mod 2**256 -
  83 |     |             // now that denominator is an odd number, it has an inverse
  84 |     |             // modulo 2**256 such that denominator * inv = 1 mod 2**256.
  85 |     |             // Compute the inverse by starting with a seed that is correct
  86 |     |             // for four bits. That is, denominator * inv = 1 mod 2**4.
  87 |     |             uint256 inv = (3 * denominator) ^ 2;
  88 |     |             // Now use Newton-Raphson iteration to improve the precision.
  89 |     |             // Thanks to Hensel's lifting lemma, this also works in modular
  90 |     |             // arithmetic, doubling the correct bits in each step.
  91 |     |             inv *= 2 - denominator * inv; // Inverse mod 2**8.
  92 |     |             inv *= 2 - denominator * inv; // Inverse mod 2**16.
  93 |     |             inv *= 2 - denominator * inv; // Inverse mod 2**32.
  94 |     |             inv *= 2 - denominator * inv; // Inverse mod 2**64.
  95 |     |             inv *= 2 - denominator * inv; // Inverse mod 2**128.
  96 |     |             inv *= 2 - denominator * inv; // Inverse mod 2**256.
  97 |     |             // Because the division is now exact we can divide by multiplying
  98 |     |             // with the modular inverse of denominator. This will give us the
  99 |     |             // correct result modulo 2**256. Since the precoditions guarantee
 100 |     |             // that the outcome is less than 2**256, this is the final result.
 101 |     |             // We don't need to compute the high bits of the result and prod1
 102 |     |             // is no longer required.
 103 |     |             result = prod0 * inv;
 104 |     |             return result;
 105 |     |         }
 106 |     |     }
 107 |     | 
 108 |     |     /// @notice Calculates ceil(a×b÷denominator) with full precision - throws if result overflows an uint256 or denominator == 0.
 109 |     |     /// @param a The multiplicand.
 110 |     |     /// @param b The multiplier.
 111 |     |     /// @param denominator The divisor.
 112 |     |     /// @return result The 256-bit result.
 113 |     |     function mulDivRoundingUp(
 114 |     |         uint256 a,
 115 |     |         uint256 b,
 116 |     |         uint256 denominator
 117 |     |     ) internal pure returns (uint256 result) {
 118 |     |         result = mulDiv(a, b, denominator);
 119 |     |         unchecked {
 120 |     |             if (mulmod(a, b, denominator) != 0) {
 121 |     |                 if (result >= type(uint256).max) require (false, 'MaxUintExceeded()');
 122 |     |                 result++;
 123 |     |             }
 124 |     |         }
 125 |     |     }
 126 |     | }
 127 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/pool/QuoteCall.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | import '../../interfaces/limit/ILimitPoolStructs.sol';
  5 |     | import '../Ticks.sol';
  6 |     | 
  7 |     | library QuoteCall {
  8 |     |     event Swap(
  9 |     |         address indexed recipient,
 10 |     |         bool zeroForOne,
 11 |     |         uint256 amountIn,
 12 |     |         uint256 amountOut,
 13 |     |         uint160 price,
 14 |     |         uint128 liquidity,
 15 |     |         int24 tickAtPrice
 16 |     |     );
 17 |     | 
 18 |     |     function perform(
 19 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
 20 |     |         PoolsharkStructs.TickMap storage rangeTickMap,
 21 |     |         PoolsharkStructs.TickMap storage limitTickMap,
 22 |     |         PoolsharkStructs.QuoteParams memory params,
 23 |     |         PoolsharkStructs.SwapCache memory cache
 24 |     |     ) internal view returns (
 25 |     |         uint256,
 26 |     |         uint256,
 27 |     |         uint160
 28 |     |     ) {
 29 |     |         return Ticks.quote(
 30 |     |             ticks,
 31 |     |             rangeTickMap,
 32 |     |             limitTickMap,
 33 |     |             params,
 34 |     |             cache
 35 |     |         );
 36 |     |     }
 37 |     | }
 38 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/pool/SampleCall.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.13;
  3 |     | 
  4 |     | import '../../interfaces/range/IRangePoolStructs.sol';
  5 |     | import '../range/Samples.sol';
  6 |     | 
  7 |     | library SampleCall {
  8 |     |     event Swap(
  9 |     |         address indexed recipient,
 10 |     |         bool zeroForOne,
 11 |     |         uint256 amountIn,
 12 |     |         uint256 amountOut,
 13 |     |         uint160 price,
 14 |     |         uint128 liquidity,
 15 |     |         int24 tickAtPrice
 16 |     |     );
 17 |     | 
 18 |     |     function perform(
 19 |     |         PoolsharkStructs.GlobalState memory state,
 20 |     |         PoolsharkStructs.Immutables memory constants,
 21 |     |         uint32[] memory secondsAgo
 22 |     |     ) internal view returns (
 23 |     |         int56[]   memory tickSecondsAccum,
 24 |     |         uint160[] memory secondsPerLiquidityAccum,
 25 |     |         uint160 averagePrice,
 26 |     |         uint128 averageLiquidity,
 27 |     |         int24 averageTick
 28 |     |     ) {
 29 |     |         return Samples.get(
 30 |     |             address(this),
 31 |     |             IRangePoolStructs.SampleParams(
 32 |     |                 state.pool.samples.index,
 33 |     |                 state.pool.samples.length,
 34 |     |                 uint32(block.timestamp),
 35 |     |                 secondsAgo,
 36 |     |                 state.pool.tickAtPrice,
 37 |     |                 state.pool.liquidity,
 38 |     |                 constants
 39 |     |             )
 40 |     |         );
 41 |     |     }
 42 |     | }
 43 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/pool/SwapCall.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | import '../../interfaces/limit/ILimitPoolStructs.sol';
   5 |     | import '../../interfaces/callbacks/IPoolsharkSwapCallback.sol';
   6 |     | import '../../interfaces/IERC20Minimal.sol';
   7 |     | import '../Ticks.sol';
   8 |     | import '../utils/Collect.sol';
   9 |     | import '../utils/SafeTransfers.sol';
  10 |     | 
  11 |     | library SwapCall {
  12 |     |     event SwapPool0(
  13 |     |         address indexed recipient,
  14 |     |         uint128 amountIn,
  15 |     |         uint128 amountOut,
  16 |     |         uint160 priceLimit,
  17 |     |         uint160 newPrice
  18 |     |     );
  19 |     | 
  20 |     |     event SwapPool1(
  21 |     |         address indexed recipient,
  22 |     |         uint128 amountIn,
  23 |     |         uint128 amountOut,
  24 |     |         uint160 priceLimit,
  25 |     |         uint160 newPrice
  26 |     |     );
  27 |     | 
  28 |     |     function perform(
  29 |     |         mapping(int24 => ILimitPoolStructs.Tick) storage ticks,
  30 |     |         PoolsharkStructs.GlobalState storage globalState,
  31 |     |         IRangePoolStructs.Sample[65535] storage samples,
  32 |     |         PoolsharkStructs.TickMap storage rangeTickMap,
  33 |     |         PoolsharkStructs.TickMap storage limitTickMap,
  34 |     |         PoolsharkStructs.SwapParams memory params,
  35 |     |         PoolsharkStructs.SwapCache memory cache
  36 |     |     ) internal returns (
  37 |     |         int256,
  38 |     |         int256
  39 |     |     ) {
  40 |     |         cache = Ticks.swap(
  41 |     |             ticks,
  42 |     |             samples,
  43 |     |             rangeTickMap,
  44 |     |             limitTickMap,
  45 |     |             params,
  46 |     |             cache
  47 |     |         );
  48 |     |         save(cache, globalState, params.zeroForOne);
  49 |     |         EchidnaAssertions.assertPoolBalanceExceeded(
  50 |     |             (params.zeroForOne ? balance(cache.constants.token1) : balance(cache.constants.token0)),
  51 |     |             cache.output
  52 |     |         );
  53 |     |         // transfer output amount
  54 |     |         SafeTransfers.transferOut(
  55 |     |             params.to, 
  56 |     |             params.zeroForOne ? cache.constants.token1
  57 |     |                               : cache.constants.token0,
  58 |     |             cache.output
  59 |     |         );
  60 |     | 
  61 |     |         // check balance and execute callback
  62 |     |         uint256 balanceStart = balance(params, cache);
  63 |     |         IPoolsharkSwapCallback(msg.sender).poolsharkSwapCallback(
  64 |     |             params.zeroForOne ? -int256(cache.input) : int256(cache.output),
  65 |     |             params.zeroForOne ? int256(cache.output) : -int256(cache.input),
  66 |     |             params.callbackData
  67 |     |         );
  68 |     | 
  69 |     |         // check balance requirements after callback
  70 |     |         if (balance(params, cache) < balanceStart + cache.input)
  71 |     |             require(false, 'SwapInputAmountTooLow()');
  72 |     | 
  73 |     |         return (
  74 |     |             params.zeroForOne ? 
  75 |     |                 (
  76 |     |                     -int256(cache.input),
  77 |     |                      int256(cache.output)
  78 |     |                 )
  79 |     |               : (
  80 |     |                      int256(cache.output),
  81 |     |                     -int256(cache.input)
  82 |     |                 )
  83 |     |         );
  84 |     |     }
  85 |     | 
  86 |     |     function save(
  87 |     |         PoolsharkStructs.SwapCache memory cache,
  88 |     |         PoolsharkStructs.GlobalState storage globalState,
  89 |     |         bool zeroForOne
  90 |     |     ) internal {
  91 |     |         globalState.epoch = cache.state.epoch;
  92 |     |         globalState.pool = cache.state.pool;
  93 |     |         if (zeroForOne)
  94 |     |             globalState.pool1 = cache.state.pool1;
  95 |     |         else
  96 |     |             globalState.pool0 = cache.state.pool0;
  97 |     |     }
  98 |     | 
  99 |     |     function balance(
 100 |     |         PoolsharkStructs.SwapParams memory params,
 101 |     |         PoolsharkStructs.SwapCache memory cache
 102 |     |     ) private view returns (uint256) {
 103 |     |         (
 104 |     |             bool success,
 105 |     |             bytes memory data
 106 |     |         ) = (params.zeroForOne ? cache.constants.token0
 107 |     |                                : cache.constants.token1)
 108 |     |                                .staticcall(
 109 |     |                                     abi.encodeWithSelector(
 110 |     |                                         IERC20Minimal.balanceOf.selector,
 111 |     |                                         address(this)
 112 |     |                                     )
 113 |     |                                 );
 114 |     |         require(success && data.length >= 32);
 115 |     |         return abi.decode(data, (uint256));
 116 |     |     }
 117 |     | 
 118 |     |     function balance(
 119 |     |         address token
 120 |     |     ) private view returns (uint256) {
 121 |     |         (
 122 |     |             bool success,
 123 |     |             bytes memory data
 124 |     |         ) = token.staticcall(
 125 |     |                                     abi.encodeWithSelector(
 126 |     |                                         IERC20Minimal.balanceOf.selector,
 127 |     |                                         address(this)
 128 |     |                                     )
 129 |     |                                 );
 130 |     |         require(success && data.length >= 32);
 131 |     |         return abi.decode(data, (uint256));
 132 |     |     }
 133 |     | }
 134 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/range/Positions.sol
   1 |     | // SPDX-License-Identifier: GPLv3
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | import '../../interfaces/IPool.sol';
   5 |     | import '../../interfaces/range/IRangePoolStructs.sol';
   6 |     | import '../math/ConstantProduct.sol';
   7 |     | import './math/FeeMath.sol';
   8 |     | import '../math/OverflowMath.sol';
   9 |     | import './TicksRange.sol';
  10 |     | import './Tokens.sol';
  11 |     | import './Samples.sol';
  12 |     | 
  13 |     | /// @notice Position management library for ranged liquidity.
  14 |     | library Positions {
  15 |     |     error NotEnoughPositionLiquidity();
  16 |     |     error InvalidClaimTick();
  17 |     |     error LiquidityOverflow();
  18 |     |     error WrongTickClaimedAt();
  19 |     |     error NoLiquidityBeingAdded();
  20 |     |     error PositionNotUpdated();
  21 |     |     error InvalidLowerTick();
  22 |     |     error InvalidUpperTick();
  23 |     |     error InvalidPositionAmount();
  24 |     |     error InvalidPositionBoundsOrder();
  25 |     |     error NotImplementedYet();
  26 |     | 
  27 |     |     uint256 internal constant Q128 = 0x100000000000000000000000000000000;
  28 |     | 
  29 |     |     event Mint(
  30 |     |         address indexed recipient,
  31 |     |         int24 lower,
  32 |     |         int24 upper,
  33 |     |         uint256 indexed tokenId,
  34 |     |         uint128 tokenMinted,
  35 |     |         uint128 liquidityMinted,
  36 |     |         uint128 amount0,
  37 |     |         uint128 amount1
  38 |     |     );
  39 |     | 
  40 |     |     event Burn(
  41 |     |         address indexed recipient,
  42 |     |         int24 lower,
  43 |     |         int24 upper,
  44 |     |         uint256 indexed tokenId,
  45 |     |         uint128 tokenBurned,
  46 |     |         uint128 liquidityBurned,
  47 |     |         uint128 amount0,
  48 |     |         uint128 amount1
  49 |     |     );
  50 |     | 
  51 |     |     event Compound(
  52 |     |         int24 indexed lower,
  53 |     |         int24 indexed upper,
  54 |     |         uint128 liquidityCompounded,
  55 |     |         uint128 positionAmount0,
  56 |     |         uint128 positionAmount1
  57 |     |     );
  58 |     | 
  59 |     |     function validate(
  60 |     |         IRangePoolStructs.MintParams memory params,
  61 |     |         PoolsharkStructs.GlobalState memory state,
  62 |     |         PoolsharkStructs.Immutables memory constants
  63 |     |     ) internal pure returns (IRangePoolStructs.MintParams memory, uint256 liquidityMinted) {
  64 |     |         TicksRange.validate(params.lower, params.upper, constants.tickSpacing);
  65 |     |         
  66 |     |         uint256 priceLower = uint256(ConstantProduct.getPriceAtTick(params.lower, constants));
  67 |     |         uint256 priceUpper = uint256(ConstantProduct.getPriceAtTick(params.upper, constants));
  68 |     | 
  69 |     |         liquidityMinted = ConstantProduct.getLiquidityForAmounts(
  70 |     |             priceLower,
  71 |     |             priceUpper,
  72 |     |             state.pool.price,
  73 |     |             params.amount1,
  74 |     |             params.amount0
  75 |     |         );
  76 |     |         if (liquidityMinted == 0) require(false, 'NoLiquidityBeingAdded()');
  77 |     |         (params.amount0, params.amount1) = ConstantProduct.getAmountsForLiquidity(
  78 |     |             priceLower,
  79 |     |             priceUpper,
  80 |     |             state.pool.price,
  81 |     |             liquidityMinted,
  82 |     |             true
  83 |     |         );
  84 |     |         if (liquidityMinted > uint128(type(int128).max)) require(false, 'LiquidityOverflow()');
  85 |     | 
  86 |     |         return (params, liquidityMinted);
  87 |     |     }
  88 |     | 
  89 |     |     function add(
  90 |     |         IRangePoolStructs.Position memory position,
  91 |     |         mapping(int24 => PoolsharkStructs.Tick) storage ticks,
  92 |     |         IRangePoolStructs.Sample[65535] storage samples,
  93 |     |         PoolsharkStructs.TickMap storage tickMap,
  94 |     |         IRangePoolStructs.AddParams memory params,
  95 |     |         PoolsharkStructs.Immutables memory constants
  96 |     |     ) internal returns (
  97 |     |         PoolsharkStructs.GlobalState memory,
  98 |     |         IRangePoolStructs.Position memory,
  99 |     |         uint128
 100 |     |     ) {
 101 |     |         if (params.mint.amount0 == 0 && params.mint.amount1 == 0) return (params.state, position, 0);
 102 |     | 
 103 |     |         IRangePoolStructs.PositionCache memory cache = IRangePoolStructs.PositionCache({
 104 |     |             priceLower: ConstantProduct.getPriceAtTick(params.mint.lower, constants),
 105 |     |             priceUpper: ConstantProduct.getPriceAtTick(params.mint.upper, constants),
 106 |     |             liquidityOnPosition: 0,
 107 |     |             liquidityAmount: 0,
 108 |     |             totalSupply: Tokens.totalSupply(constants.poolToken, params.mint.lower, params.mint.upper),
 109 |     |             tokenId: Tokens.id(params.mint.lower, params.mint.upper)
 110 |     |         });
 111 |     | 
 112 |     |         params.state = TicksRange.insert(
 113 |     |             ticks,
 114 |     |             samples,
 115 |     |             tickMap,
 116 |     |             params.state,
 117 |     |             constants,
 118 |     |             params.mint.lower,
 119 |     |             params.mint.upper,
 120 |     |             params.amount
 121 |     |         );
 122 |     | 
 123 |     |         (
 124 |     |             position.feeGrowthInside0Last,
 125 |     |             position.feeGrowthInside1Last
 126 |     |         ) = rangeFeeGrowth(
 127 |     |             ticks[params.mint.lower].range,
 128 |     |             ticks[params.mint.upper].range,
 129 |     |             params.state,
 130 |     |             params.mint.lower,
 131 |     |             params.mint.upper
 132 |     |         );
 133 |     | 
 134 |     |         position.liquidity += uint128(params.amount);
 135 |     |         
 136 |     |         // modify liquidity minted to account for fees accrued
 137 |     |         if (position.amount0 > 0 || position.amount1 > 0
 138 |     |             || (position.liquidity - params.amount) > cache.totalSupply) {
 139 |     |             // modify amount based on autocompounded fees
 140 |     |             if (cache.totalSupply > 0) {
 141 |     |                 cache.liquidityOnPosition = ConstantProduct.getLiquidityForAmounts(
 142 |     |                                                 cache.priceLower,
 143 |     |                                                 cache.priceUpper,
 144 |     |                                                 position.amount0 > 0 ? cache.priceLower : cache.priceUpper,
 145 |     |                                                 position.amount1,
 146 |     |                                                 position.amount0
 147 |     |                                             );
 148 |     |                 params.amount = uint128(uint256(params.amount) * cache.totalSupply /
 149 |     |                         (uint256(position.liquidity - params.amount) + cache.liquidityOnPosition));
 150 |     |             } /// @dev - if there are fees on the position we mint less positionToken
 151 |     |         }
 152 |     |         IRangePoolERC1155(constants.poolToken).mintFungible(params.mint.to, cache.tokenId, params.amount, constants);
 153 |     |         emit Mint(
 154 |     |             params.mint.to,
 155 |     |             params.mint.lower,
 156 |     |             params.mint.upper,
 157 |     |             cache.tokenId,
 158 |     |             params.amount,
 159 |     |             params.liquidity,
 160 |     |             params.mint.amount0,
 161 |     |             params.mint.amount1
 162 |     |         );
 163 |     |         return (params.state, position, params.amount);
 164 |     |     }
 165 |     | 
 166 |     |     function remove(
 167 |     |         IRangePoolStructs.Position memory position,
 168 |     |         mapping(int24 => PoolsharkStructs.Tick) storage ticks,
 169 |     |         IRangePoolStructs.Sample[65535] storage samples,
 170 |     |         PoolsharkStructs.TickMap storage tickMap,
 171 |     |         PoolsharkStructs.GlobalState memory state,
 172 |     |         IRangePoolStructs.BurnParams memory params,
 173 |     |         IRangePoolStructs.RemoveParams memory removeParams
 174 |     |     ) internal returns (
 175 |     |         PoolsharkStructs.GlobalState memory,
 176 |     |         IRangePoolStructs.Position memory,
 177 |     |         uint128,
 178 |     |         uint128
 179 |     |     ) {
 180 |     |         IRangePoolStructs.PositionCache memory cache = IRangePoolStructs.PositionCache({
 181 |     |             priceLower: ConstantProduct.getPriceAtTick(params.lower, removeParams.constants),
 182 |     |             priceUpper: ConstantProduct.getPriceAtTick(params.upper, removeParams.constants),
 183 |     |             liquidityOnPosition: 0,
 184 |     |             liquidityAmount: 0,
 185 |     |             totalSupply: 0,
 186 |     |             tokenId: Tokens.id(params.lower, params.upper)
 187 |     |         });
 188 |     |         cache.totalSupply = Tokens.totalSupplyById(removeParams.constants.poolToken, cache.tokenId);
 189 |     |         cache.liquidityAmount = params.burnPercent > 0 ? removeParams.tokenBurned * uint256(position.liquidity) 
 190 |     |                                                                        / (cache.totalSupply + removeParams.tokenBurned)
 191 |     |                                                                      : 0;
 192 |     |         if (removeParams.tokenBurned == 0) {
 193 |     |             return (state, position, removeParams.amount0, removeParams.amount1);
 194 |     |         } 
 195 |     |         if (cache.liquidityAmount > position.liquidity) require(false, 'NotEnoughPositionLiquidity()');
 196 |     |         {
 197 |     |             uint128 amount0Removed; uint128 amount1Removed;
 198 |     |             (amount0Removed, amount1Removed) = ConstantProduct.getAmountsForLiquidity(
 199 |     |                 cache.priceLower,
 200 |     |                 cache.priceUpper,
 201 |     |                 state.pool.price,
 202 |     |                 cache.liquidityAmount,
 203 |     |                 false
 204 |     |             );
 205 |     |             removeParams.amount0 += amount0Removed;
 206 |     |             removeParams.amount1 += amount1Removed;
 207 |     | 
 208 |     |             position.amount0 += amount0Removed;
 209 |     |             position.amount1 += amount1Removed;
 210 |     |             position.liquidity -= uint128(cache.liquidityAmount);
 211 |     |         }
 212 |     |         if (position.liquidity == 0) {
 213 |     |             position.feeGrowthInside0Last = 0;
 214 |     |             position.feeGrowthInside1Last = 0;
 215 |     |         }
 216 |     |         state = TicksRange.remove(
 217 |     |             ticks,
 218 |     |             samples,
 219 |     |             tickMap,
 220 |     |             state,
 221 |     |             removeParams.constants,
 222 |     |             params.lower,
 223 |     |             params.upper,
 224 |     |             uint128(cache.liquidityAmount)
 225 |     |         );
 226 |     |         emit Burn(
 227 |     |             params.to,
 228 |     |             params.lower,
 229 |     |             params.upper,
 230 |     |             cache.tokenId,
 231 |     |             removeParams.tokenBurned,
 232 |     |             uint128(cache.liquidityAmount),
 233 |     |             removeParams.amount0,
 234 |     |             removeParams.amount1
 235 |     |         );
 236 |     |         return (state, position, removeParams.amount0, removeParams.amount1);
 237 |     |     }
 238 |     | 
 239 |     |     function compound(
 240 |     |         IRangePoolStructs.Position memory position,
 241 |     |         mapping(int24 => PoolsharkStructs.Tick) storage ticks,
 242 |     |         IRangePoolStructs.Sample[65535] storage samples,
 243 |     |         PoolsharkStructs.TickMap storage tickMap,
 244 |     |         PoolsharkStructs.GlobalState memory state,
 245 |     |         IRangePoolStructs.CompoundParams memory params,
 246 |     |         PoolsharkStructs.Immutables memory constants
 247 |     |     ) internal returns (IRangePoolStructs.Position memory, PoolsharkStructs.GlobalState memory) {
 248 |     |         IRangePoolStructs.PositionCache memory cache = IRangePoolStructs.PositionCache({
 249 |     |             priceLower: ConstantProduct.getPriceAtTick(params.lower, constants),
 250 |     |             priceUpper: ConstantProduct.getPriceAtTick(params.upper, constants),
 251 |     |             liquidityOnPosition: 0,
 252 |     |             liquidityAmount: 0,
 253 |     |             totalSupply: 0,
 254 |     |             tokenId: 0
 255 |     |         });
 256 |     | 
 257 |     |         // price tells you the ratio so you need to swap into the correct ratio and add liquidity
 258 |     |         cache.liquidityAmount = ConstantProduct.getLiquidityForAmounts(
 259 |     |             cache.priceLower,
 260 |     |             cache.priceUpper,
 261 |     |             state.pool.price,
 262 |     |             position.amount1,
 263 |     |             position.amount0
 264 |     |         );
 265 |     |         if (cache.liquidityAmount > 0) {
 266 |     |             state = TicksRange.insert(
 267 |     |                 ticks,
 268 |     |                 samples,
 269 |     |                 tickMap,
 270 |     |                 state,
 271 |     |                 constants,
 272 |     |                 params.lower,
 273 |     |                 params.upper,
 274 |     |                 uint128(cache.liquidityAmount)
 275 |     |             );
 276 |     |             uint256 amount0; uint256 amount1;
 277 |     |             (amount0, amount1) = ConstantProduct.getAmountsForLiquidity(
 278 |     |                 cache.priceLower,
 279 |     |                 cache.priceUpper,
 280 |     |                 state.pool.price,
 281 |     |                 cache.liquidityAmount,
 282 |     |                 true
 283 |     |             );
 284 |     |             position.amount0 -= (amount0 <= position.amount0) ? uint128(amount0) : position.amount0;
 285 |     |             position.amount1 -= (amount1 <= position.amount1) ? uint128(amount1) : position.amount1;
 286 |     |             position.liquidity += uint128(cache.liquidityAmount);
 287 |     |         }
 288 |     |         emit Compound(
 289 |     |             params.lower,
 290 |     |             params.upper,
 291 |     |             uint128(cache.liquidityAmount),
 292 |     |             position.amount0,
 293 |     |             position.amount1
 294 |     |         );
 295 |     |         return (position, state);
 296 |     |     }
 297 |     | 
 298 |     |     function update(
 299 |     |         mapping(int24 => PoolsharkStructs.Tick) storage ticks,
 300 |     |         IRangePoolStructs.Position memory position,
 301 |     |         PoolsharkStructs.GlobalState memory state,
 302 |     |         PoolsharkStructs.Immutables memory constants,
 303 |     |         IRangePoolStructs.UpdateParams memory params
 304 |     |     ) internal returns (
 305 |     |         IRangePoolStructs.Position memory,
 306 |     |         uint128, 
 307 |     |         uint128,
 308 |     |         uint128
 309 |     |     ) {
 310 |     |         IRangePoolStructs.UpdatePositionCache memory cache;
 311 |     |         cache.totalSupply = Tokens.totalSupply(constants.poolToken, params.lower, params.upper);
 312 |     |         /// @dev - only true if burn call
 313 |     |         if (params.burnPercent > 0) {
 314 |     |             uint256 tokenId = Tokens.id(params.lower, params.upper);
 315 |     |             cache.tokenBurned = params.burnPercent * Tokens.balanceOf(constants.poolToken, msg.sender, params.lower, params.upper) / 1e38;
 316 |     |             IRangePoolERC1155(constants.poolToken).burnFungible(msg.sender, tokenId, cache.tokenBurned, constants);
 317 |     |         }
 318 |     |         
 319 |     |         (uint256 rangeFeeGrowth0, uint256 rangeFeeGrowth1) = rangeFeeGrowth(
 320 |     |             ticks[params.lower].range,
 321 |     |             ticks[params.upper].range,
 322 |     |             state,
 323 |     |             params.lower,
 324 |     |             params.upper
 325 |     |         );
 326 |     | 
 327 |     |         uint128 amount0Fees = uint128(
 328 |     |             OverflowMath.mulDiv(
 329 |     |                 rangeFeeGrowth0 - position.feeGrowthInside0Last,
 330 |     |                 uint256(position.liquidity),
 331 |     |                 Q128
 332 |     |             )
 333 |     |         );
 334 |     | 
 335 |     |         uint128 amount1Fees = uint128(
 336 |     |             OverflowMath.mulDiv(
 337 |     |                 rangeFeeGrowth1 - position.feeGrowthInside1Last,
 338 |     |                 position.liquidity,
 339 |     |                 Q128
 340 |     |             )
 341 |     |         );
 342 |     | 
 343 |     |         position.feeGrowthInside0Last = rangeFeeGrowth0;
 344 |     |         position.feeGrowthInside1Last = rangeFeeGrowth1;
 345 |     | 
 346 |     |         position.amount0 += amount0Fees;
 347 |     |         position.amount1 += amount1Fees;
 348 |     | 
 349 |     |         if (params.burnPercent > 0) {
 350 |     |             cache.feesBurned0 = uint128(
 351 |     |                 (uint256(position.amount0) * uint256(cache.tokenBurned)) / (cache.totalSupply)
 352 |     |             );
 353 |     |             cache.feesBurned1 = uint128(
 354 |     |                 (uint256(position.amount1) * uint256(cache.tokenBurned)) / (cache.totalSupply)
 355 |     |             );
 356 |     |         }
 357 |     |         return (position, cache.feesBurned0, cache.feesBurned1, uint128(cache.tokenBurned));
 358 |     |     }
 359 |     | 
 360 |     |     function rangeFeeGrowth(
 361 |     |         PoolsharkStructs.RangeTick memory lowerTick,
 362 |     |         PoolsharkStructs.RangeTick memory upperTick,
 363 |     |         PoolsharkStructs.GlobalState memory state,
 364 |     |         int24 lower,
 365 |     |         int24 upper
 366 |     |     ) internal pure returns (uint256 feeGrowthInside0, uint256 feeGrowthInside1) {
 367 |     | 
 368 |     |         uint256 feeGrowthGlobal0 = state.pool.feeGrowthGlobal0;
 369 |     |         uint256 feeGrowthGlobal1 = state.pool.feeGrowthGlobal1;
 370 |     | 
 371 |     |         uint256 feeGrowthBelow0;
 372 |     |         uint256 feeGrowthBelow1;
 373 |     |         if (state.pool.tickAtPrice >= lower) {
 374 |     |             feeGrowthBelow0 = lowerTick.feeGrowthOutside0;
 375 |     |             feeGrowthBelow1 = lowerTick.feeGrowthOutside1;
 376 |     |         } else {
 377 |     |             feeGrowthBelow0 = feeGrowthGlobal0 - lowerTick.feeGrowthOutside0;
 378 |     |             feeGrowthBelow1 = feeGrowthGlobal1 - lowerTick.feeGrowthOutside1;
 379 |     |         }
 380 |     | 
 381 |     |         uint256 feeGrowthAbove0;
 382 |     |         uint256 feeGrowthAbove1;
 383 |     |         if (state.pool.tickAtPrice < upper) {
 384 |     |             feeGrowthAbove0 = upperTick.feeGrowthOutside0;
 385 |     |             feeGrowthAbove1 = upperTick.feeGrowthOutside1;
 386 |     |         } else {
 387 |     |             feeGrowthAbove0 = feeGrowthGlobal0 - upperTick.feeGrowthOutside0;
 388 |     |             feeGrowthAbove1 = feeGrowthGlobal1 - upperTick.feeGrowthOutside1;
 389 |     |         }
 390 |     |         feeGrowthInside0 = feeGrowthGlobal0 - feeGrowthBelow0 - feeGrowthAbove0;
 391 |     |         feeGrowthInside1 = feeGrowthGlobal1 - feeGrowthBelow1 - feeGrowthAbove1;
 392 |     |     }
 393 |     | 
 394 |     |     function rangeFeeGrowth(
 395 |     |         address pool,
 396 |     |         int24 lower,
 397 |     |         int24 upper
 398 |     |     ) public view returns (
 399 |     |         uint256 feeGrowthInside0,
 400 |     |         uint256 feeGrowthInside1
 401 |     |     ) {
 402 |     |         TicksRange.validate(lower, upper, (IPool(pool).immutables()).tickSpacing);
 403 |     |         (
 404 |     |             PoolsharkStructs.RangePoolState memory poolState,
 405 |     |             ,,,,
 406 |     |         ) = IPool(pool).globalState();
 407 |     | 
 408 |     |         (
 409 |     |             PoolsharkStructs.RangeTick memory tickLower
 410 |     |             ,
 411 |     |         )
 412 |     |             = IPool(pool).ticks(lower);
 413 |     |         (
 414 |     |             PoolsharkStructs.RangeTick memory tickUpper
 415 |     |             ,
 416 |     |         )
 417 |     |             = IPool(pool).ticks(upper);
 418 |     | 
 419 |     |         uint256 feeGrowthBelow0;
 420 |     |         uint256 feeGrowthBelow1;
 421 |     |         uint256 feeGrowthAbove0;
 422 |     |         uint256 feeGrowthAbove1;
 423 |     | 
 424 |     |         if (lower <= poolState.tickAtPrice) {
 425 |     |             feeGrowthBelow0 = tickLower.feeGrowthOutside0;
 426 |     |             feeGrowthBelow1 = tickLower.feeGrowthOutside1;
 427 |     |         } else {
 428 |     |             feeGrowthBelow0 = poolState.feeGrowthGlobal0 - tickLower.feeGrowthOutside0;
 429 |     |             feeGrowthBelow1 = poolState.feeGrowthGlobal1 - tickLower.feeGrowthOutside1;
 430 |     |         }
 431 |     | 
 432 |     |         if (poolState.tickAtPrice < upper) {
 433 |     |             feeGrowthAbove0 = tickUpper.feeGrowthOutside0;
 434 |     |             feeGrowthAbove1 = tickUpper.feeGrowthOutside1;
 435 |     |         } else {
 436 |     |             feeGrowthAbove0 = poolState.feeGrowthGlobal0 - tickUpper.feeGrowthOutside0;
 437 |     |             feeGrowthAbove1 = poolState.feeGrowthGlobal1 - tickUpper.feeGrowthOutside1;
 438 |     |         }
 439 |     |         feeGrowthInside0 = poolState.feeGrowthGlobal0 - feeGrowthBelow0 - feeGrowthAbove0;
 440 |     |         feeGrowthInside1 = poolState.feeGrowthGlobal1 - feeGrowthBelow1 - feeGrowthAbove1;
 441 |     |     }
 442 |     | 
 443 |     |     function snapshot(
 444 |     |         address pool,
 445 |     |         address owner,
 446 |     |         int24 lower,
 447 |     |         int24 upper
 448 |     |     ) internal view returns (
 449 |     |         int56   tickSecondsAccum,
 450 |     |         uint160 secondsPerLiquidityAccum,
 451 |     |         uint128 feesOwed0,
 452 |     |         uint128 feesOwed1
 453 |     |     ) {
 454 |     |         TicksRange.validate(lower, upper, (IPool(pool).immutables()).tickSpacing);
 455 |     | 
 456 |     |         IRangePoolStructs.SnapshotCache memory cache;
 457 |     |         (
 458 |     |             PoolsharkStructs.RangePoolState memory poolState,
 459 |     |             ,,,,
 460 |     |         ) = IPool(pool).globalState();
 461 |     | 
 462 |     | 
 463 |     |         cache.price = poolState.price;
 464 |     |         cache.liquidity = poolState.liquidity;
 465 |     |         cache.samples = poolState.samples;
 466 |     | 
 467 |     |         (
 468 |     |             PoolsharkStructs.RangeTick memory tickLower
 469 |     |             ,
 470 |     |         )
 471 |     |             = IPool(pool).ticks(lower);
 472 |     |         (
 473 |     |             PoolsharkStructs.RangeTick memory tickUpper
 474 |     |             ,
 475 |     |         )
 476 |     |             = IPool(pool).ticks(upper);
 477 |     | 
 478 |     |         cache.tickSecondsAccumLower =  tickLower.tickSecondsAccumOutside;
 479 |     |         cache.secondsPerLiquidityAccumLower = tickLower.secondsPerLiquidityAccumOutside;
 480 |     | 
 481 |     |         // if both have never been crossed into return 0
 482 |     |         cache.tickSecondsAccumUpper = tickUpper.tickSecondsAccumOutside;
 483 |     |         cache.secondsPerLiquidityAccumUpper = tickUpper.secondsPerLiquidityAccumOutside;
 484 |     | 
 485 |     |         (
 486 |     |             cache.position.liquidity,
 487 |     |             cache.position.amount0,
 488 |     |             cache.position.amount1,
 489 |     |             cache.position.feeGrowthInside0Last,
 490 |     |             cache.position.feeGrowthInside1Last
 491 |     |         )
 492 |     |             = IPool(pool).positions(lower, upper);
 493 |     | 
 494 |     |         cache.constants = IPool(pool).immutables();
 495 |     |         
 496 |     |         cache.userBalance = Tokens.balanceOf(pool, owner, lower, upper);
 497 |     |         cache.totalSupply = Tokens.totalSupply(pool, lower, upper);
 498 |     | 
 499 |     |         (uint256 rangeFeeGrowth0, uint256 rangeFeeGrowth1) = rangeFeeGrowth(
 500 |     |             pool,
 501 |     |             lower,
 502 |     |             upper
 503 |     |         );
 504 |     | 
 505 |     |         cache.position.amount0 += uint128(
 506 |     |             OverflowMath.mulDiv(
 507 |     |                 rangeFeeGrowth0 - cache.position.feeGrowthInside0Last,
 508 |     |                 uint256(cache.position.liquidity),
 509 |     |                 Q128
 510 |     |             )
 511 |     |         );
 512 |     | 
 513 |     |         cache.position.amount1 += uint128(
 514 |     |             OverflowMath.mulDiv(
 515 |     |                 rangeFeeGrowth1 - cache.position.feeGrowthInside1Last,
 516 |     |                 cache.position.liquidity,
 517 |     |                 Q128
 518 |     |             )
 519 |     |         );
 520 |     | 
 521 |     |         if (cache.totalSupply > 0) {
 522 |     |             cache.position.amount0 = uint128(cache.position.amount0 * cache.userBalance / cache.totalSupply);
 523 |     |             cache.position.amount1 = uint128(cache.position.amount1 * cache.userBalance / cache.totalSupply);
 524 |     |         }
 525 |     |         
 526 |     |         cache.tick = ConstantProduct.getTickAtPrice(cache.price, cache.constants);
 527 |     | 
 528 |     |         if (lower >= cache.tick) {
 529 |     |             return (
 530 |     |                 cache.tickSecondsAccumLower - cache.tickSecondsAccumUpper,
 531 |     |                 cache.secondsPerLiquidityAccumLower - cache.secondsPerLiquidityAccumUpper,
 532 |     |                 cache.position.amount0,
 533 |     |                 cache.position.amount1
 534 |     |             );
 535 |     |         } else if (upper >= cache.tick) {
 536 |     |             cache.blockTimestamp = uint32(block.timestamp);
 537 |     |             (
 538 |     |                 cache.tickSecondsAccum,
 539 |     |                 cache.secondsPerLiquidityAccum
 540 |     |             ) = Samples.getSingle(
 541 |     |                 IPool(address(this)), 
 542 |     |                 IRangePoolStructs.SampleParams(
 543 |     |                     cache.samples.index,
 544 |     |                     cache.samples.length,
 545 |     |                     uint32(block.timestamp),
 546 |     |                     new uint32[](2),
 547 |     |                     cache.tick,
 548 |     |                     cache.liquidity,
 549 |     |                     cache.constants
 550 |     |                 ),
 551 |     |                 0
 552 |     |             );
 553 |     |             return (
 554 |     |                 cache.tickSecondsAccum 
 555 |     |                   - cache.tickSecondsAccumLower 
 556 |     |                   - cache.tickSecondsAccumUpper,
 557 |     |                 cache.secondsPerLiquidityAccum
 558 |     |                   - cache.secondsPerLiquidityAccumLower
 559 |     |                   - cache.secondsPerLiquidityAccumUpper,
 560 |     |                 cache.position.amount0,
 561 |     |                 cache.position.amount1
 562 |     |             );
 563 |     |         }
 564 |     |     }
 565 |     | 
 566 |     |     function id(int24 lower, int24 upper) public pure returns (uint256) {
 567 |     |         return Tokens.id(lower, upper);
 568 |     |     }
 569 |     | }
 570 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/range/Samples.sol
   1 |     | // SPDX-License-Identifier: GPLv3
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | import '../math/ConstantProduct.sol';
   5 |     | import '../../interfaces/IPool.sol';
   6 |     | import '../../interfaces/range/IRangePool.sol';
   7 |     | import '../../interfaces/range/IRangePoolStructs.sol';
   8 |     | 
   9 |     | library Samples {
  10 |     | 
  11 |     |     error InvalidSampleLength();
  12 |     |     error SampleArrayUninitialized();
  13 |     |     error SampleLengthNotAvailable();
  14 |     | 
  15 |     |     event SampleRecorded(
  16 |     |         int56 tickSecondsAccum,
  17 |     |         uint160 secondsPerLiquidityAccum
  18 |     |     );
  19 |     | 
  20 |     |     event SampleLengthIncreased(
  21 |     |         uint16 sampleLengthNext
  22 |     |     );
  23 |     | 
  24 |     |     function initialize(
  25 |     |         IRangePoolStructs.Sample[65535] storage samples,
  26 |     |         PoolsharkStructs.RangePoolState memory state
  27 |     |     ) internal returns (
  28 |     |         PoolsharkStructs.RangePoolState memory
  29 |     |     )
  30 |     |     {
  31 |     |         samples[0] = PoolsharkStructs.Sample({
  32 |     |             blockTimestamp: uint32(block.timestamp),
  33 |     |             tickSecondsAccum: 0,
  34 |     |             secondsPerLiquidityAccum: 0
  35 |     |         });
  36 |     | 
  37 |     |         state.samples.length = 1;
  38 |     |         state.samples.lengthNext = 5;
  39 |     | 
  40 |     |         return state;
  41 |     |         /// @dev - TWAP length of 5 is safer for oracle manipulation
  42 |     |     }
  43 |     | 
  44 |     |     function save(
  45 |     |         IRangePoolStructs.Sample[65535] storage samples,
  46 |     |         PoolsharkStructs.SampleState memory sampleState,
  47 |     |         uint128 startLiquidity, /// @dev - liquidity from start of block
  48 |     |         int24  tick
  49 |     |     ) internal returns (
  50 |     |         uint16 sampleIndexNew,
  51 |     |         uint16 sampleLengthNew
  52 |     |     ) {
  53 |     |         // grab the latest sample
  54 |     |         IRangePoolStructs.Sample memory newSample = samples[sampleState.index];
  55 |     | 
  56 |     |         // early return if timestamp has not advanced 2 seconds
  57 |     |         if (newSample.blockTimestamp + 2 > uint32(block.timestamp))
  58 |     |             return (sampleState.index, sampleState.length);
  59 |     | 
  60 |     |         if (sampleState.lengthNext > sampleState.length
  61 |     |             && sampleState.index == (sampleState.length - 1)) {
  62 |     |             // increase sampleLengthNew if old size exceeded
  63 |     |             sampleLengthNew = sampleState.lengthNext;
  64 |     |         } else {
  65 |     |             sampleLengthNew = sampleState.length;
  66 |     |         }
  67 |     |         sampleIndexNew = (sampleState.index + 1) % sampleLengthNew;
  68 |     |         samples[sampleIndexNew] = _build(newSample, uint32(block.timestamp), tick, startLiquidity);
  69 |     | 
  70 |     |         emit SampleRecorded(
  71 |     |             samples[sampleIndexNew].tickSecondsAccum,
  72 |     |             samples[sampleIndexNew].secondsPerLiquidityAccum
  73 |     |         );
  74 |     |     }
  75 |     | 
  76 |     |     function expand(
  77 |     |         IRangePoolStructs.Sample[65535] storage samples,
  78 |     |         PoolsharkStructs.RangePoolState memory state,
  79 |     |         uint16 sampleLengthNext
  80 |     |     ) internal returns (
  81 |     |         PoolsharkStructs.RangePoolState memory
  82 |     |     ) {
  83 |     |         if (sampleLengthNext <= state.samples.lengthNext) return state;
  84 |     |         for (uint16 i = state.samples.lengthNext; i < sampleLengthNext; i++) {
  85 |     |             samples[i].blockTimestamp = 1;
  86 |     |         }
  87 |     |         state.samples.lengthNext = sampleLengthNext;
  88 |     |         emit SampleLengthIncreased(sampleLengthNext);
  89 |     |         return state;
  90 |     |     }
  91 |     | 
  92 |     |     function get(
  93 |     |         address pool,
  94 |     |         IRangePoolStructs.SampleParams memory params
  95 |     |     ) internal view returns (
  96 |     |         int56[]   memory tickSecondsAccum,
  97 |     |         uint160[] memory secondsPerLiquidityAccum,
  98 |     |         uint160 averagePrice,
  99 |     |         uint128 averageLiquidity,
 100 |     |         int24 averageTick
 101 |     |     ) {
 102 |     |         if (params.sampleLength == 0) require(false, 'InvalidSampleLength()');
 103 |     |         if (params.secondsAgo.length == 0) require(false, 'SecondsAgoArrayEmpty()');
 104 |     |         uint256 size = params.secondsAgo.length > 1 ? params.secondsAgo.length : 2;
 105 |     |         uint32[] memory secondsAgo = new uint32[](size);
 106 |     |         if (params.secondsAgo.length == 1) {
 107 |     |             secondsAgo = new uint32[](2);
 108 |     |             secondsAgo[0] = params.secondsAgo[0];
 109 |     |             secondsAgo[1] = params.secondsAgo[0] + 2;
 110 |     |         }
 111 |     |         else secondsAgo = params.secondsAgo;
 112 |     | 
 113 |     |         if (secondsAgo[0] == secondsAgo[secondsAgo.length - 1]) require(false, 'SecondsAgoArrayValuesEqual()');
 114 |     | 
 115 |     |         tickSecondsAccum = new int56[](secondsAgo.length);
 116 |     |         secondsPerLiquidityAccum = new uint160[](secondsAgo.length);
 117 |     | 
 118 |     |         for (uint256 i = 0; i < secondsAgo.length; i++) {
 119 |     |             (
 120 |     |                 tickSecondsAccum[i],
 121 |     |                 secondsPerLiquidityAccum[i]
 122 |     |             ) = getSingle(
 123 |     |                 IPool(pool),
 124 |     |                 params,
 125 |     |                 secondsAgo[i]
 126 |     |             );
 127 |     |         }
 128 |     |         if (secondsAgo[secondsAgo.length - 1] > secondsAgo[0]) {
 129 |     |             averageTick = int24((tickSecondsAccum[0] - tickSecondsAccum[secondsAgo.length - 1]) 
 130 |     |                                 / int32(secondsAgo[secondsAgo.length - 1] - secondsAgo[0]));
 131 |     |             averagePrice = ConstantProduct.getPriceAtTick(averageTick, params.constants);
 132 |     |             averageLiquidity = uint128((secondsPerLiquidityAccum[0] - secondsPerLiquidityAccum[secondsAgo.length - 1]) 
 133 |     |                                     * (secondsAgo[secondsAgo.length - 1] - secondsAgo[0]));
 134 |     |         } else {
 135 |     |             averageTick = int24((tickSecondsAccum[secondsAgo.length - 1] - tickSecondsAccum[0]) 
 136 |     |                                 / int32(secondsAgo[0] - secondsAgo[secondsAgo.length - 1]));
 137 |     |             averagePrice = ConstantProduct.getPriceAtTick(averageTick, params.constants);
 138 |     |             averageLiquidity = uint128((secondsPerLiquidityAccum[secondsAgo.length - 1] - secondsPerLiquidityAccum[0]) 
 139 |     |                                     * (secondsAgo[0] - secondsAgo[secondsAgo.length - 1]));
 140 |     |         }
 141 |     |     }
 142 |     |     function _poolSample(
 143 |     |         IPool pool,
 144 |     |         uint256 sampleIndex
 145 |     |     ) internal view returns (
 146 |     |         IRangePoolStructs.Sample memory
 147 |     |     ) {
 148 |     |         (
 149 |     |             uint32 blockTimestamp,
 150 |     |             int56 tickSecondsAccum,
 151 |     |             uint160 liquidityPerSecondsAccum
 152 |     |         ) = pool.samples(sampleIndex);
 153 |     | 
 154 |     |         return PoolsharkStructs.Sample(
 155 |     |             blockTimestamp,
 156 |     |             tickSecondsAccum,
 157 |     |             liquidityPerSecondsAccum
 158 |     |         );
 159 |     |     }
 160 |     | 
 161 |     |     function getSingle(
 162 |     |         IPool pool,
 163 |     |         IRangePoolStructs.SampleParams memory params,
 164 |     |         uint32 secondsAgo
 165 |     |     ) internal view returns (
 166 |     |         int56   tickSecondsAccum,
 167 |     |         uint160 secondsPerLiquidityAccum
 168 |     |     ) {
 169 |     |         IRangePoolStructs.Sample memory latest = _poolSample(pool, params.sampleIndex);
 170 |     | 
 171 |     |         if (secondsAgo == 0) {
 172 |     |             if (latest.blockTimestamp != uint32(block.timestamp)) {
 173 |     |                 latest = _build(
 174 |     |                     latest,
 175 |     |                     uint32(block.timestamp),
 176 |     |                     params.tick,
 177 |     |                     params.liquidity
 178 |     |                 );
 179 |     |             } 
 180 |     |             return (
 181 |     |                 latest.tickSecondsAccum,
 182 |     |                 latest.secondsPerLiquidityAccum
 183 |     |             );
 184 |     |         }
 185 |     | 
 186 |     |         uint32 targetTime = uint32(block.timestamp) - secondsAgo;
 187 |     | 
 188 |     |         (
 189 |     |             IRangePoolStructs.Sample memory firstSample,
 190 |     |             IRangePoolStructs.Sample memory secondSample
 191 |     |         ) = _getAdjacentSamples(
 192 |     |                 pool,
 193 |     |                 latest,
 194 |     |                 params,
 195 |     |                 targetTime
 196 |     |         );
 197 |     | 
 198 |     |         if (targetTime == firstSample.blockTimestamp) {
 199 |     |             // first sample
 200 |     |             return (
 201 |     |                 firstSample.tickSecondsAccum,
 202 |     |                 firstSample.secondsPerLiquidityAccum
 203 |     |             );
 204 |     |         } else if (targetTime == secondSample.blockTimestamp) {
 205 |     |             // second sample
 206 |     |             return (
 207 |     |                 secondSample.tickSecondsAccum,
 208 |     |                 secondSample.secondsPerLiquidityAccum
 209 |     |             );
 210 |     |         } else {
 211 |     |             // average two samples
 212 |     |             int32 sampleTimeDelta = int32(secondSample.blockTimestamp - firstSample.blockTimestamp);
 213 |     |             int56 targetDelta = int56(int32(targetTime - firstSample.blockTimestamp));
 214 |     |             return (
 215 |     |                 firstSample.tickSecondsAccum +
 216 |     |                     ((secondSample.tickSecondsAccum - firstSample.tickSecondsAccum) 
 217 |     |                     / sampleTimeDelta)
 218 |     |                     * targetDelta,
 219 |     |                 firstSample.secondsPerLiquidityAccum +
 220 |     |                     uint160(
 221 |     |                         (uint256(
 222 |     |                             secondSample.secondsPerLiquidityAccum - firstSample.secondsPerLiquidityAccum
 223 |     |                         ) 
 224 |     |                         * uint256(uint56(targetDelta))) 
 225 |     |                         / uint32(sampleTimeDelta)
 226 |     |                     )
 227 |     |             );
 228 |     |         }
 229 |     |     }
 230 |     | 
 231 |     |     function _lte(
 232 |     |         uint32 timeA,
 233 |     |         uint32 timeB
 234 |     |     ) private view returns (bool) {
 235 |     |         uint32 currentTime = uint32(block.timestamp);
 236 |     |         if (timeA <= currentTime && timeB <= currentTime) return timeA <= timeB;
 237 |     | 
 238 |     |         uint256 timeAOverflow = timeA;
 239 |     |         uint256 timeBOverflow = timeB;
 240 |     | 
 241 |     |         if (timeA <= currentTime) {
 242 |     |             timeAOverflow = timeA + 2**32;
 243 |     |         }
 244 |     |         if (timeB <= currentTime) {
 245 |     |             timeBOverflow = timeB + 2**32;
 246 |     |         }
 247 |     | 
 248 |     |         return timeAOverflow <= timeBOverflow;
 249 |     |     }
 250 |     | 
 251 |     |     function _build(
 252 |     |         IRangePoolStructs.Sample memory newSample,
 253 |     |         uint32  blockTimestamp,
 254 |     |         int24   tick,
 255 |     |         uint128 liquidity
 256 |     |     ) internal pure returns (
 257 |     |          IRangePoolStructs.Sample memory
 258 |     |     ) {
 259 |     |         int56 timeDelta = int56(uint56(blockTimestamp - newSample.blockTimestamp));
 260 |     |         return
 261 |     |             PoolsharkStructs.Sample({
 262 |     |                 blockTimestamp: blockTimestamp,
 263 |     |                 tickSecondsAccum: newSample.tickSecondsAccum + int56(tick) * int32(timeDelta),
 264 |     |                 secondsPerLiquidityAccum: newSample.secondsPerLiquidityAccum +
 265 |     |                     ((uint160(uint56(timeDelta)) << 128) / (liquidity > 0 ? liquidity : 1))
 266 |     |             });
 267 |     |     }
 268 |     | 
 269 |     |     function _binarySearch(
 270 |     |         IPool pool,
 271 |     |         uint32 targetTime,
 272 |     |         uint16 sampleIndex,
 273 |     |         uint16 sampleLength
 274 |     |     ) private view returns (
 275 |     |         IRangePoolStructs.Sample memory firstSample,
 276 |     |         IRangePoolStructs.Sample memory secondSample
 277 |     |     ) {
 278 |     |         uint256 oldIndex = (sampleIndex + 1) % sampleLength;
 279 |     |         uint256 newIndex = oldIndex + sampleLength - 1;             
 280 |     |         uint256 index;
 281 |     |         while (true) {
 282 |     |             // start in the middle
 283 |     |             index = (oldIndex + newIndex) / 2;
 284 |     | 
 285 |     |             // get the first sample
 286 |     |             firstSample = _poolSample(pool, index % sampleLength);
 287 |     | 
 288 |     |             // if sample is uninitialized
 289 |     |             if (firstSample.blockTimestamp == 0) {
 290 |     |                 // skip this index and continue
 291 |     |                 oldIndex = index + 1;
 292 |     |                 continue;
 293 |     |             }
 294 |     |             // else grab second sample
 295 |     |             secondSample = _poolSample(pool, (index + 1) % sampleLength);
 296 |     | 
 297 |     |             // check if target time within first and second sample
 298 |     |             bool targetAfterFirst   = _lte(firstSample.blockTimestamp, targetTime);
 299 |     |             bool targetBeforeSecond = _lte(targetTime, secondSample.blockTimestamp);
 300 |     |             if (targetAfterFirst && targetBeforeSecond) break;
 301 |     |             if (!targetAfterFirst) newIndex = index - 1;
 302 |     |             else oldIndex = index + 1;
 303 |     |         }
 304 |     |     }
 305 |     | 
 306 |     |     function _getAdjacentSamples(
 307 |     |         IPool pool,
 308 |     |         IRangePoolStructs.Sample memory firstSample,
 309 |     |         IRangePoolStructs.SampleParams memory params,
 310 |     |         uint32 targetTime
 311 |     |     ) private view returns (
 312 |     |         IRangePoolStructs.Sample memory,
 313 |     |         IRangePoolStructs.Sample memory
 314 |     |     ) {
 315 |     |         if (_lte(firstSample.blockTimestamp, targetTime)) {
 316 |     |             if (firstSample.blockTimestamp == targetTime) {
 317 |     |                 return (firstSample, PoolsharkStructs.Sample(0,0,0));
 318 |     |             } else {
 319 |     |                 return (firstSample, _build(firstSample, targetTime, params.tick, params.liquidity));
 320 |     |             }
 321 |     |         }
 322 |     |         firstSample = _poolSample(pool, (params.sampleIndex + 1) % params.sampleLength);
 323 |     |         if (firstSample.blockTimestamp == 0) {
 324 |     |             firstSample = _poolSample(pool, 0);
 325 |     |         }
 326 |     |         if(!_lte(firstSample.blockTimestamp, targetTime)) require(false, 'SampleLengthNotAvailable()');
 327 |     | 
 328 |     |         return _binarySearch(
 329 |     |             pool,
 330 |     |             targetTime,
 331 |     |             params.sampleIndex,
 332 |     |             params.sampleLength
 333 |     |         );
 334 |     |     }
 335 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/range/TicksRange.sol
   1 |     | // SPDX-License-Identifier: GPLv3
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | import '../../base/structs/PoolsharkStructs.sol';
   5 |     | import '../../interfaces/range/IRangePoolStructs.sol';
   6 |     | import '../../interfaces/range/IRangePoolFactory.sol';
   7 |     | import '../../interfaces/range/IRangePool.sol';
   8 |     | import './math/FeeMath.sol';
   9 |     | import './Positions.sol';
  10 |     | import '../math/OverflowMath.sol';
  11 |     | import '../math/ConstantProduct.sol';
  12 |     | import '../TickMap.sol';
  13 |     | import './Samples.sol';
  14 |     | 
  15 |     | /// @notice Tick management library for range pools
  16 |     | library TicksRange {
  17 |     |     error LiquidityOverflow();
  18 |     |     error LiquidityUnderflow();
  19 |     |     error InvalidLowerTick();
  20 |     |     error InvalidUpperTick();
  21 |     |     error InvalidPositionAmount();
  22 |     |     error InvalidPositionBounds();
  23 |     | 
  24 |     |     event Initialize(
  25 |     |         uint160 startPrice,
  26 |     |         int24 tickAtPrice,
  27 |     |         int24 minTick,
  28 |     |         int24 maxTick
  29 |     |     );
  30 |     | 
  31 |     |     uint256 internal constant Q96 = 0x1000000000000000000000000;
  32 |     |     uint256 internal constant Q128 = 0x100000000000000000000000000000000;
  33 |     | 
  34 |     |     function validate(
  35 |     |         int24 lower,
  36 |     |         int24 upper,
  37 |     |         int16 tickSpacing
  38 |     |     ) internal pure {
  39 |     |         if (lower % tickSpacing != 0) require(false, 'InvalidLowerTick()');
  40 |     |         if (lower <= ConstantProduct.minTick(tickSpacing)) require(false, 'InvalidLowerTick()');
  41 |     |         if (upper % tickSpacing != 0) require(false, 'InvalidUpperTick()');
  42 |     |         if (upper >= ConstantProduct.maxTick(tickSpacing)) require(false, 'InvalidUpperTick()');
  43 |     |         if (lower >= upper) require(false, 'InvalidPositionBounds()');
  44 |     |     }
  45 |     | 
  46 |     |     function insert(
  47 |     |         mapping(int24 => PoolsharkStructs.Tick) storage ticks,
  48 |     |         IRangePoolStructs.Sample[65535] storage samples,
  49 |     |         PoolsharkStructs.TickMap storage tickMap,
  50 |     |         PoolsharkStructs.GlobalState memory state,
  51 |     |         PoolsharkStructs.Immutables memory constants,
  52 |     |         int24 lower,
  53 |     |         int24 upper,
  54 |     |         uint128 amount
  55 |     |     ) internal returns (PoolsharkStructs.GlobalState memory) {
  56 |     |         validate(lower, upper, constants.tickSpacing);
  57 |     |         // check for amount to overflow liquidity delta & global
  58 |     |         if (amount == 0) return state;
  59 |     |         if (amount > uint128(type(int128).max)) require(false, 'LiquidityOverflow()');
  60 |     |         if (type(uint128).max - state.liquidityGlobal < amount) require(false, 'LiquidityOverflow()');
  61 |     | 
  62 |     |         // get tick at price
  63 |     |         int24 tickAtPrice = state.pool.tickAtPrice;
  64 |     | 
  65 |     |         if(TickMap.set(tickMap, lower, constants.tickSpacing)) {
  66 |     |             ticks[lower].range.liquidityDelta += int128(amount);
  67 |     |             ticks[lower].range.liquidityAbsolute += amount;
  68 |     |         } else {
  69 |     |             if (lower <= tickAtPrice) {
  70 |     |                 (
  71 |     |                     int56 tickSecondsAccum,
  72 |     |                     uint160 secondsPerLiquidityAccum
  73 |     |                 ) = Samples.getSingle(
  74 |     |                         IPool(address(this)), 
  75 |     |                         IRangePoolStructs.SampleParams(
  76 |     |                             state.pool.samples.index,
  77 |     |                             state.pool.samples.length,
  78 |     |                             uint32(block.timestamp),
  79 |     |                             new uint32[](2),
  80 |     |                             state.pool.tickAtPrice,
  81 |     |                             state.pool.liquidity,
  82 |     |                             constants
  83 |     |                         ),
  84 |     |                         0
  85 |     |                 );
  86 |     |                 ticks[lower].range = PoolsharkStructs.RangeTick(
  87 |     |                     state.pool.feeGrowthGlobal0,
  88 |     |                     state.pool.feeGrowthGlobal1,
  89 |     |                     secondsPerLiquidityAccum,
  90 |     |                     tickSecondsAccum,
  91 |     |                     int128(amount),             // liquidityDelta
  92 |     |                     amount                      // liquidityAbsolute
  93 |     |                 );
  94 |     |             } else {
  95 |     |                 ticks[lower].range.liquidityDelta = int128(amount);
  96 |     |                 // INVARIANT: assert(ticks[lower].range.liquidityAbsolute == 0)
  97 |     |                 ticks[lower].range.liquidityAbsolute += amount;
  98 |     |                 
  99 |     |             }
 100 |     |         }
 101 |     | 
 102 |     |         if(TickMap.set(tickMap, upper, constants.tickSpacing)) {
 103 |     |             ticks[upper].range.liquidityDelta -= int128(amount);
 104 |     |             ticks[upper].range.liquidityAbsolute += amount;
 105 |     |         } else {
 106 |     |             if (upper <= tickAtPrice) {
 107 |     |                 (
 108 |     |                     int56 tickSecondsAccum,
 109 |     |                     uint160 secondsPerLiquidityAccum
 110 |     |                 ) = Samples.getSingle(
 111 |     |                         IPool(address(this)), 
 112 |     |                         IRangePoolStructs.SampleParams(
 113 |     |                             state.pool.samples.index,
 114 |     |                             state.pool.samples.length,
 115 |     |                             uint32(block.timestamp),
 116 |     |                             new uint32[](2),
 117 |     |                             state.pool.tickAtPrice,
 118 |     |                             state.pool.liquidity,
 119 |     |                             constants
 120 |     |                         ),
 121 |     |                         0
 122 |     |                 );
 123 |     |                 ticks[upper].range = PoolsharkStructs.RangeTick(
 124 |     |                     state.pool.feeGrowthGlobal0,
 125 |     |                     state.pool.feeGrowthGlobal1,
 126 |     |                     secondsPerLiquidityAccum,
 127 |     |                     tickSecondsAccum,
 128 |     |                     -int128(amount),
 129 |     |                     amount
 130 |     |                 );
 131 |     |             } else {
 132 |     |                 ticks[upper].range.liquidityDelta = -int128(amount);
 133 |     |                 ticks[upper].range.liquidityAbsolute = amount;
 134 |     |                 //assert(ticks[lower].range.feeGrowthOutside0 == 0])
 135 |     |                 //assert(ticks[lower].range.feeGrowthOutside1 == 0])
 136 |     |             }
 137 |     |         }
 138 |     |         if (tickAtPrice >= lower && tickAtPrice < upper) {
 139 |     |             // write an oracle entry
 140 |     |             (state.pool.samples.index, state.pool.samples.length) = Samples.save(
 141 |     |                 samples,
 142 |     |                 state.pool.samples,
 143 |     |                 state.pool.liquidity,
 144 |     |                 state.pool.tickAtPrice
 145 |     |             );
 146 |     |             // update pool liquidity
 147 |     |             state.pool.liquidity += amount;
 148 |     |         }
 149 |     |         // update global liquidity
 150 |     |         state.liquidityGlobal += amount;
 151 |     | 
 152 |     |         return state;
 153 |     |     }
 154 |     | 
 155 |     |     function remove(
 156 |     |         mapping(int24 => PoolsharkStructs.Tick) storage ticks,
 157 |     |         IRangePoolStructs.Sample[65535] storage samples,
 158 |     |         PoolsharkStructs.TickMap storage tickMap,
 159 |     |         PoolsharkStructs.GlobalState memory state,
 160 |     |         PoolsharkStructs.Immutables memory constants, 
 161 |     |         int24 lower,
 162 |     |         int24 upper,
 163 |     |         uint128 amount
 164 |     |     ) internal returns (PoolsharkStructs.GlobalState memory) {
 165 |     |         validate(lower, upper, constants.tickSpacing);
 166 |     |         //check for amount to overflow liquidity delta & global
 167 |     |         if (amount == 0) return state;
 168 |     |         if (amount > uint128(type(int128).max)) require(false, 'LiquidityUnderflow()');
 169 |     |         if (amount > state.liquidityGlobal) require(false, 'LiquidityUnderflow()');
 170 |     | 
 171 |     |         // get pool tick at price
 172 |     |         int24 tickAtPrice = state.pool.tickAtPrice;
 173 |     | 
 174 |     |         // update lower liquidity values
 175 |     |         PoolsharkStructs.RangeTick memory tickLower = ticks[lower].range;
 176 |     |         unchecked {
 177 |     |             tickLower.liquidityDelta -= int128(amount);
 178 |     |             tickLower.liquidityAbsolute -= amount;
 179 |     |         }
 180 |     |         ticks[lower].range = tickLower;
 181 |     |         // try to clear tick if possible
 182 |     |         clear(ticks, constants, tickMap, lower);
 183 |     | 
 184 |     |         // update upper liquidity values
 185 |     |         PoolsharkStructs.RangeTick memory tickUpper = ticks[upper].range;
 186 |     |         unchecked {
 187 |     |             tickUpper.liquidityDelta += int128(amount);
 188 |     |             tickUpper.liquidityAbsolute -= amount;
 189 |     |         }
 190 |     |         ticks[upper].range = tickUpper;
 191 |     |         // try to clear tick if possible
 192 |     |         clear(ticks, constants, tickMap, lower);
 193 |     | 
 194 |     |         if (tickAtPrice >= lower && tickAtPrice < upper) {
 195 |     |             // write an oracle entry
 196 |     |             (state.pool.samples.index, state.pool.samples.length) = Samples.save(
 197 |     |                 samples,
 198 |     |                 state.pool.samples,
 199 |     |                 state.pool.liquidity,
 200 |     |                 tickAtPrice
 201 |     |             );
 202 |     |             state.pool.liquidity -= amount;  
 203 |     |         }
 204 |     |         state.liquidityGlobal -= amount;
 205 |     | 
 206 |     |         return state;
 207 |     |     }
 208 |     | 
 209 |     |     function clear(
 210 |     |         mapping(int24 => PoolsharkStructs.Tick) storage ticks,
 211 |     |         PoolsharkStructs.Immutables memory constants,
 212 |     |         PoolsharkStructs.TickMap storage tickMap,
 213 |     |         int24 tickToClear
 214 |     |     ) internal {
 215 |     |         if (_empty(ticks[tickToClear])) {
 216 |     |             if (tickToClear != ConstantProduct.maxTick(constants.tickSpacing) &&
 217 |     |                     tickToClear != ConstantProduct.minTick(constants.tickSpacing)) {
 218 |     |                 ticks[tickToClear].range = PoolsharkStructs.RangeTick(0,0,0,0,0,0);
 219 |     |                 TickMap.unset(tickMap, tickToClear, constants.tickSpacing);
 220 |     |             }
 221 |     |         }
 222 |     |     }
 223 |     | 
 224 |     |     function _empty(
 225 |     |         ILimitPoolStructs.Tick memory tick
 226 |     |     ) internal pure returns (
 227 |     |         bool
 228 |     |     ) {
 229 |     |         if (tick.range.liquidityAbsolute != 0) {
 230 |     |             return false;
 231 |     |         }
 232 |     |         return true;
 233 |     |     }
 234 |     | }
 235 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/range/Tokens.sol
  1 |     | // SPDX-License-Identifier: GPLv3
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | import "../math/OverflowMath.sol";
  5 |     | import "../../interfaces/range/IRangePoolFactory.sol";
  6 |     | import "../../interfaces/range/IRangePoolStructs.sol";
  7 |     | 
  8 |     | /// @notice Token library for ERC-1155 calls.
  9 |     | library Tokens {
 10 |     |     uint256 internal constant Q128 = 0x100000000000000000000000000000000;
 11 |     | 
 12 |     |     function id(
 13 |     |         int24 lower,
 14 |     |         int24 upper
 15 |     |     ) internal pure returns (
 16 |     |         uint256
 17 |     |     )
 18 |     |     {
 19 |     |         return uint256(keccak256(abi.encode(lower, upper)));
 20 |     |     }
 21 |     | 
 22 |     |     function balanceOf(
 23 |     |         address tokens,
 24 |     |         address owner,
 25 |     |         int24 lower,
 26 |     |         int24 upper
 27 |     |     ) internal view returns (
 28 |     |         uint256
 29 |     |     )
 30 |     |     {
 31 |     |         return IRangePoolERC1155(tokens).balanceOf(owner, id(lower, upper));
 32 |     |     }
 33 |     | 
 34 |     |     function totalSupply(
 35 |     |         address tokens,
 36 |     |         int24 lower,
 37 |     |         int24 upper
 38 |     |     ) internal view returns (
 39 |     |         uint256
 40 |     |     )
 41 |     |     {
 42 |     |         return IRangePoolERC1155(tokens).totalSupply(id(lower, upper));
 43 |     |     }
 44 |     | 
 45 |     |     function totalSupplyById(
 46 |     |         address tokens,
 47 |     |         uint256 _id
 48 |     |     ) internal view returns (
 49 |     |         uint256
 50 |     |     )
 51 |     |     {
 52 |     |         return IRangePoolERC1155(tokens).totalSupply(_id);
 53 |     |     } 
 54 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/range/math/FeeMath.sol
  1 |     | // SPDX-License-Identifier: GPLv3
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | import '../../utils/SafeCast.sol';
  5 |     | import "../../math/OverflowMath.sol";
  6 |     | import '../../../base/structs/PoolsharkStructs.sol';
  7 |     | import "../../../interfaces/range/IRangePoolStructs.sol";
  8 |     | 
  9 |     | /// @notice Math library that facilitates fee handling.
 10 |     | library FeeMath {
 11 |     |     using SafeCast for uint256;
 12 |     | 
 13 |     |     uint256 internal constant Q128 = 0x100000000000000000000000000000000;
 14 |     | 
 15 |     |     struct CalculateLocals {
 16 |     |         uint256 feeAmount;
 17 |     |         uint256 protocolFee;
 18 |     |         uint256 protocolFeesAccrued;
 19 |     |         uint256 amountOutRange;
 20 |     |     }
 21 |     | 
 22 |     |     function calculate(
 23 |     |         PoolsharkStructs.SwapCache memory cache,
 24 |     |         uint256 amountOut,
 25 |     |         bool zeroForOne
 26 |     |     ) internal pure returns (
 27 |     |         PoolsharkStructs.SwapCache memory
 28 |     |     )
 29 |     |     {
 30 |     |         if (cache.state.pool.liquidity != 0) {
 31 |     |             CalculateLocals memory locals;
 32 |     | 
 33 |     |             // calculate output from range liquidity
 34 |     |             locals.amountOutRange = OverflowMath.mulDiv(amountOut, cache.state.pool.liquidity, cache.liquidity);
 35 |     | 
 36 |     |             // take enough fees to cover fee growth
 37 |     |             locals.feeAmount = OverflowMath.mulDivRoundingUp(locals.amountOutRange, cache.constants.swapFee, 1e6);
 38 |     | 
 39 |     |             // load protocol fee from cache
 40 |     |             locals.protocolFee = zeroForOne ? cache.state.pool0.protocolFee : cache.state.pool1.protocolFee;
 41 |     |             // calculate fee
 42 |     |             locals.protocolFeesAccrued = OverflowMath.mulDivRoundingUp(locals.feeAmount, locals.protocolFee, 1e6);
 43 |     |             amountOut -= locals.feeAmount;
 44 |     |             // fees for this swap step
 45 |     |             locals.feeAmount -= locals.protocolFeesAccrued;
 46 |     |             // add to total fees paid for swap
 47 |     |             cache.feeAmount += locals.feeAmount.toUint128();
 48 |     |             
 49 |     |             // save fee growth and protocol fees
 50 |     |             if (zeroForOne) {
 51 |     |                 cache.state.pool0.protocolFees += uint128(locals.protocolFeesAccrued);
 52 |     |                 cache.state.pool.feeGrowthGlobal1 += uint200(OverflowMath.mulDiv(locals.feeAmount, Q128, cache.state.pool.liquidity));
 53 |     |             } else {
 54 |     |                 cache.state.pool1.protocolFees += uint128(locals.protocolFeesAccrued);
 55 |     |                 cache.state.pool.feeGrowthGlobal0 += uint200(OverflowMath.mulDiv(locals.feeAmount, Q128, cache.state.pool.liquidity));
 56 |     |             }
 57 |     |         }
 58 |     |         cache.output += amountOut;
 59 |     |         return cache;
 60 |     |     }
 61 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/range/pool/BurnCall.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.13;
  3 |     | 
  4 |     | import '../../../interfaces/range/IRangePoolStructs.sol';
  5 |     | import '../../utils/SafeTransfers.sol';
  6 |     | import '../Positions.sol';
  7 |     | 
  8 |     | library BurnCall {
  9 |     |     event Burn(
 10 |     |         address indexed recipient,
 11 |     |         int24 lower,
 12 |     |         int24 upper,
 13 |     |         uint256 indexed tokenId,
 14 |     |         uint128 tokenBurned,
 15 |     |         uint128 liquidityBurned,
 16 |     |         uint128 amount0,
 17 |     |         uint128 amount1
 18 |     |     );
 19 |     | 
 20 |     |     function perform(
 21 |     |         IRangePoolStructs.BurnParams memory params,
 22 |     |         IRangePoolStructs.BurnCache memory cache,
 23 |     |         PoolsharkStructs.TickMap storage tickMap,
 24 |     |         mapping(int24 => PoolsharkStructs.Tick) storage ticks,
 25 |     |         IRangePoolStructs.Sample[65535] storage samples
 26 |     |     ) internal returns (IRangePoolStructs.BurnCache memory) {
 27 |     |         if (params.burnPercent > 1e38) params.burnPercent = 1e38;
 28 |     |         (
 29 |     |             cache.position,
 30 |     |             cache.amount0,
 31 |     |             cache.amount1,
 32 |     |             cache.tokenBurned
 33 |     |         ) = Positions.update(
 34 |     |                 ticks,
 35 |     |                 cache.position,
 36 |     |                 cache.state,
 37 |     |                 cache.constants,
 38 |     |                 IRangePoolStructs.UpdateParams(
 39 |     |                     params.lower,
 40 |     |                     params.upper,
 41 |     |                     params.burnPercent
 42 |     |                 )
 43 |     |         );
 44 |     |         (
 45 |     |             cache.state,
 46 |     |             cache.position,
 47 |     |             cache.amount0,
 48 |     |             cache.amount1
 49 |     |         ) = Positions.remove(
 50 |     |             cache.position,
 51 |     |             ticks,
 52 |     |             samples,
 53 |     |             tickMap,
 54 |     |             cache.state,
 55 |     |             params,
 56 |     |             IRangePoolStructs.RemoveParams(
 57 |     |                 cache.amount0,
 58 |     |                 cache.amount1,
 59 |     |                 cache.tokenBurned,
 60 |     |                 cache.constants
 61 |     |             )
 62 |     |         );
 63 |     |         cache.position.amount0 -= cache.amount0;
 64 |     |         cache.position.amount1 -= cache.amount1;
 65 |     |         if (cache.position.amount0 > 0 || cache.position.amount1 > 0) {
 66 |     |             (cache.position, cache.state) = Positions.compound(
 67 |     |                 cache.position,
 68 |     |                 ticks,
 69 |     |                 samples,
 70 |     |                 tickMap,
 71 |     |                 cache.state,
 72 |     |                 IRangePoolStructs.CompoundParams(
 73 |     |                     params.lower,
 74 |     |                     params.upper
 75 |     |                 ),
 76 |     |                 cache.constants
 77 |     |             );
 78 |     |         }
 79 |     |         if (cache.amount0 > 0) SafeTransfers.transferOut(params.to, cache.constants.token0, cache.amount0);
 80 |     |         if (cache.amount1 > 0) SafeTransfers.transferOut(params.to, cache.constants.token1, cache.amount1);
 81 |     |         return cache;
 82 |     |     }
 83 |     | }
 84 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/range/pool/MintCall.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.8.13;
  3 |     | 
  4 |     | import '../../../interfaces/range/IRangePoolStructs.sol';
  5 |     | import '../../utils/SafeTransfers.sol';
  6 |     | import '../Positions.sol';
  7 |     | 
  8 |     | library MintCall {
  9 |     |     event Mint(
 10 |     |         address indexed recipient,
 11 |     |         int24 lower,
 12 |     |         int24 upper,
 13 |     |         uint256 indexed tokenId,
 14 |     |         uint128 tokenMinted,
 15 |     |         uint128 liquidityMinted,
 16 |     |         uint128 amount0,
 17 |     |         uint128 amount1
 18 |     |     );
 19 |     | 
 20 |     |     function perform(
 21 |     |         IRangePoolStructs.MintParams memory params,
 22 |     |         IRangePoolStructs.MintCache memory cache,
 23 |     |         PoolsharkStructs.TickMap storage tickMap,
 24 |     |         mapping(int24 => PoolsharkStructs.Tick) storage ticks,
 25 |     |         IRangePoolStructs.Sample[65535] storage samples
 26 |     |     ) internal returns (IRangePoolStructs.MintCache memory) {
 27 |     |         (
 28 |     |             cache.position,
 29 |     |             ,,
 30 |     |         ) = Positions.update(
 31 |     |                 ticks,
 32 |     |                 cache.position,
 33 |     |                 cache.state,
 34 |     |                 cache.constants,
 35 |     |                 IRangePoolStructs.UpdateParams(
 36 |     |                     params.lower,
 37 |     |                     params.upper,
 38 |     |                     0
 39 |     |                 )
 40 |     |         );
 41 |     |         (params, cache.liquidityMinted) = Positions.validate(params, cache.state, cache.constants);
 42 |     |         if (params.amount0 > 0) SafeTransfers.transferIn(cache.constants.token0, params.amount0);
 43 |     |         if (params.amount1 > 0) SafeTransfers.transferIn(cache.constants.token1, params.amount1);
 44 |     |         if (cache.position.amount0 > 0 || cache.position.amount1 > 0) {
 45 |     |             (cache.position, cache.state) = Positions.compound(
 46 |     |                 cache.position,
 47 |     |                 ticks,
 48 |     |                 samples,
 49 |     |                 tickMap,
 50 |     |                 cache.state,
 51 |     |                 IRangePoolStructs.CompoundParams( 
 52 |     |                     params.lower,
 53 |     |                     params.upper
 54 |     |                 ),
 55 |     |                 cache.constants
 56 |     |             );
 57 |     |         }
 58 |     |         // update position with latest fees accrued
 59 |     |         (cache.state, cache.position, cache.liquidityMinted) = Positions.add(
 60 |     |             cache.position,
 61 |     |             ticks,
 62 |     |             samples,
 63 |     |             tickMap,
 64 |     |             IRangePoolStructs.AddParams(
 65 |     |                 cache.state, 
 66 |     |                 params,
 67 |     |                 uint128(cache.liquidityMinted),
 68 |     |                 uint128(cache.liquidityMinted)
 69 |     |             ),
 70 |     |             cache.constants
 71 |     |         );
 72 |     |         return cache;
 73 |     |     }
 74 |     | }
 75 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/solady/Clone.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.4;
   3 |     | 
   4 |     | /// @notice Class with helper read functions for clone with immutable args.
   5 |     | /// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/Clone.sol)
   6 |     | /// @author Adapted from clones with immutable args by zefram.eth, Saw-mon & Natalie
   7 |     | /// (https://github.com/Saw-mon-and-Natalie/clones-with-immutable-args)
   8 |     | abstract contract Clone {
   9 |     |     /// @dev Reads an immutable arg with type bytes.
  10 |     |     function _getArgBytes(uint256 argOffset, uint256 length)
  11 |     |         internal
  12 |     |         pure
  13 |     |         returns (bytes memory arg)
  14 |     |     {
  15 |     |         uint256 offset = _getImmutableArgsOffset();
  16 |     |         /// @solidity memory-safe-assembly
  17 |     |         assembly {
  18 |     |             arg := mload(0x40)
  19 |     |             mstore(arg, length) // Store the length.
  20 |     |             calldatacopy(add(arg, 0x20), add(offset, argOffset), length)
  21 |     |             let o := add(add(arg, 0x20), length)
  22 |     |             mstore(o, 0) // Zeroize the slot after the bytes.
  23 |     |             mstore(0x40, add(o, 0x20)) // Allocate the memory.
  24 |     |         }
  25 |     |     }
  26 |     | 
  27 |     |     /// @dev Reads an immutable arg with type address.
  28 |     |     function _getArgAddress(uint256 argOffset) internal pure returns (address arg) {
  29 |     |         uint256 offset = _getImmutableArgsOffset();
  30 |     |         /// @solidity memory-safe-assembly
  31 |     |         assembly {
  32 |     |             arg := shr(96, calldataload(add(offset, argOffset)))
  33 |     |         }
  34 |     |     }
  35 |     | 
  36 |     |     /// @dev Reads a uint256 array stored in the immutable args.
  37 |     |     function _getArgUint256Array(uint256 argOffset, uint256 length)
  38 |     |         internal
  39 |     |         pure
  40 |     |         returns (uint256[] memory arg)
  41 |     |     {
  42 |     |         uint256 offset = _getImmutableArgsOffset();
  43 |     |         /// @solidity memory-safe-assembly
  44 |     |         assembly {
  45 |     |             arg := mload(0x40)
  46 |     |             mstore(arg, length) // Store the length.
  47 |     |             calldatacopy(add(arg, 0x20), add(offset, argOffset), shl(5, length))
  48 |     |             mstore(0x40, add(add(arg, 0x20), shl(5, length))) // Allocate the memory.
  49 |     |         }
  50 |     |     }
  51 |     | 
  52 |     |     /// @dev Reads a bytes32 array stored in the immutable args.
  53 |     |     function _getArgBytes32Array(uint256 argOffset, uint256 length)
  54 |     |         internal
  55 |     |         pure
  56 |     |         returns (bytes32[] memory arg)
  57 |     |     {
  58 |     |         uint256 offset = _getImmutableArgsOffset();
  59 |     |         /// @solidity memory-safe-assembly
  60 |     |         assembly {
  61 |     |             arg := mload(0x40)
  62 |     |             mstore(arg, length) // Store the length.
  63 |     |             calldatacopy(add(arg, 0x20), add(offset, argOffset), shl(5, length))
  64 |     |             mstore(0x40, add(add(arg, 0x20), shl(5, length))) // Allocate the memory.
  65 |     |         }
  66 |     |     }
  67 |     | 
  68 |     |     /// @dev Reads an immutable arg with type bytes32.
  69 |     |     function _getArgBytes32(uint256 argOffset) internal pure returns (bytes32 arg) {
  70 |     |         uint256 offset = _getImmutableArgsOffset();
  71 |     |         /// @solidity memory-safe-assembly
  72 |     |         assembly {
  73 |     |             arg := calldataload(add(offset, argOffset))
  74 |     |         }
  75 |     |     }
  76 |     | 
  77 |     |     /// @dev Reads an immutable arg with type uint256.
  78 |     |     function _getArgUint256(uint256 argOffset) internal pure returns (uint256 arg) {
  79 |     |         uint256 offset = _getImmutableArgsOffset();
  80 |     |         /// @solidity memory-safe-assembly
  81 |     |         assembly {
  82 |     |             arg := calldataload(add(offset, argOffset))
  83 |     |         }
  84 |     |     }
  85 |     | 
  86 |     |     /// @dev Reads an immutable arg with type uint248.
  87 |     |     function _getArgUint248(uint256 argOffset) internal pure returns (uint248 arg) {
  88 |     |         uint256 offset = _getImmutableArgsOffset();
  89 |     |         /// @solidity memory-safe-assembly
  90 |     |         assembly {
  91 |     |             arg := shr(8, calldataload(add(offset, argOffset)))
  92 |     |         }
  93 |     |     }
  94 |     | 
  95 |     |     /// @dev Reads an immutable arg with type uint240.
  96 |     |     function _getArgUint240(uint256 argOffset) internal pure returns (uint240 arg) {
  97 |     |         uint256 offset = _getImmutableArgsOffset();
  98 |     |         /// @solidity memory-safe-assembly
  99 |     |         assembly {
 100 |     |             arg := shr(16, calldataload(add(offset, argOffset)))
 101 |     |         }
 102 |     |     }
 103 |     | 
 104 |     |     /// @dev Reads an immutable arg with type uint232.
 105 |     |     function _getArgUint232(uint256 argOffset) internal pure returns (uint232 arg) {
 106 |     |         uint256 offset = _getImmutableArgsOffset();
 107 |     |         /// @solidity memory-safe-assembly
 108 |     |         assembly {
 109 |     |             arg := shr(24, calldataload(add(offset, argOffset)))
 110 |     |         }
 111 |     |     }
 112 |     | 
 113 |     |     /// @dev Reads an immutable arg with type uint224.
 114 |     |     function _getArgUint224(uint256 argOffset) internal pure returns (uint224 arg) {
 115 |     |         uint256 offset = _getImmutableArgsOffset();
 116 |     |         /// @solidity memory-safe-assembly
 117 |     |         assembly {
 118 |     |             arg := shr(0x20, calldataload(add(offset, argOffset)))
 119 |     |         }
 120 |     |     }
 121 |     | 
 122 |     |     /// @dev Reads an immutable arg with type uint216.
 123 |     |     function _getArgUint216(uint256 argOffset) internal pure returns (uint216 arg) {
 124 |     |         uint256 offset = _getImmutableArgsOffset();
 125 |     |         /// @solidity memory-safe-assembly
 126 |     |         assembly {
 127 |     |             arg := shr(40, calldataload(add(offset, argOffset)))
 128 |     |         }
 129 |     |     }
 130 |     | 
 131 |     |     /// @dev Reads an immutable arg with type uint208.
 132 |     |     function _getArgUint208(uint256 argOffset) internal pure returns (uint208 arg) {
 133 |     |         uint256 offset = _getImmutableArgsOffset();
 134 |     |         /// @solidity memory-safe-assembly
 135 |     |         assembly {
 136 |     |             arg := shr(48, calldataload(add(offset, argOffset)))
 137 |     |         }
 138 |     |     }
 139 |     | 
 140 |     |     /// @dev Reads an immutable arg with type uint200.
 141 |     |     function _getArgUint200(uint256 argOffset) internal pure returns (uint200 arg) {
 142 |     |         uint256 offset = _getImmutableArgsOffset();
 143 |     |         /// @solidity memory-safe-assembly
 144 |     |         assembly {
 145 |     |             arg := shr(56, calldataload(add(offset, argOffset)))
 146 |     |         }
 147 |     |     }
 148 |     | 
 149 |     |     /// @dev Reads an immutable arg with type uint192.
 150 |     |     function _getArgUint192(uint256 argOffset) internal pure returns (uint192 arg) {
 151 |     |         uint256 offset = _getImmutableArgsOffset();
 152 |     |         /// @solidity memory-safe-assembly
 153 |     |         assembly {
 154 |     |             arg := shr(64, calldataload(add(offset, argOffset)))
 155 |     |         }
 156 |     |     }
 157 |     | 
 158 |     |     /// @dev Reads an immutable arg with type uint184.
 159 |     |     function _getArgUint184(uint256 argOffset) internal pure returns (uint184 arg) {
 160 |     |         uint256 offset = _getImmutableArgsOffset();
 161 |     |         /// @solidity memory-safe-assembly
 162 |     |         assembly {
 163 |     |             arg := shr(72, calldataload(add(offset, argOffset)))
 164 |     |         }
 165 |     |     }
 166 |     | 
 167 |     |     /// @dev Reads an immutable arg with type uint176.
 168 |     |     function _getArgUint176(uint256 argOffset) internal pure returns (uint176 arg) {
 169 |     |         uint256 offset = _getImmutableArgsOffset();
 170 |     |         /// @solidity memory-safe-assembly
 171 |     |         assembly {
 172 |     |             arg := shr(80, calldataload(add(offset, argOffset)))
 173 |     |         }
 174 |     |     }
 175 |     | 
 176 |     |     /// @dev Reads an immutable arg with type uint168.
 177 |     |     function _getArgUint168(uint256 argOffset) internal pure returns (uint168 arg) {
 178 |     |         uint256 offset = _getImmutableArgsOffset();
 179 |     |         /// @solidity memory-safe-assembly
 180 |     |         assembly {
 181 |     |             arg := shr(88, calldataload(add(offset, argOffset)))
 182 |     |         }
 183 |     |     }
 184 |     | 
 185 |     |     /// @dev Reads an immutable arg with type uint160.
 186 |     |     function _getArgUint160(uint256 argOffset) internal pure returns (uint160 arg) {
 187 |     |         uint256 offset = _getImmutableArgsOffset();
 188 |     |         /// @solidity memory-safe-assembly
 189 |     |         assembly {
 190 |     |             arg := shr(96, calldataload(add(offset, argOffset)))
 191 |     |         }
 192 |     |     }
 193 |     | 
 194 |     |     /// @dev Reads an immutable arg with type uint152.
 195 |     |     function _getArgUint152(uint256 argOffset) internal pure returns (uint152 arg) {
 196 |     |         uint256 offset = _getImmutableArgsOffset();
 197 |     |         /// @solidity memory-safe-assembly
 198 |     |         assembly {
 199 |     |             arg := shr(104, calldataload(add(offset, argOffset)))
 200 |     |         }
 201 |     |     }
 202 |     | 
 203 |     |     /// @dev Reads an immutable arg with type uint144.
 204 |     |     function _getArgUint144(uint256 argOffset) internal pure returns (uint144 arg) {
 205 |     |         uint256 offset = _getImmutableArgsOffset();
 206 |     |         /// @solidity memory-safe-assembly
 207 |     |         assembly {
 208 |     |             arg := shr(112, calldataload(add(offset, argOffset)))
 209 |     |         }
 210 |     |     }
 211 |     | 
 212 |     |     /// @dev Reads an immutable arg with type uint136.
 213 |     |     function _getArgUint136(uint256 argOffset) internal pure returns (uint136 arg) {
 214 |     |         uint256 offset = _getImmutableArgsOffset();
 215 |     |         /// @solidity memory-safe-assembly
 216 |     |         assembly {
 217 |     |             arg := shr(120, calldataload(add(offset, argOffset)))
 218 |     |         }
 219 |     |     }
 220 |     | 
 221 |     |     /// @dev Reads an immutable arg with type uint128.
 222 |     |     function _getArgUint128(uint256 argOffset) internal pure returns (uint128 arg) {
 223 |     |         uint256 offset = _getImmutableArgsOffset();
 224 |     |         /// @solidity memory-safe-assembly
 225 |     |         assembly {
 226 |     |             arg := shr(128, calldataload(add(offset, argOffset)))
 227 |     |         }
 228 |     |     }
 229 |     | 
 230 |     |     /// @dev Reads an immutable arg with type uint120.
 231 |     |     function _getArgUint120(uint256 argOffset) internal pure returns (uint120 arg) {
 232 |     |         uint256 offset = _getImmutableArgsOffset();
 233 |     |         /// @solidity memory-safe-assembly
 234 |     |         assembly {
 235 |     |             arg := shr(136, calldataload(add(offset, argOffset)))
 236 |     |         }
 237 |     |     }
 238 |     | 
 239 |     |     /// @dev Reads an immutable arg with type uint112.
 240 |     |     function _getArgUint112(uint256 argOffset) internal pure returns (uint112 arg) {
 241 |     |         uint256 offset = _getImmutableArgsOffset();
 242 |     |         /// @solidity memory-safe-assembly
 243 |     |         assembly {
 244 |     |             arg := shr(144, calldataload(add(offset, argOffset)))
 245 |     |         }
 246 |     |     }
 247 |     | 
 248 |     |     /// @dev Reads an immutable arg with type uint104.
 249 |     |     function _getArgUint104(uint256 argOffset) internal pure returns (uint104 arg) {
 250 |     |         uint256 offset = _getImmutableArgsOffset();
 251 |     |         /// @solidity memory-safe-assembly
 252 |     |         assembly {
 253 |     |             arg := shr(152, calldataload(add(offset, argOffset)))
 254 |     |         }
 255 |     |     }
 256 |     | 
 257 |     |     /// @dev Reads an immutable arg with type uint96.
 258 |     |     function _getArgUint96(uint256 argOffset) internal pure returns (uint96 arg) {
 259 |     |         uint256 offset = _getImmutableArgsOffset();
 260 |     |         /// @solidity memory-safe-assembly
 261 |     |         assembly {
 262 |     |             arg := shr(160, calldataload(add(offset, argOffset)))
 263 |     |         }
 264 |     |     }
 265 |     | 
 266 |     |     /// @dev Reads an immutable arg with type uint88.
 267 |     |     function _getArgUint88(uint256 argOffset) internal pure returns (uint88 arg) {
 268 |     |         uint256 offset = _getImmutableArgsOffset();
 269 |     |         /// @solidity memory-safe-assembly
 270 |     |         assembly {
 271 |     |             arg := shr(168, calldataload(add(offset, argOffset)))
 272 |     |         }
 273 |     |     }
 274 |     | 
 275 |     |     /// @dev Reads an immutable arg with type uint80.
 276 |     |     function _getArgUint80(uint256 argOffset) internal pure returns (uint80 arg) {
 277 |     |         uint256 offset = _getImmutableArgsOffset();
 278 |     |         /// @solidity memory-safe-assembly
 279 |     |         assembly {
 280 |     |             arg := shr(176, calldataload(add(offset, argOffset)))
 281 |     |         }
 282 |     |     }
 283 |     | 
 284 |     |     /// @dev Reads an immutable arg with type uint72.
 285 |     |     function _getArgUint72(uint256 argOffset) internal pure returns (uint72 arg) {
 286 |     |         uint256 offset = _getImmutableArgsOffset();
 287 |     |         /// @solidity memory-safe-assembly
 288 |     |         assembly {
 289 |     |             arg := shr(184, calldataload(add(offset, argOffset)))
 290 |     |         }
 291 |     |     }
 292 |     | 
 293 |     |     /// @dev Reads an immutable arg with type uint64.
 294 |     |     function _getArgUint64(uint256 argOffset) internal pure returns (uint64 arg) {
 295 |     |         uint256 offset = _getImmutableArgsOffset();
 296 |     |         /// @solidity memory-safe-assembly
 297 |     |         assembly {
 298 |     |             arg := shr(192, calldataload(add(offset, argOffset)))
 299 |     |         }
 300 |     |     }
 301 |     | 
 302 |     |     /// @dev Reads an immutable arg with type uint56.
 303 |     |     function _getArgUint56(uint256 argOffset) internal pure returns (uint56 arg) {
 304 |     |         uint256 offset = _getImmutableArgsOffset();
 305 |     |         /// @solidity memory-safe-assembly
 306 |     |         assembly {
 307 |     |             arg := shr(200, calldataload(add(offset, argOffset)))
 308 |     |         }
 309 |     |     }
 310 |     | 
 311 |     |     /// @dev Reads an immutable arg with type uint48.
 312 |     |     function _getArgUint48(uint256 argOffset) internal pure returns (uint48 arg) {
 313 |     |         uint256 offset = _getImmutableArgsOffset();
 314 |     |         /// @solidity memory-safe-assembly
 315 |     |         assembly {
 316 |     |             arg := shr(208, calldataload(add(offset, argOffset)))
 317 |     |         }
 318 |     |     }
 319 |     | 
 320 |     |     /// @dev Reads an immutable arg with type uint40.
 321 |     |     function _getArgUint40(uint256 argOffset) internal pure returns (uint40 arg) {
 322 |     |         uint256 offset = _getImmutableArgsOffset();
 323 |     |         /// @solidity memory-safe-assembly
 324 |     |         assembly {
 325 |     |             arg := shr(216, calldataload(add(offset, argOffset)))
 326 |     |         }
 327 |     |     }
 328 |     | 
 329 |     |     /// @dev Reads an immutable arg with type uint32.
 330 |     |     function _getArgUint32(uint256 argOffset) internal pure returns (uint32 arg) {
 331 |     |         uint256 offset = _getImmutableArgsOffset();
 332 |     |         /// @solidity memory-safe-assembly
 333 |     |         assembly {
 334 |     |             arg := shr(224, calldataload(add(offset, argOffset)))
 335 |     |         }
 336 |     |     }
 337 |     | 
 338 |     |     /// @dev Reads an immutable arg with type uint24.
 339 |     |     function _getArgUint24(uint256 argOffset) internal pure returns (uint24 arg) {
 340 |     |         uint256 offset = _getImmutableArgsOffset();
 341 |     |         /// @solidity memory-safe-assembly
 342 |     |         assembly {
 343 |     |             arg := shr(232, calldataload(add(offset, argOffset)))
 344 |     |         }
 345 |     |     }
 346 |     | 
 347 |     |     /// @dev Reads an immutable arg with type uint16.
 348 |     |     function _getArgUint16(uint256 argOffset) internal pure returns (uint16 arg) {
 349 |     |         uint256 offset = _getImmutableArgsOffset();
 350 |     |         /// @solidity memory-safe-assembly
 351 |     |         assembly {
 352 |     |             arg := shr(240, calldataload(add(offset, argOffset)))
 353 |     |         }
 354 |     |     }
 355 |     | 
 356 |     |     /// @dev Reads an immutable arg with type uint8.
 357 |     |     function _getArgUint8(uint256 argOffset) internal pure returns (uint8 arg) {
 358 |     |         uint256 offset = _getImmutableArgsOffset();
 359 |     |         /// @solidity memory-safe-assembly
 360 |     |         assembly {
 361 |     |             arg := shr(248, calldataload(add(offset, argOffset)))
 362 |     |         }
 363 |     |     }
 364 |     | 
 365 |     |     /// @return offset The offset of the packed immutable args in calldata.
 366 |     |     function _getImmutableArgsOffset() internal pure returns (uint256 offset) {
 367 |     |         /// @solidity memory-safe-assembly
 368 |     |         assembly {
 369 |     |             offset := sub(calldatasize(), shr(240, calldataload(sub(calldatasize(), 2))))
 370 |     |         }
 371 |     |     }
 372 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/solady/LibClone.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.4;
   3 |     | 
   4 |     | /// @notice Minimal proxy library.
   5 |     | /// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibClone.sol)
   6 |     | /// @author Minimal proxy by 0age (https://github.com/0age)
   7 |     | /// @author Clones with immutable args by wighawag, zefram.eth, Saw-mon & Natalie
   8 |     | /// (https://github.com/Saw-mon-and-Natalie/clones-with-immutable-args)
   9 |     | ///
  10 |     | /// @dev Minimal proxy:
  11 |     | /// Although the sw0nt pattern saves 5 gas over the erc-1167 pattern during runtime,
  12 |     | /// it is not supported out-of-the-box on Etherscan. Hence, we choose to use the 0age pattern,
  13 |     | /// which saves 4 gas over the erc-1167 pattern during runtime, and has the smallest bytecode.
  14 |     | ///
  15 |     | /// @dev Clones with immutable args (CWIA):
  16 |     | /// The implementation of CWIA here implements a `receive()` method that emits the
  17 |     | /// `ReceiveETH(uint256)` event. This skips the `DELEGATECALL` when there is no calldata,
  18 |     | /// enabling us to accept hard gas-capped `sends` & `transfers` for maximum backwards
  19 |     | /// composability. The minimal proxy implementation does not offer this feature.
  20 |     | library LibClone {
  21 |     |     /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/
  22 |     |     /*                       CUSTOM ERRORS                        */
  23 |     |     /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/
  24 |     | 
  25 |     |     /// @dev Unable to deploy the clone.
  26 |     |     error DeploymentFailed();
  27 |     | 
  28 |     |     /// @dev The salt must start with either the zero address or the caller.
  29 |     |     error SaltDoesNotStartWithCaller();
  30 |     | 
  31 |     |     /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/
  32 |     |     /*                  MINIMAL PROXY OPERATIONS                  */
  33 |     |     /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/
  34 |     | 
  35 |     |     /// @dev Deploys a deterministic clone of `implementation`,
  36 |     |     /// using immutable  arguments encoded in `data`, with `salt`.
  37 |     |     function cloneDeterministic(address implementation, bytes memory data, bytes32 salt)
  38 |     |         internal
  39 |     |         returns (address instance)
  40 |     |     {
  41 |     |         assembly {
  42 |     |             // Compute the boundaries of the data and cache the memory slots around it.
  43 |     |             let mBefore3 := mload(sub(data, 0x60))
  44 |     |             let mBefore2 := mload(sub(data, 0x40))
  45 |     |             let mBefore1 := mload(sub(data, 0x20))
  46 |     |             let dataLength := mload(data)
  47 |     |             let dataEnd := add(add(data, 0x20), dataLength)
  48 |     |             let mAfter1 := mload(dataEnd)
  49 |     | 
  50 |     |             // +2 bytes for telling how much data there is appended to the call.
  51 |     |             let extraLength := add(dataLength, 2)
  52 |     | 
  53 |     |             // Write the bytecode before the data.
  54 |     |             mstore(data, 0x5af43d3d93803e606057fd5bf3)
  55 |     |             // Write the address of the implementation.
  56 |     |             mstore(sub(data, 0x0d), implementation)
  57 |     |             // Write the rest of the bytecode.
  58 |     |             mstore(
  59 |     |                 sub(data, 0x21),
  60 |     |                 or(shl(0x48, extraLength), 0x593da1005b363d3d373d3d3d3d610000806062363936013d73)
  61 |     |             )
  62 |     |             // `keccak256("ReceiveETH(uint256)")`
  63 |     |             mstore(
  64 |     |                 sub(data, 0x3a), 0x9e4ac34f21c619cefc926c8bd93b54bf5a39c7ab2127a895af1cc0691d7e3dff
  65 |     |             )
  66 |     |             mstore(
  67 |     |                 sub(data, 0x5a),
  68 |     |                 or(shl(0x78, add(extraLength, 0x62)), 0x6100003d81600a3d39f336602c57343d527f)
  69 |     |             )
  70 |     |             mstore(dataEnd, shl(0xf0, extraLength))
  71 |     | 
  72 |     |             // Create the instance.
  73 |     |             instance := create2(0, sub(data, 0x4c), add(extraLength, 0x6c), salt)
  74 |     | 
  75 |     |             // If `instance` is zero, revert.
  76 |     |             if iszero(instance) {
  77 |     |                 // Store the function selector of `DeploymentFailed()`.
  78 |     |                 mstore(0x00, 0x30116425)
  79 |     |                 // Revert with (offset, size).
  80 |     |                 revert(0x1c, 0x04)
  81 |     |             }
  82 |     | 
  83 |     |             // Restore the overwritten memory surrounding `data`.
  84 |     |             mstore(dataEnd, mAfter1)
  85 |     |             mstore(data, dataLength)
  86 |     |             mstore(sub(data, 0x20), mBefore1)
  87 |     |             mstore(sub(data, 0x40), mBefore2)
  88 |     |             mstore(sub(data, 0x60), mBefore3)
  89 |     |         }
  90 |     |     }
  91 |     | 
  92 |     |     /// @dev Returns the initialization code hash of the clone of `implementation`
  93 |     |     /// using immutable arguments encoded in `data`.
  94 |     |     /// Used for mining vanity addresses with create2crunch.
  95 |     |     function initCodeHash(address implementation, bytes memory data)
  96 |     |         internal
  97 |     |         pure
  98 |     |         returns (bytes32 hash)
  99 |     |     {
 100 |     |         assembly {
 101 |     |             // Compute the boundaries of the data and cache the memory slots around it.
 102 |     |             let mBefore3 := mload(sub(data, 0x60))
 103 |     |             let mBefore2 := mload(sub(data, 0x40))
 104 |     |             let mBefore1 := mload(sub(data, 0x20))
 105 |     |             let dataLength := mload(data)
 106 |     |             let dataEnd := add(add(data, 0x20), dataLength)
 107 |     |             let mAfter1 := mload(dataEnd)
 108 |     | 
 109 |     |             // +2 bytes for telling how much data there is appended to the call.
 110 |     |             let extraLength := add(dataLength, 2)
 111 |     | 
 112 |     |             // Write the bytecode before the data.
 113 |     |             mstore(data, 0x5af43d3d93803e606057fd5bf3)
 114 |     |             // Write the address of the implementation.
 115 |     |             mstore(sub(data, 0x0d), implementation)
 116 |     |             // Write the rest of the bytecode.
 117 |     |             mstore(
 118 |     |                 sub(data, 0x21),
 119 |     |                 or(shl(0x48, extraLength), 0x593da1005b363d3d373d3d3d3d610000806062363936013d73)
 120 |     |             )
 121 |     |             // `keccak256("ReceiveETH(uint256)")`
 122 |     |             mstore(
 123 |     |                 sub(data, 0x3a), 0x9e4ac34f21c619cefc926c8bd93b54bf5a39c7ab2127a895af1cc0691d7e3dff
 124 |     |             )
 125 |     |             mstore(
 126 |     |                 sub(data, 0x5a),
 127 |     |                 or(shl(0x78, add(extraLength, 0x62)), 0x6100003d81600a3d39f336602c57343d527f)
 128 |     |             )
 129 |     |             mstore(dataEnd, shl(0xf0, extraLength))
 130 |     | 
 131 |     |             // Compute and store the bytecode hash.
 132 |     |             hash := keccak256(sub(data, 0x4c), add(extraLength, 0x6c))
 133 |     | 
 134 |     |             // Restore the overwritten memory surrounding `data`.
 135 |     |             mstore(dataEnd, mAfter1)
 136 |     |             mstore(data, dataLength)
 137 |     |             mstore(sub(data, 0x20), mBefore1)
 138 |     |             mstore(sub(data, 0x40), mBefore2)
 139 |     |             mstore(sub(data, 0x60), mBefore3)
 140 |     |         }
 141 |     |     }
 142 |     | 
 143 |     |     /// @dev Returns the address of the deterministic clone of
 144 |     |     /// `implementation` using immutable arguments encoded in `data`, with `salt`, by `deployer`.
 145 |     |     function predictDeterministicAddress(
 146 |     |         address implementation,
 147 |     |         bytes memory data,
 148 |     |         bytes32 salt,
 149 |     |         address deployer
 150 |     |     ) internal pure returns (address predicted) {
 151 |     |         bytes32 hash = initCodeHash(implementation, data);
 152 |     |         predicted = predictDeterministicAddress(hash, salt, deployer);
 153 |     |     }
 154 |     | 
 155 |     |     /*´:°•.°+.*•´.*:˚.°*.˚•´.°:°•.°•.*•´.*:˚.°*.˚•´.°:°•.°+.*•´.*:*/
 156 |     |     /*                      OTHER OPERATIONS                      */
 157 |     |     /*.•°:°.´+˚.*°.˚:*.´•*.+°.•°:´*.´•*.•°.•°:°.´:•˚°.*°.˚:*.´+°.•*/
 158 |     | 
 159 |     |     /// @dev Returns the address when a contract with initialization code hash,
 160 |     |     /// `hash`, is deployed with `salt`, by `deployer`.
 161 |     |     function predictDeterministicAddress(bytes32 hash, bytes32 salt, address deployer)
 162 |     |         internal
 163 |     |         pure
 164 |     |         returns (address predicted)
 165 |     |     {
 166 |     |         /// @solidity memory-safe-assembly
 167 |     |         assembly {
 168 |     |             // Compute and store the bytecode hash.
 169 |     |             mstore8(0x00, 0xff) // Write the prefix.
 170 |     |             mstore(0x35, hash)
 171 |     |             mstore(0x01, shl(96, deployer))
 172 |     |             mstore(0x15, salt)
 173 |     |             predicted := keccak256(0x00, 0x55)
 174 |     |             // Restore the part of the free memory pointer that has been overwritten.
 175 |     |             mstore(0x35, 0)
 176 |     |         }
 177 |     |     }
 178 |     | 
 179 |     |     /// @dev Reverts if `salt` does not start with either the zero address or the caller.
 180 |     |     function checkStartsWithCaller(bytes32 salt) internal view {
 181 |     |         /// @solidity memory-safe-assembly
 182 |     |         assembly {
 183 |     |             // If the salt does not start with the zero address or the caller.
 184 |     |             if iszero(or(iszero(shr(96, salt)), eq(caller(), shr(96, salt)))) {
 185 |     |                 // Store the function selector of `SaltDoesNotStartWithCaller()`.
 186 |     |                 mstore(0x00, 0x2f634836)
 187 |     |                 // Revert with (offset, size).
 188 |     |                 revert(0x1c, 0x04)
 189 |     |             }
 190 |     |         }
 191 |     |     }
 192 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/utils/Collect.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | import '../../interfaces/limit/ILimitPoolStructs.sol';
  5 |     | import '../limit/PositionsLimit.sol';
  6 |     | import '../utils/SafeTransfers.sol';
  7 |     | 
  8 |     | library Collect {
  9 |     |     function burnLimit(
 10 |     |         ILimitPoolStructs.BurnLimitCache memory cache,
 11 |     |         ILimitPoolStructs.BurnLimitParams memory params
 12 |     |     ) internal returns (
 13 |     |         ILimitPoolStructs.BurnLimitCache memory
 14 |     |     )    
 15 |     |     {
 16 |     |         // store amounts for transferOut
 17 |     |         uint128 amountIn  = cache.position.amountIn;
 18 |     |         uint128 amountOut = cache.position.amountOut;
 19 |     | 
 20 |     |         /// zero out balances and transfer out
 21 |     |         if (amountIn > 0) {
 22 |     |             cache.position.amountIn = 0;
 23 |     |             SafeTransfers.transferOut(params.to, params.zeroForOne ? cache.constants.token1 : cache.constants.token0, amountIn);
 24 |     |         }
 25 |     |         if (amountOut > 0) {
 26 |     |             cache.position.amountOut = 0;
 27 |     |             SafeTransfers.transferOut(params.to, params.zeroForOne ? cache.constants.token0 : cache.constants.token1, amountOut);
 28 |     |         }
 29 |     | 
 30 |     |         return cache;
 31 |     |     }
 32 |     | }
 33 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/utils/SafeCast.sol
  1 |     | // SPDX-License-Identifier: GPL-2.0-or-later
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | /// @title Safe casting methods
  5 |     | /// @notice Contains methods for safely casting between types
  6 |     | library SafeCast {
  7 |     |     /// @notice Cast a uint256 to a uint128, revert on overflow
  8 |     |     /// @param y The uint256 to be downcasted
  9 |     |     /// @return z The downcasted integer, now type uint128
 10 |     |     function toUint128(uint256 y) internal pure returns (uint128 z) {
 11 |     |         require((z = uint128(y)) == y);
 12 |     |     }
 13 |     | 
 14 |     |     /// @notice Cast a uint256 to a uint160, revert on overflow
 15 |     |     /// @param y The uint256 to be downcasted
 16 |     |     /// @return z The downcasted integer, now type uint160
 17 |     |     function toUint160(uint256 y) internal pure returns (uint160 z) {
 18 |     |         require((z = uint160(y)) == y);
 19 |     |     }
 20 |     | 
 21 |     |     /// @notice Cast a int256 to a int128, revert on overflow or underflow
 22 |     |     /// @param y The int256 to be downcasted
 23 |     |     /// @return z The downcasted integer, now type int128
 24 |     |     function toInt128(int256 y) internal pure returns (int128 z) {
 25 |     |         require((z = int128(y)) == y);
 26 |     |     }
 27 |     | 
 28 |     |     /// @notice Cast a uint256 to a int256, revert on overflow
 29 |     |     /// @param y The uint256 to be casted
 30 |     |     /// @return z The casted integer, now type int256
 31 |     |     function toInt256(uint256 y) internal pure returns (int256 z) {
 32 |     |         require(y < 2**255);
 33 |     |         z = int256(y);
 34 |     |     }
 35 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/utils/SafeTransfers.sol
   1 |     | //SPDX-License-Identifier: Unlicense
   2 |     | pragma solidity 0.8.13;
   3 |     | 
   4 |     | import '@openzeppelin/contracts/token/ERC20/ERC20.sol';
   5 |     | 
   6 |     | library SafeTransfers {
   7 |     |     /**
   8 |     |      * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.
   9 |     |      *      This will revert due to insufficient balance or insufficient allowance.
  10 |     |      *      This function returns the actual amount received,
  11 |     |      *      which may be less than `amount` if there is a fee attached to the transfer.
  12 |     |      *
  13 |     |      *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.
  14 |     |      *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca
  15 |     |      */
  16 |     |     // slither-disable-next-line assembly
  17 |     |     function transferIn(address token, uint256 amount) internal returns (uint256) {
  18 |     |         if (token == address(0)) {
  19 |     |             if (msg.value < amount) require(false, 'TransferFailed(msg.sender, address(this)');
  20 |     |             return amount;
  21 |     |         }
  22 |     |         if (amount == 0) return 0;
  23 |     |         IERC20 erc20Token = IERC20(token);
  24 |     |         uint256 balanceBefore = IERC20(token).balanceOf(address(this));
  25 |     | 
  26 |     |         // ? We are checking the transfer, but since we are doing so in an assembly block
  27 |     |         // ? Slither does not pick up on that and results in a hit
  28 |     |         // slither-disable-next-line unchecked-transfer
  29 |     |         erc20Token.transferFrom(msg.sender, address(this), amount);
  30 |     | 
  31 |     |         bool success;
  32 |     |         assembly {
  33 |     |             switch returndatasize()
  34 |     |             case 0 {
  35 |     |                 // This is a non-standard ERC-20
  36 |     |                 success := 1 // set success to true
  37 |     |             }
  38 |     |             case 32 {
  39 |     |                 // This is a compliant ERC-20
  40 |     |                 returndatacopy(0, 0, 32)
  41 |     |                 success := mload(0) // Set `success = returndata` of external call
  42 |     |             }
  43 |     |             default {
  44 |     |                 // This is an excessively non-compliant ERC-20, revert.
  45 |     |                 success := 0
  46 |     |             }
  47 |     |         }
  48 |     |         if (!success) require(false, 'TransferFailed(msg.sender, address(this)');
  49 |     | 
  50 |     |         // Calculate the amount that was *actually* transferred
  51 |     |         uint256 balanceAfter = IERC20(token).balanceOf(address(this));
  52 |     | 
  53 |     |         return balanceAfter - balanceBefore; // underflow already checked above, just subtract
  54 |     |     }
  55 |     | 
  56 |     |     /**
  57 |     |      * @dev Similar to EIP20 transfer, except it handles a False success from `transfer` and returns an explanatory
  58 |     |      *      error code rather than reverting. If caller has not called checked protocol's balance, this may revert due to
  59 |     |      *      insufficient cash held in this contract. If caller has checked protocol's balance prior to this call, and verified
  60 |     |      *      it is >= amount, this should not revert in normal conditions.
  61 |     |      *
  62 |     |      *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.
  63 |     |      *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca
  64 |     |      */
  65 |     |     // slither-disable-next-line assembly
  66 |     |     function transferOut(
  67 |     |         address to,
  68 |     |         address token,
  69 |     |         uint256 amount
  70 |     |     ) internal {
  71 |     |         if (token == address(0)) {
  72 |     |             if (address(this).balance < amount) require(false, 'TransferFailed(address(this), to');
  73 |     |             payable(to).transfer(amount);
  74 |     |             return;
  75 |     |         }
  76 |     |         if (amount == 0) return;
  77 |     |         IERC20 erc20Token = IERC20(token);
  78 |     |         // ? We are checking the transfer, but since we are doing so in an assembly block
  79 |     |         // ? Slither does not pick up on that and results in a hit
  80 |     |         // slither-disable-next-line unchecked-transfer
  81 |     |         erc20Token.transfer(to, amount);
  82 |     | 
  83 |     |         bool success;
  84 |     |         assembly {
  85 |     |             switch returndatasize()
  86 |     |             case 0 {
  87 |     |                 // This is a non-standard ERC-20
  88 |     |                 success := 1 // set success to true
  89 |     |             }
  90 |     |             case 32 {
  91 |     |                 // This is a complaint ERC-20
  92 |     |                 returndatacopy(0, 0, 32)
  93 |     |                 success := mload(0) // Set `success = returndata` of external call
  94 |     |             }
  95 |     |             default {
  96 |     |                 // This is an excessively non-compliant ERC-20, revert.
  97 |     |                 success := 0
  98 |     |             }
  99 |     |         }
 100 |     |         if (!success) require(false, 'TransferFailed(address(this), msg.sender');
 101 |     |     }
 102 |     | 
 103 |     |     /**
 104 |     |      * @dev Similar to EIP20 transfer, except it handles a False result from `transferFrom` and reverts in that case.
 105 |     |      *      This will revert due to insufficient balance or insufficient allowance.
 106 |     |      *      This function returns the actual amount received,
 107 |     |      *      which may be less than `amount` if there is a fee attached to the transfer.
 108 |     |      *
 109 |     |      *      Note: This wrapper safely handles non-standard ERC-20 tokens that do not return a value.
 110 |     |      *            See here: https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca
 111 |     |      */
 112 |     |     // slither-disable-next-line assembly
 113 | *   |     function transferInto(address token, address sender, uint256 amount) internal returns (uint256) {
 114 | *   |         if (token == address(0)) {
 115 |     |             if (msg.value < amount) require(false, 'TransferFailed(msg.sender, address(this)');
 116 |     |             return amount;
 117 |     |         }
 118 | *   |         IERC20 erc20Token = IERC20(token);
 119 | *   |         uint256 balanceBefore = IERC20(token).balanceOf(address(this));
 120 |     | 
 121 |     |         /// @dev - msg.sender here is the pool
 122 | *r  |         erc20Token.transferFrom(sender, msg.sender, amount);
 123 |     | 
 124 | *   |         bool success;
 125 |     |         assembly {
 126 | *   |             switch returndatasize()
 127 | *   |             case 0 {
 128 |     |                 // This is a non-standard ERC-20
 129 |     |                 success := 1 // set success to true
 130 |     |             }
 131 | *   |             case 32 {
 132 |     |                 // This is a compliant ERC-20
 133 | *   |                 returndatacopy(0, 0, 32)
 134 | *   |                 success := mload(0) // Set `success = returndata` of external call
 135 |     |             }
 136 |     |             default {
 137 |     |                 // This is an excessively non-compliant ERC-20, revert.
 138 |     |                 success := 0
 139 |     |             }
 140 |     |         }
 141 | *   |         if (!success) require(false, 'TransferFailed(msg.sender, address(this)');
 142 |     | 
 143 |     |         // Calculate the amount that was *actually* transferred
 144 | *   |         uint256 balanceAfter = IERC20(token).balanceOf(address(this));
 145 |     | 
 146 | *   |         return balanceAfter - balanceBefore; // underflow already checked above, just subtract
 147 |     |     }
 148 |     | }
 149 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/libraries/utils/String.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | library String {
  5 |     |     bytes16 private constant alphabet = "0123456789abcdef";
  6 |     | 
  7 |     |     function from(bytes32 value) internal pure returns(string memory) {
  8 |     |         return toString(abi.encodePacked(value));
  9 |     |     }
 10 |     | 
 11 |     |     function from(address account) internal pure returns(string memory) {
 12 |     |         return toString(abi.encodePacked(account));
 13 |     |     }
 14 |     | 
 15 |     |     function from(uint256 value) internal pure returns(string memory) {
 16 |     |         unchecked {
 17 |     |             uint256 length = log10(value) + 1;
 18 |     |             string memory buffer = new string(length);
 19 |     |             uint256 ptr;
 20 |     |             /// @solidity memory-safe-assembly
 21 |     |             assembly {
 22 |     |                 ptr := add(buffer, add(32, length))
 23 |     |             }
 24 |     |             while (true) {
 25 |     |                 ptr--;
 26 |     |                 /// @solidity memory-safe-assembly
 27 |     |                 assembly {
 28 |     |                     mstore8(ptr, byte(mod(value, 10), alphabet))
 29 |     |                 }
 30 |     |                 value /= 10;
 31 |     |                 if (value == 0) break;
 32 |     |             }
 33 |     |             return buffer;
 34 |     |         }
 35 |     |     }
 36 |     | 
 37 |     |     function from(int256 value) internal pure returns (string memory) {
 38 |     |         return string(abi.encodePacked(value < 0 ? "-" : "", from(abs(value))));
 39 |     |     }
 40 |     | 
 41 |     |     function abs(int256 n) internal pure returns (uint256) {
 42 |     |         unchecked {
 43 |     |             // must be unchecked in order to support `n = type(int256).min`
 44 |     |             return uint256(n >= 0 ? n : -n);
 45 |     |         }
 46 |     |     }
 47 |     | 
 48 |     |     function log10(uint256 value) internal pure returns (uint256) {
 49 |     |         uint256 result = 0;
 50 |     |         unchecked {
 51 |     |             if (value >= 10 ** 64) {
 52 |     |                 value /= 10 ** 64;
 53 |     |                 result += 64;
 54 |     |             }
 55 |     |             if (value >= 10 ** 32) {
 56 |     |                 value /= 10 ** 32;
 57 |     |                 result += 32;
 58 |     |             }
 59 |     |             if (value >= 10 ** 16) {
 60 |     |                 value /= 10 ** 16;
 61 |     |                 result += 16;
 62 |     |             }
 63 |     |             if (value >= 10 ** 8) {
 64 |     |                 value /= 10 ** 8;
 65 |     |                 result += 8;
 66 |     |             }
 67 |     |             if (value >= 10 ** 4) {
 68 |     |                 value /= 10 ** 4;
 69 |     |                 result += 4;
 70 |     |             }
 71 |     |             if (value >= 10 ** 2) {
 72 |     |                 value /= 10 ** 2;
 73 |     |                 result += 2;
 74 |     |             }
 75 |     |             if (value >= 10 ** 1) {
 76 |     |                 result += 1;
 77 |     |             }
 78 |     |         }
 79 |     |         return result;
 80 |     |     }
 81 |     | 
 82 |     |     function toString(bytes memory data) internal pure returns(string memory) {
 83 |     |         bytes memory str = new bytes(2 + data.length * 2);
 84 |     |         str[0] = "0";
 85 |     |         str[1] = "x";
 86 |     |         for (uint i = 0; i < data.length;) {
 87 |     |             str[2+i*2] = alphabet[uint(uint8(data[i] >> 4))];
 88 |     |             str[3+i*2] = alphabet[uint(uint8(data[i] & 0x0f))];
 89 |     |             unchecked {
 90 |     |                 ++i;
 91 |     |             }
 92 |     |         }
 93 |     |         return string(str);
 94 |     |     }
 95 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/test/Token20.sol
  1 |     | //SPDX-License-Identifier: Unlicense
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | import '@openzeppelin/contracts/token/ERC20/ERC20.sol';
  5 |     | import '@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol';
  6 |     | 
  7 | *   | contract Token20 is ERC20, ERC20Burnable {
  8 |     |     uint8 _decimals;
  9 |     | 
 10 |     |     constructor(
 11 |     |         string memory tokenName,
 12 |     |         string memory tokenSymbol,
 13 |     |         uint8 decimals_
 14 |     |     ) ERC20(tokenName, tokenSymbol) {
 15 |     |         _decimals = decimals_;
 16 |     |     }
 17 |     | 
 18 | *   |     function mint(address to, uint256 amount) external {
 19 | *   |         _mint(to, amount);
 20 |     |     }
 21 |     | 
 22 |     |     function decimals() public view override returns (uint8) {
 23 |     |         return _decimals;
 24 |     |     }
 25 |     | 
 26 |     |     function setDecimals(uint8 decimals_) public {
 27 |     |         _decimals = decimals_;
 28 |     |     }
 29 |     | }
 30 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/utils/LimitPoolErrors.sol
  1 |     | // SPDX-License-Identifier: BUSL-1.1
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | abstract contract LimitPoolErrors {
  5 |     |     error Locked();
  6 |     |     error OwnerOnly();
  7 |     |     error InvalidToken();
  8 |     |     error InvalidPosition();
  9 |     |     error InvalidSwapFee();
 10 |     |     error InvalidTokenDecimals();
 11 |     |     error InvalidTickSpread();
 12 |     |     error LiquidityOverflow();
 13 |     |     error Token0Missing();
 14 |     |     error Token1Missing();
 15 |     |     error InvalidTick();
 16 |     |     error FactoryOnly();
 17 |     |     error LowerNotEvenTick();
 18 |     |     error UpperNotOddTick();
 19 |     |     error MaxTickLiquidity();
 20 |     |     error CollectToZeroAddress();
 21 |     |     error ProtocolFeeCeilingExceeded();
 22 |     |     error Overflow();
 23 |     |     error PoolAlreadyInitialized();
 24 |     |     error NotEnoughOutputLiquidity();
 25 |     |     error WaitUntilEnoughObservations();
 26 |     | }
 27 |     | 
 28 |     | abstract contract CoverTicksErrors {
 29 |     |     error WrongTickLowerRange();
 30 |     |     error WrongTickUpperRange();
 31 |     |     error WrongTickLowerOrder();
 32 |     |     error WrongTickUpperOrder();
 33 |     |     error WrongTickClaimedAt();
 34 |     | }
 35 |     | 
 36 |     | abstract contract CoverMiscErrors {
 37 |     |     // to be removed before production
 38 |     |     error NotImplementedYet();
 39 |     | }
 40 |     | 
 41 |     | abstract contract CoverPositionErrors {
 42 |     |     error NotEnoughPositionLiquidity();
 43 |     |     error InvalidClaimTick();
 44 |     | }
 45 |     | 
 46 |     | abstract contract LimitPoolFactoryErrors {
 47 |     |     error OwnerOnly();
 48 |     |     error InvalidTokenAddress();
 49 |     |     error PoolAlreadyExists();
 50 |     |     error FeeTierNotSupported();
 51 |     |     error PoolTypeNotSupported();
 52 |     | }
 53 |     | 
 54 |     | abstract contract CoverTransferErrors {
 55 |     |     error TransferFailed(address from, address dest);
 56 |     | }
 57 |     | 

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/utils/LimitPoolManager.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | pragma solidity ^0.8.0;
   3 |     | 
   4 |     | import '../interfaces/IPool.sol';
   5 |     | import '../interfaces/limit/ILimitPool.sol';
   6 |     | import '../interfaces/limit/ILimitPoolFactory.sol';
   7 |     | import '../interfaces/limit/ILimitPoolManager.sol';
   8 |     | import '../base/events/LimitPoolManagerEvents.sol';
   9 |     | 
  10 |     | /**
  11 |     |  * @dev Defines the actions which can be executed by the factory admin.
  12 |     |  */
  13 |     | contract LimitPoolManager is ILimitPoolManager, LimitPoolManagerEvents {
  14 |     |     address public owner;
  15 |     |     address public feeTo;
  16 |     |     address public factory;
  17 |     |     uint16  public constant MAX_PROTOCOL_FEE = 1e4; /// @dev - max protocol fee of 1%
  18 |     |     // tickSpacing => enabled
  19 |     |     mapping(bytes32 => address) internal _poolImpls;
  20 |     |     mapping(bytes32 => address) internal _tokenImpls;
  21 |     |     mapping(uint16 => int16) internal _feeTiers;
  22 |     | 
  23 |     |     error InvalidSwapFee();
  24 |     |     error InvalidTickSpacing();
  25 |     |     error TickSpacingAlreadyEnabled();
  26 |     |     error ImplementationAlreadyExists();
  27 |     | 
  28 |     |     constructor() {
  29 |     |         owner = msg.sender;
  30 |     |         feeTo = msg.sender;
  31 |     |         emit OwnerTransfer(address(0), msg.sender);
  32 |     | 
  33 |     |         // create initial fee tiers
  34 |     |         _feeTiers[500] = 10;
  35 |     |         _feeTiers[10000] = 100;
  36 |     |         emit FeeTierEnabled(500, 10);
  37 |     |         emit FeeTierEnabled(10000, 100);
  38 |     |     }
  39 |     | 
  40 |     |     /**
  41 |     |      * @dev Throws if called by any account other than the owner.
  42 |     |      */
  43 |     |     modifier onlyOwner() {
  44 |     |         _checkOwner();
  45 |     |         _;
  46 |     |     }
  47 |     | 
  48 |     |     modifier onlyFeeTo() {
  49 |     |         _checkFeeTo();
  50 |     |         _;
  51 |     |     }
  52 |     | 
  53 |     |     /**
  54 |     |      * @dev Transfers ownership of the contract to a new account (`newOwner`).
  55 |     |      * Can only be called by the current owner.
  56 |     |      */
  57 |     |     function transferOwner(address newOwner) public virtual onlyOwner {
  58 |     |         if(newOwner == address(0)) require (false, 'TransferredToZeroAddress()');
  59 |     |         _transferOwner(newOwner);
  60 |     |     }
  61 |     | 
  62 |     |     function transferFeeTo(address newFeeTo) public virtual onlyFeeTo {
  63 |     |         if(newFeeTo == address(0)) require (false, 'TransferredToZeroAddress()');
  64 |     |         _transferFeeTo(newFeeTo);
  65 |     |     }
  66 |     | 
  67 |     |     /**
  68 |     |      * @dev Transfers ownership of the contract to a new account (`newOwner`).
  69 |     |      * Internal function without access restriction.
  70 |     |      */
  71 |     |     function _transferOwner(address newOwner) internal virtual {
  72 |     |         address oldOwner = owner;
  73 |     |         owner = newOwner;
  74 |     |         emit OwnerTransfer(oldOwner, newOwner);
  75 |     |     }
  76 |     | 
  77 |     |     /**
  78 |     |      * @dev Transfers fee collection to a new account (`newFeeTo`).
  79 |     |      * Internal function without access restriction.
  80 |     |      */
  81 |     |     function _transferFeeTo(address newFeeTo) internal virtual {
  82 |     |         address oldFeeTo = feeTo;
  83 |     |         feeTo = newFeeTo;
  84 |     |         emit OwnerTransfer(oldFeeTo, newFeeTo);
  85 |     |     }
  86 |     | 
  87 |     |     function enableTickSpacing(
  88 |     |         int16 tickSpacing,
  89 |     |         uint16 swapFee
  90 |     |     ) external onlyOwner {
  91 |     |         if (_feeTiers[swapFee] != 0) revert TickSpacingAlreadyEnabled();
  92 |     |         if (tickSpacing <= 0) revert InvalidTickSpacing();
  93 |     |         if (tickSpacing % 2 != 0) revert InvalidTickSpacing();
  94 |     |         if (swapFee == 0) revert InvalidSwapFee();
  95 |     |         if (swapFee > 10000) revert InvalidSwapFee();
  96 |     |         _feeTiers[swapFee] = tickSpacing;
  97 |     |         emit FeeTierEnabled(swapFee, tickSpacing);
  98 |     |     }
  99 |     | 
 100 |     |     function enableImplementation(
 101 |     |         bytes32 poolType_,
 102 |     |         address poolImpl_,
 103 |     |         address tokenImpl_
 104 |     |     ) external onlyOwner {
 105 |     |         if (_poolImpls[poolType_] != address(0)) revert ImplementationAlreadyExists();
 106 |     |         _poolImpls[poolType_] = poolImpl_;
 107 |     |         _tokenImpls[poolType_] = tokenImpl_;
 108 |     |         emit ImplementationEnabled(poolType_, poolImpl_, tokenImpl_);
 109 |     |     }
 110 |     | 
 111 |     |     function setFactory(
 112 |     |         address factory_
 113 |     |     ) external onlyOwner {
 114 |     |         if (factory != address(0)) require (false, 'FactoryAlreadySet()');
 115 |     |         emit FactoryChanged(factory, factory_);
 116 |     |         factory = factory_;
 117 |     |     }
 118 |     | 
 119 |     |     function collectProtocolFees(
 120 |     |         address[] calldata collectPools
 121 |     |     ) external {
 122 |     |         if (collectPools.length == 0) require (false, 'EmptyPoolsArray()');
 123 |     |         uint128[] memory token0Fees = new uint128[](collectPools.length);
 124 |     |         uint128[] memory token1Fees = new uint128[](collectPools.length);
 125 |     |         for (uint i; i < collectPools.length;) {
 126 |     |             (token0Fees[i], token1Fees[i]) = IPool(collectPools[i]).fees(0,0,false);
 127 |     |             unchecked {
 128 |     |                 ++i;
 129 |     |             }
 130 |     |         }
 131 |     |         emit ProtocolFeesCollected(collectPools, token0Fees, token1Fees);
 132 |     |     }
 133 |     | 
 134 |     |     function modifyProtocolFees(
 135 |     |         address[] calldata modifyPools,
 136 |     |         uint16[] calldata syncFees,
 137 |     |         uint16[] calldata fillFees,
 138 |     |         bool[] calldata setFees
 139 |     |     ) external onlyOwner {
 140 |     |         if (modifyPools.length == 0) require (false, 'EmptyPoolsArray()');
 141 |     |         if (modifyPools.length != syncFees.length
 142 |     |             || syncFees.length != fillFees.length
 143 |     |             || fillFees.length != setFees.length) {
 144 |     |             require (false, 'MismatchedArrayLengths()');
 145 |     |         }
 146 |     |         uint128[] memory token0Fees = new uint128[](modifyPools.length);
 147 |     |         uint128[] memory token1Fees = new uint128[](modifyPools.length);
 148 |     |         for (uint i; i < modifyPools.length;) {
 149 |     |             if (syncFees[i] > MAX_PROTOCOL_FEE) require (false, 'ProtocolFeeCeilingExceeded()');
 150 |     |             if (fillFees[i] > MAX_PROTOCOL_FEE) require (false, 'ProtocolFeeCeilingExceeded()');
 151 |     |             (
 152 |     |                 token0Fees[i],
 153 |     |                 token1Fees[i]
 154 |     |             ) = IPool(modifyPools[i]).fees(
 155 |     |                 syncFees[i],
 156 |     |                 fillFees[i],
 157 |     |                 setFees[i]
 158 |     |             );
 159 |     |             unchecked {
 160 |     |                 ++i;
 161 |     |             }
 162 |     |         }
 163 |     |         emit ProtocolFeesModified(modifyPools, syncFees, fillFees, setFees, token0Fees, token1Fees);
 164 |     |     }
 165 |     | 
 166 |     |     function implementations(
 167 |     |         bytes32 key
 168 |     |     ) external view returns (
 169 |     |         address,
 170 |     |         address
 171 |     |     ) {
 172 |     |         return (_poolImpls[key], _tokenImpls[key]);
 173 |     |     }
 174 |     | 
 175 |     |     function feeTiers(
 176 |     |         uint16 swapFee
 177 |     |     ) external view returns (
 178 |     |         int16 tickSpacing
 179 |     |     ) {
 180 |     |         return _feeTiers[swapFee];
 181 |     |     }
 182 |     |     
 183 |     |     /**
 184 |     |      * @dev Throws if the sender is not the owner.
 185 |     |      */
 186 |     |     function _checkOwner() internal view {
 187 |     |         if (owner != msg.sender) require (false, 'OwnerOnly()');
 188 |     |     }
 189 |     | 
 190 |     |     /**
 191 |     |      * @dev Throws if the sender is not the feeTo.
 192 |     |      */
 193 |     |     function _checkFeeTo() internal view {
 194 |     |         if (feeTo != msg.sender) require (false, 'FeeToOnly()');
 195 |     |     }
 196 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/utils/PoolRouter.sol
  1 |     | // SPDX-License-Identifier: GPLv3
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | import '../interfaces/IPool.sol';
  5 |     | import '../interfaces/callbacks/IPoolsharkSwapCallback.sol';
  6 |     | import '../libraries/utils/SafeTransfers.sol';
  7 |     | import '../base/structs/PoolsharkStructs.sol';
  8 |     | import '../libraries/solady/LibClone.sol';
  9 |     | 
 10 |     | contract PoolRouter is
 11 |     |     IPoolsharkSwapCallback,
 12 |     |     PoolsharkStructs
 13 |     | {
 14 |     |     address public immutable factory;
 15 |     |     address public immutable implementation;
 16 |     | 
 17 |     |     struct SwapCallbackData {
 18 |     |         address sender;
 19 |     |     }
 20 |     | 
 21 |     |     constructor(
 22 |     |         address factory_,
 23 |     |         address implementation_
 24 |     |     ) {
 25 |     |         factory = factory_;
 26 |     |         implementation = implementation_;
 27 |     |     }
 28 |     | 
 29 |     |     /// @inheritdoc IPoolsharkSwapCallback
 30 |     |     function poolsharkSwapCallback(
 31 |     |         int256 amount0Delta,
 32 |     |         int256 amount1Delta,
 33 |     |         bytes calldata data
 34 |     |     ) external override {
 35 |     |         PoolsharkStructs.Immutables memory constants = IPool(msg.sender).immutables();
 36 |     |         // generate key for pool
 37 |     |         bytes32 key = keccak256(abi.encode(
 38 |     |             implementation,
 39 |     |             constants.token0,
 40 |     |             constants.token1,
 41 |     |             constants.swapFee
 42 |     |         ));
 43 |     | 
 44 |     |         // compute address
 45 |     |         address predictedAddress = LibClone.predictDeterministicAddress(
 46 |     |             implementation,
 47 |     |             abi.encodePacked(
 48 |     |                 constants.owner,
 49 |     |                 constants.token0,
 50 |     |                 constants.token1,
 51 |     |                 constants.poolToken,
 52 |     |                 constants.bounds.min,
 53 |     |                 constants.bounds.max,
 54 |     |                 constants.tickSpacing,
 55 |     |                 constants.swapFee
 56 |     |             ),
 57 |     |             key,
 58 |     |             factory
 59 |     |         );
 60 |     | 
 61 |     |         // revert on sender mismatch
 62 |     |         if (msg.sender != predictedAddress) require(false, 'InvalidCallerAddress()');
 63 |     | 
 64 |     |         // decode original sender
 65 |     |         SwapCallbackData memory _data = abi.decode(data, (SwapCallbackData));
 66 |     |         
 67 |     |         // transfer from swap caller
 68 |     |         if (amount0Delta < 0) {
 69 |     |             SafeTransfers.transferInto(constants.token0, _data.sender, uint256(-amount0Delta));
 70 |     |         } else {
 71 |     |             SafeTransfers.transferInto(constants.token1, _data.sender, uint256(-amount1Delta));
 72 |     |         }
 73 |     |     }
 74 |     | 
 75 |     |     function multiCall(
 76 |     |         address[] memory pools,
 77 |     |         SwapParams[] memory params 
 78 |     |     ) external {
 79 |     |         if (pools.length != params.length) require(false, 'InputArrayLengthsMismatch()');
 80 |     |         for (uint i = 0; i < pools.length;) {
 81 |     |             params[i].callbackData = abi.encode(SwapCallbackData({sender: msg.sender}));
 82 |     |             IPool(pools[i]).swap(params[i]);
 83 |     |             unchecked {
 84 |     |                 ++i;
 85 |     |             }
 86 |     |         }
 87 |     |     }
 88 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/utils/RangePoolERC1155.sol
   1 |     | // SPDX-License-Identifier: MIT
   2 |     | 
   3 |     | pragma solidity 0.8.13;
   4 |     | 
   5 |     | import '../interfaces/IPool.sol';
   6 |     | import "./RangePoolErrors.sol";
   7 |     | import '../base/storage/RangePoolERC1155Immutables.sol';
   8 |     | import "../interfaces/range/IRangePoolERC1155.sol";
   9 |     | import "../libraries/range/Tokens.sol";
  10 |     | import '../libraries/solady/LibClone.sol';
  11 |     | 
  12 |     | // needs to be deployed as a separate clone
  13 |     | // poolImpls; tokenImpls
  14 |     | // store address in Immutables struct
  15 |     | // emit token address on created pool
  16 |     | // launch an ERC1155 template to track events on Subgraph
  17 |     | // emitting msg.sender will give the pool address
  18 |     | // can verify the owner is the pool address designated based on immutables
  19 |     | 
  20 |     | contract RangePoolERC1155 is
  21 |     |     IRangePoolERC1155,
  22 |     |     RangePoolERC1155Immutables,
  23 |     |     RangePoolERC1155Errors 
  24 |     | {
  25 |     |     error OwnerOnly();
  26 |     | 
  27 |     |     address public immutable factory;
  28 |     |     address public immutable original;
  29 |     | 
  30 |     |     constructor(
  31 |     |         address factory_
  32 |     |     ) {
  33 |     |         factory = factory_;
  34 |     |         original = address(this);
  35 |     |     }
  36 |     | 
  37 |     |     /// @dev token id => owner => balance
  38 |     |     mapping(uint256 => mapping(address => uint256)) private _tokenBalances;
  39 |     | 
  40 |     |     /// @dev owner => spender => approved
  41 |     |     mapping(address => mapping(address => bool)) private _spenderApprovals;
  42 |     | 
  43 |     |     /// @dev token id => total supply
  44 |     |     mapping(uint256 => uint256) private _totalSupplyById;
  45 |     | 
  46 |     |     string private constant _NAME = "Poolshark Range LP";
  47 |     |     string private constant _SYMBOL = "PSHARK-RANGE-LP";
  48 |     | 
  49 |     |     modifier onlyCanonicalClones(
  50 |     |         PoolsharkStructs.Immutables memory constants
  51 |     |     ) {
  52 |     |         if(!_onlyCanonicalClones(constants)) require (false, 'CanoncialClonesOnly()');
  53 |     |         _;
  54 |     |     }
  55 |     | 
  56 |     |     modifier checkApproval(address _from, address _spender) {
  57 |     |         if (!_isApprovedForAll(_from, _spender)) revert SpenderNotApproved(_from, _spender);
  58 |     |         _;
  59 |     |     }
  60 |     | 
  61 |     |     modifier checkAddresses(address _from, address _to) {
  62 |     |         if (_from == address(0) || _to == address(0)) revert TransferFromOrToAddress0();
  63 |     |         if (_from == _to) revert TransferToSelf();
  64 |     |         _;
  65 |     |     }
  66 |     | 
  67 |     |     modifier checkLength(uint256 _lengthA, uint256 _lengthB) {
  68 |     |         if (_lengthA != _lengthB) revert LengthMismatch(_lengthA, _lengthB);
  69 |     |         _;
  70 |     |     }
  71 |     | 
  72 |     |     modifier checkERC1155Support(address recipient) {
  73 |     |         if (!_verifyERC1155Support(recipient)) revert ERC1155NotSupported();
  74 |     |         _;
  75 |     |     }
  76 |     | 
  77 |     |     function mintFungible(
  78 |     |         address _account,
  79 |     |         uint256 _id,
  80 |     |         uint256 _amount,
  81 |     |         PoolsharkStructs.Immutables memory constants
  82 |     |     ) external onlyCanonicalClones(constants) {
  83 |     |         _mint(_account, _id, _amount);
  84 |     |     }
  85 |     | 
  86 |     |     function burnFungible(
  87 |     |         address _account,
  88 |     |         uint256 _id,
  89 |     |         uint256 _amount,
  90 |     |         PoolsharkStructs.Immutables memory constants
  91 |     |     ) external onlyCanonicalClones(constants) {
  92 |     |         _burn(_account, _id, _amount);
  93 |     |     }
  94 |     | 
  95 |     |     function setApprovalForAll(address _spender, bool _approved) public virtual override {
  96 |     |         _setApprovalForAll(msg.sender, _spender, _approved);
  97 |     |     }
  98 |     | 
  99 |     |     function safeTransferFrom(
 100 |     |         address _from,
 101 |     |         address _to,
 102 |     |         uint256 _id,
 103 |     |         uint256 _amount
 104 |     |     ) public virtual override
 105 |     |         checkAddresses(_from, _to)
 106 |     |         checkApproval(_from, msg.sender)
 107 |     |         checkERC1155Support(_to)
 108 |     |     {
 109 |     |         address _spender = msg.sender;
 110 |     |         _transfer(_from, _to, _id, _amount);
 111 |     |         emit TransferSingle(_spender, _from, _to, _id, _amount);
 112 |     |     }
 113 |     | 
 114 |     |     function safeBatchTransferFrom(
 115 |     |         address _from,
 116 |     |         address _to,
 117 |     |         uint256[] calldata _ids,
 118 |     |         uint256[] calldata _amounts
 119 |     |     ) public virtual override
 120 |     |         checkLength(_ids.length, _amounts.length)
 121 |     |         checkAddresses(_from, _to)
 122 |     |         checkApproval(_from, msg.sender)
 123 |     |         checkERC1155Support(_to)
 124 |     |     {
 125 |     |         unchecked {
 126 |     |             for (uint256 i; i < _ids.length; ++i) {
 127 |     |                 _transfer(_from, _to, _ids[i], _amounts[i]);
 128 |     |             }
 129 |     |         }
 130 |     |         emit TransferBatch(msg.sender, _from, _to, _ids, _amounts);
 131 |     |     }
 132 |     | 
 133 |     |     function isApprovedForAll(address _owner, address _spender) public view virtual override returns (bool) {
 134 |     |         return _isApprovedForAll(_owner, _spender);
 135 |     |     }
 136 |     | 
 137 |     |     function supportsInterface(bytes4 interfaceID) external pure returns (bool) {
 138 |     |       return  interfaceID == 0x01ffc9a7 ||    // ERC-165 support
 139 |     |               interfaceID == 0xd9b67a26;      // ERC-1155 support
 140 |     |     }
 141 |     | 
 142 |     |     function name() public pure virtual override returns (string memory) {
 143 |     |         return _NAME;
 144 |     |     }
 145 |     | 
 146 |     |     function symbol() public pure virtual override returns (string memory) {
 147 |     |         return _SYMBOL;
 148 |     |     }
 149 |     | 
 150 |     |     function totalSupply(uint256 _id) public view virtual override returns (uint256) {
 151 |     |         return _totalSupplyById[_id];
 152 |     |     }
 153 |     | 
 154 |     |     function balanceOf(address _account, uint256 _id) public view virtual override returns (uint256) {
 155 |     |         return _tokenBalances[_id][_account];
 156 |     |     }
 157 |     | 
 158 |     |     function balanceOfBatch(
 159 |     |         address[] calldata _accounts,
 160 |     |         uint256[] calldata _ids
 161 |     |     ) public view virtual override
 162 |     |         checkLength(_accounts.length, _ids.length)
 163 |     |         returns (uint256[] memory batchBalances)
 164 |     |     {
 165 |     |         batchBalances = new uint256[](_accounts.length);
 166 |     |         unchecked {
 167 |     |             for (uint256 i; i < _accounts.length; ++i) {
 168 |     |                 batchBalances[i] = balanceOf(_accounts[i], _ids[i]);
 169 |     |             }
 170 |     |         }
 171 |     |     }
 172 |     | 
 173 |     |     function _mint(
 174 |     |         address _account,
 175 |     |         uint256 _id,
 176 |     |         uint256 _amount
 177 |     |     ) internal virtual {
 178 |     |         if (_account == address(0)) revert MintToAddress0();
 179 |     |         _beforeTokenTransfer(address(0), _account, _id, _amount);
 180 |     |         _totalSupplyById[_id] += _amount;
 181 |     |         uint256 _accountBalance = _tokenBalances[_id][_account];
 182 |     |         unchecked {
 183 |     |             _tokenBalances[_id][_account] = _accountBalance + _amount;
 184 |     |         }
 185 |     |         emit TransferSingle(msg.sender, address(0), _account, _id, _amount);
 186 |     |     }
 187 |     | 
 188 |     |     function _burn(
 189 |     |         address _account,
 190 |     |         uint256 _id,
 191 |     |         uint256 _amount
 192 |     |     ) internal virtual {
 193 |     |         if (_account == address(0)) revert BurnFromAddress0();
 194 |     |         uint256 _accountBalance = _tokenBalances[_id][_account];
 195 |     |         if (_accountBalance < _amount) revert BurnExceedsBalance(_account, _id, _amount);
 196 |     |         _beforeTokenTransfer(_account, address(0), _id, _amount);
 197 |     |         unchecked {
 198 |     |             _tokenBalances[_id][_account] = _accountBalance - _amount;
 199 |     |             _totalSupplyById[_id] -= _amount;
 200 |     |         }
 201 |     |         emit TransferSingle(msg.sender, _account, address(0), _id, _amount);
 202 |     |     }
 203 |     | 
 204 |     |     function _transfer(
 205 |     |         address _from,
 206 |     |         address _to,
 207 |     |         uint256 _id,
 208 |     |         uint256 _amount
 209 |     |     ) internal virtual {
 210 |     |         uint256 _fromBalance = _tokenBalances[_id][_from];
 211 |     |         if (_fromBalance < _amount) revert TransferExceedsBalance(_from, _id, _amount);
 212 |     |         _beforeTokenTransfer(_from, _to, _id, _amount);
 213 |     |         unchecked {
 214 |     |             _tokenBalances[_id][_from] = _fromBalance - _amount;
 215 |     |         }
 216 |     |         uint256 _toBalance = _tokenBalances[_id][_to];
 217 |     |         unchecked {
 218 |     |             _tokenBalances[_id][_to] = _toBalance + _amount;
 219 |     |         }
 220 |     |     }
 221 |     | 
 222 |     |     function _setApprovalForAll(
 223 |     |         address _owner,
 224 |     |         address _spender,
 225 |     |         bool _approved
 226 |     |     ) internal virtual {
 227 |     |         if (_owner == _spender) revert SelfApproval(_owner);
 228 |     |         _spenderApprovals[_owner][_spender] = _approved;
 229 |     |         emit ApprovalForAll(_owner, _spender, _approved);
 230 |     |     }
 231 |     | 
 232 |     |     function _isApprovedForAll(address _owner, address _spender) internal view virtual returns (bool) {
 233 |     |         return _owner == _spender || _spenderApprovals[_owner][_spender];
 234 |     |     }
 235 |     | 
 236 |     |     /// @notice Hook that is called before any token transfer.
 237 |     |     function _beforeTokenTransfer(
 238 |     |         address from,
 239 |     |         address to,
 240 |     |         uint256 id,
 241 |     |         uint256 amount
 242 |     |     ) internal virtual {}
 243 |     | 
 244 |     |     //TODO: check address(this) for valid poolToken clone
 245 |     | 
 246 |     |     function _onlyCanonicalClones(
 247 |     |         PoolsharkStructs.Immutables memory constants
 248 |     |     ) private view returns (bool) {
 249 |     |         // generate key for pool
 250 |     |         bytes32 key = keccak256(abi.encode(
 251 |     |             poolImpl(),
 252 |     |             constants.token0,
 253 |     |             constants.token1,
 254 |     |             constants.swapFee
 255 |     |         ));
 256 |     | 
 257 |     |         // compute address
 258 |     |         address predictedAddress = LibClone.predictDeterministicAddress(
 259 |     |             poolImpl(),
 260 |     |             abi.encodePacked(
 261 |     |                 constants.owner,
 262 |     |                 constants.token0,
 263 |     |                 constants.token1,
 264 |     |                 constants.poolToken,
 265 |     |                 constants.bounds.min,
 266 |     |                 constants.bounds.max,
 267 |     |                 constants.tickSpacing,
 268 |     |                 constants.swapFee
 269 |     |             ),
 270 |     |             key,
 271 |     |             factory
 272 |     |         );
 273 |     | 
 274 |     |         if (predictedAddress != msg.sender) return false;
 275 |     | 
 276 |     |         return true;
 277 |     |     }
 278 |     | 
 279 |     |     /// @notice Return if the `_target` contract supports ERC-1155 interface
 280 |     |     /// @param _target The address of the contract
 281 |     |     /// @return supported Whether the contract is supported (true) or not (false)
 282 |     |     function _verifyERC1155Support(address _target) private view returns (bool supported) {
 283 |     |         if (_target.code.length == 0) return true;
 284 |     |         bytes memory encodedParams = abi.encodeWithSelector(
 285 |     |             IERC165.supportsInterface.selector,
 286 |     |             type(IRangePoolERC1155).interfaceId
 287 |     |         );
 288 |     |         (bool success, bytes memory result) = _target.staticcall{gas: 30_000}(encodedParams);
 289 |     |         if (result.length < 32) return false;
 290 |     |         return success && abi.decode(result, (bool));
 291 |     |     }
 292 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/utils/RangePoolErrors.sol
  1 |     | // SPDX-License-Identifier: GPLv3
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | abstract contract RangePoolErrors {
  5 |     |     error Locked();
  6 |     |     error ManagerOnly();
  7 |     | }
  8 |     | 
  9 |     | abstract contract RangePoolERC1155Errors {
 10 |     |     error SpenderNotApproved(address owner, address spender);
 11 |     |     error TransferFromOrToAddress0();
 12 |     |     error MintToAddress0();
 13 |     |     error BurnFromAddress0();
 14 |     |     error BurnExceedsBalance(address from, uint256 id, uint256 amount);
 15 |     |     error LengthMismatch(uint256 accountsLength, uint256 idsLength);
 16 |     |     error SelfApproval(address owner);
 17 |     |     error TransferExceedsBalance(address from, uint256 id, uint256 amount);
 18 |     |     error TransferToSelf();
 19 |     |     error ERC1155NotSupported();
 20 |     | }

/Users/kevinli/Desktop/All/PersonalCoding/GuardianAudits/poolshark-limit/limit-pocs/contracts/utils/RebaseLibrary.sol
  1 |     | // SPDX-License-Identifier: GPL-3.0-or-later
  2 |     | pragma solidity 0.8.13;
  3 |     | 
  4 |     | struct Rebase {
  5 |     |     uint128 elastic;
  6 |     |     uint128 base;
  7 |     | }
  8 |     | 
  9 |     | /// @notice A rebasing library
 10 |     | abstract contract RebaseLibrary {
 11 |     |     /// @notice Calculates the base value in relationship to `elastic` and `total`.
 12 |     |     function toBase(Rebase memory total, uint256 elastic) internal pure returns (uint256 base) {
 13 |     |         if (total.elastic == 0) {
 14 |     |             base = elastic;
 15 |     |         } else {
 16 |     |             base = (elastic * total.base) / total.elastic;
 17 |     |         }
 18 |     |     }
 19 |     | 
 20 |     |     /// @notice Calculates the elastic value in relationship to `base` and `total`.
 21 |     |     function toElastic(Rebase memory total, uint256 base) internal pure returns (uint256 elastic) {
 22 |     |         if (total.base == 0) {
 23 |     |             elastic = base;
 24 |     |         } else {
 25 |     |             elastic = (base * total.elastic) / total.base;
 26 |     |         }
 27 |     |     }
 28 |     | }
 29 |     | 

